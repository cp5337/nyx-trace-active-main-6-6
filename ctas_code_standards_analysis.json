{
  "summary": {
    "total_files": 214,
    "compliant_files": 114,
    "non_compliant_files": 100,
    "compliance_rate": 53.271028037383175,
    "analysis_time": 1.0584971904754639,
    "compliance_level": "fair"
  },
  "standards": {
    "line_length": {
      "compliant": 78,
      "non_compliant": 136,
      "compliance_rate": 36.44859813084112,
      "total": 214
    },
    "comment_density": {
      "compliant": 162,
      "non_compliant": 52,
      "compliance_rate": 75.70093457943925,
      "total": 214
    },
    "module_size": {
      "compliant": 109,
      "non_compliant": 105,
      "compliance_rate": 50.93457943925234,
      "total": 214
    },
    "docstrings": {
      "compliant": 195,
      "non_compliant": 19,
      "compliance_rate": 91.1214953271028,
      "total": 214
    },
    "naming_conventions": {
      "compliant": 210,
      "non_compliant": 4,
      "compliance_rate": 98.13084112149532,
      "total": 214
    },
    "complexity": {
      "compliant": 174,
      "non_compliant": 40,
      "compliance_rate": 81.30841121495327,
      "total": 214
    }
  },
  "file_details": [
    {
      "path": "app/data_handlers.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/app/data_handlers.py",
      "total_lines": 1,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 100.0,
          "comment_lines": 1,
          "code_lines": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "module_size": {
          "compliant": true,
          "module_size": 1,
          "issues": [],
          "recommendations": [],
          "metric": 1
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100,
          "functions": 0,
          "functions_with_docstrings": 0,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 100.0,
      "issues": [],
      "recommendations": [],
      "priority": "low"
    },
    {
      "path": "app/page_router.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/app/page_router.py",
      "total_lines": 1,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 100.0,
          "comment_lines": 1,
          "code_lines": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "module_size": {
          "compliant": true,
          "module_size": 1,
          "issues": [],
          "recommendations": [],
          "metric": 1
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100,
          "functions": 0,
          "functions_with_docstrings": 0,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 100.0,
      "issues": [],
      "recommendations": [],
      "priority": "low"
    },
    {
      "path": "app/streamlit_config.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/app/streamlit_config.py",
      "total_lines": 2,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 50.0,
          "comment_lines": 1,
          "code_lines": 1,
          "issues": [],
          "recommendations": [],
          "metric": 50.0
        },
        "module_size": {
          "compliant": true,
          "module_size": 2,
          "issues": [],
          "recommendations": [],
          "metric": 2
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100,
          "functions": 0,
          "functions_with_docstrings": 0,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 100.0,
      "issues": [],
      "recommendations": [],
      "priority": "low"
    },
    {
      "path": "app/ui_components.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/app/ui_components.py",
      "total_lines": 1,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 100.0,
          "comment_lines": 1,
          "code_lines": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "module_size": {
          "compliant": true,
          "module_size": 1,
          "issues": [],
          "recommendations": [],
          "metric": 1
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100,
          "functions": 0,
          "functions_with_docstrings": 0,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 100.0,
      "issues": [],
      "recommendations": [],
      "priority": "low"
    },
    {
      "path": "core/__init__.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/__init__.py",
      "total_lines": 1,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 100.0,
          "comment_lines": 1,
          "code_lines": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "module_size": {
          "compliant": true,
          "module_size": 1,
          "issues": [],
          "recommendations": [],
          "metric": 1
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100,
          "functions": 0,
          "functions_with_docstrings": 0,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 100.0,
      "issues": [],
      "recommendations": [],
      "priority": "low"
    },
    {
      "path": "core/algorithms/__init__.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/algorithms/__init__.py",
      "total_lines": 84,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": false,
          "comment_density": 12.345679012345679,
          "comment_lines": 10,
          "code_lines": 71,
          "issues": [
            "Comment density 12.3% below minimum 15.0%",
            "  Comment lines: 10, Code lines: 71"
          ],
          "recommendations": [
            "Add more comments to explain complex logic and functions"
          ],
          "metric": 12.345679012345679
        },
        "module_size": {
          "compliant": true,
          "module_size": 84,
          "issues": [],
          "recommendations": [],
          "metric": 84
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100,
          "functions": 0,
          "functions_with_docstrings": 0,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 96.89553100859143,
      "issues": [
        "Comment density 12.3% below minimum 15.0%",
        "  Comment lines: 10, Code lines: 71"
      ],
      "recommendations": [
        "Add more comments to explain complex logic and functions"
      ],
      "priority": "low"
    },
    {
      "path": "core/algorithms/distance_calculator.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/algorithms/distance_calculator.py",
      "total_lines": 854,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 68,
              "length": 86,
              "content": "    - Vincenty, T. (1975) \"Direct and Inverse Solu..."
            },
            {
              "line_number": 105,
              "length": 88,
              "content": "            - Haversine formula: a = sin\u00b2(\u0394lat/2) ..."
            },
            {
              "line_number": 165,
              "length": 84,
              "content": "            - Vincenty, T. (1975). \"Direct and Inv..."
            },
            {
              "line_number": 166,
              "length": 94,
              "content": "              Ellipsoid with Application of Nested..."
            },
            {
              "line_number": 199,
              "length": 84,
              "content": "        # Initial value for lambda (difference in ..."
            },
            {
              "line_number": 456,
              "length": 85,
              "content": "        Calculate the destination point given a st..."
            }
          ],
          "issues": [
            "Found 6 lines exceeding 80 characters",
            "  Line 68: 86 chars",
            "  Line 105: 88 chars",
            "  Line 165: 84 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 6
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 33.379694019471486,
          "comment_lines": 240,
          "code_lines": 479,
          "issues": [],
          "recommendations": [],
          "metric": 33.379694019471486
        },
        "module_size": {
          "compliant": false,
          "module_size": 854,
          "issues": [
            "Module size 854 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 854
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 11,
          "functions_with_docstrings": 11,
          "classes": 1,
          "classes_with_docstrings": 1,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": false,
          "violations": [
            "Variable 'sin_U1' should use snake_case",
            "Variable 'cos_U1' should use snake_case",
            "Variable 'sin_U2' should use snake_case",
            "Variable 'cos_U2' should use snake_case",
            "Variable 'Bx' should use snake_case",
            "Variable 'By' should use snake_case",
            "Variable 'dPhi' should use snake_case"
          ],
          "issues": [
            "Variable 'sin_U1' should use snake_case",
            "Variable 'cos_U1' should use snake_case",
            "Variable 'sin_U2' should use snake_case",
            "Variable 'cos_U2' should use snake_case",
            "Variable 'Bx' should use snake_case",
            "... and 2 more violations"
          ],
          "recommendations": [
            "Follow Python naming conventions: snake_case for functions/variables, PascalCase for classes"
          ],
          "metric": 7
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 66.66666666666667,
      "issues": [
        "Found 6 lines exceeding 80 characters",
        "  Line 68: 86 chars",
        "  Line 105: 88 chars",
        "  Line 165: 84 chars",
        "Module size 854 lines exceeds maximum 300 lines",
        "Variable 'sin_U1' should use snake_case",
        "Variable 'cos_U1' should use snake_case",
        "Variable 'sin_U2' should use snake_case",
        "Variable 'cos_U2' should use snake_case",
        "Variable 'Bx' should use snake_case",
        "... and 2 more violations"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files",
        "Follow Python naming conventions: snake_case for functions/variables, PascalCase for classes"
      ],
      "priority": "low"
    },
    {
      "path": "core/algorithms/geospatial_algorithms.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/algorithms/geospatial_algorithms.py",
      "total_lines": 101,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 21.11111111111111,
          "comment_lines": 19,
          "code_lines": 71,
          "issues": [],
          "recommendations": [],
          "metric": 21.11111111111111
        },
        "module_size": {
          "compliant": true,
          "module_size": 101,
          "issues": [],
          "recommendations": [],
          "metric": 101
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100,
          "functions": 0,
          "functions_with_docstrings": 0,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 100.0,
      "issues": [],
      "recommendations": [],
      "priority": "low"
    },
    {
      "path": "core/algorithms/geospatial_utils.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/algorithms/geospatial_utils.py",
      "total_lines": 562,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 257,
              "length": 82,
              "content": "        buffer_fraction: Fraction to expand the bo..."
            },
            {
              "line_number": 393,
              "length": 84,
              "content": "        tolerance: Tolerance parameter for simplif..."
            },
            {
              "line_number": 500,
              "length": 83,
              "content": "        num_points: Number of interpolated points ..."
            }
          ],
          "issues": [
            "Found 3 lines exceeding 80 characters",
            "  Line 257: 82 chars",
            "  Line 393: 84 chars",
            "  Line 500: 83 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 3
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 34.87858719646799,
          "comment_lines": 158,
          "code_lines": 295,
          "issues": [],
          "recommendations": [],
          "metric": 34.87858719646799
        },
        "module_size": {
          "compliant": false,
          "module_size": 562,
          "issues": [
            "Module size 562 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 562
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 13,
          "functions_with_docstrings": 13,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 73.68421052631578,
      "issues": [
        "Found 3 lines exceeding 80 characters",
        "  Line 257: 82 chars",
        "  Line 393: 84 chars",
        "  Line 500: 83 chars",
        "Module size 562 lines exceeds maximum 300 lines"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files"
      ],
      "priority": "low"
    },
    {
      "path": "core/algorithms/hexagonal_grid.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/algorithms/hexagonal_grid.py",
      "total_lines": 815,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 109,
              "length": 81,
              "content": "                f\"Invalid H3 resolution {resolutio..."
            },
            {
              "line_number": 213,
              "length": 81,
              "content": "                f\"Invalid H3 resolution {resolutio..."
            },
            {
              "line_number": 254,
              "length": 83,
              "content": "            List of H3 indices including the origi..."
            },
            {
              "line_number": 408,
              "length": 81,
              "content": "                f\"Invalid H3 resolution {resolutio..."
            },
            {
              "line_number": 505,
              "length": 94,
              "content": "            parent_resolution: Resolution of the p..."
            },
            {
              "line_number": 518,
              "length": 108,
              "content": "                    f\"Invalid parent resolution {p..."
            },
            {
              "line_number": 530,
              "length": 84,
              "content": "                f\"Input: h3_index={h3_index}, pare..."
            },
            {
              "line_number": 546,
              "length": 99,
              "content": "            child_resolution: Resolution of the ch..."
            },
            {
              "line_number": 559,
              "length": 106,
              "content": "                    f\"Invalid child resolution {ch..."
            },
            {
              "line_number": 571,
              "length": 82,
              "content": "                f\"Input: h3_index={h3_index}, chil..."
            },
            {
              "line_number": 632,
              "length": 81,
              "content": "                f\"Invalid H3 resolution {resolutio..."
            },
            {
              "line_number": 709,
              "length": 81,
              "content": "                f\"Invalid H3 resolution {resolutio..."
            }
          ],
          "issues": [
            "Found 12 lines exceeding 80 characters",
            "  Line 109: 81 chars",
            "  Line 213: 81 chars",
            "  Line 254: 83 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 12
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 41.92634560906516,
          "comment_lines": 296,
          "code_lines": 410,
          "issues": [],
          "recommendations": [],
          "metric": 41.92634560906516
        },
        "module_size": {
          "compliant": false,
          "module_size": 815,
          "issues": [
            "Module size 815 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 815
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 16,
          "functions_with_docstrings": 16,
          "classes": 1,
          "classes_with_docstrings": 1,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 73.68421052631578,
      "issues": [
        "Found 12 lines exceeding 80 characters",
        "  Line 109: 81 chars",
        "  Line 213: 81 chars",
        "  Line 254: 83 chars",
        "Module size 815 lines exceeds maximum 300 lines"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files"
      ],
      "priority": "low"
    },
    {
      "path": "core/algorithms/hotspot_analysis.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/algorithms/hotspot_analysis.py",
      "total_lines": 970,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 252,
              "length": 120,
              "content": "                f\"Mismatch between values length (..."
            },
            {
              "line_number": 351,
              "length": 120,
              "content": "                f\"Mismatch between values length (..."
            },
            {
              "line_number": 439,
              "length": 120,
              "content": "                f\"Mismatch between values length (..."
            },
            {
              "line_number": 456,
              "length": 84,
              "content": "            # Calculate the sum of squared deviati..."
            },
            {
              "line_number": 585,
              "length": 82,
              "content": "                # Scott's rule: bandwidth ~ n^(-1/..."
            },
            {
              "line_number": 732,
              "length": 107,
              "content": "                f\"Mismatched input lengths: points..."
            },
            {
              "line_number": 856,
              "length": 83,
              "content": "                                \"p_value\": 0,  # W..."
            },
            {
              "line_number": 922,
              "length": 117,
              "content": "                f\"Mismatch between g_star_values l..."
            }
          ],
          "issues": [
            "Found 8 lines exceeding 80 characters",
            "  Line 252: 120 chars",
            "  Line 351: 120 chars",
            "  Line 439: 120 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 8
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 33.497536945812804,
          "comment_lines": 272,
          "code_lines": 540,
          "issues": [],
          "recommendations": [],
          "metric": 33.497536945812804
        },
        "module_size": {
          "compliant": false,
          "module_size": 970,
          "issues": [
            "Module size 970 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 970
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 9,
          "functions_with_docstrings": 9,
          "classes": 1,
          "classes_with_docstrings": 1,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": false,
          "complexity_issues": [
            "Function 'space_time_scan' has high complexity (15 decision points)"
          ],
          "issues": [
            "Function 'space_time_scan' has high complexity (15 decision points)"
          ],
          "recommendations": [
            "Break complex functions into smaller, focused functions",
            "Extract complex logic into separate methods or classes"
          ],
          "metric": 1
        }
      },
      "overall_compliant": false,
      "compliance_score": 65.78947368421052,
      "issues": [
        "Found 8 lines exceeding 80 characters",
        "  Line 252: 120 chars",
        "  Line 351: 120 chars",
        "  Line 439: 120 chars",
        "Module size 970 lines exceeds maximum 300 lines",
        "Function 'space_time_scan' has high complexity (15 decision points)"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files",
        "Break complex functions into smaller, focused functions",
        "Extract complex logic into separate methods or classes"
      ],
      "priority": "low"
    },
    {
      "path": "core/algorithms/spatial_join.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/algorithms/spatial_join.py",
      "total_lines": 675,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 65,
              "length": 96,
              "content": "    - Eldawy, A., & Mokbel, M. F. (2015) \"SpatialH..."
            },
            {
              "line_number": 109,
              "length": 98,
              "content": "                f\"ID list length ({len(ids)}) does..."
            },
            {
              "line_number": 154,
              "length": 94,
              "content": "            List of lists, where each inner list c..."
            },
            {
              "line_number": 227,
              "length": 86,
              "content": "            predicate: Spatial relationship ('inte..."
            },
            {
              "line_number": 268,
              "length": 86,
              "content": "                f\"Invalid spatial predicate '{pred..."
            }
          ],
          "issues": [
            "Found 5 lines exceeding 80 characters",
            "  Line 65: 96 chars",
            "  Line 109: 98 chars",
            "  Line 154: 94 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 5
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 36.09154929577465,
          "comment_lines": 205,
          "code_lines": 363,
          "issues": [],
          "recommendations": [],
          "metric": 36.09154929577465
        },
        "module_size": {
          "compliant": false,
          "module_size": 675,
          "issues": [
            "Module size 675 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 675
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 9,
          "functions_with_docstrings": 9,
          "classes": 1,
          "classes_with_docstrings": 1,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 73.68421052631578,
      "issues": [
        "Found 5 lines exceeding 80 characters",
        "  Line 65: 96 chars",
        "  Line 109: 98 chars",
        "  Line 154: 94 chars",
        "Module size 675 lines exceeds maximum 300 lines"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files"
      ],
      "priority": "low"
    },
    {
      "path": "core/configuration_manager.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/configuration_manager.py",
      "total_lines": 90,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 18.91891891891892,
          "comment_lines": 14,
          "code_lines": 60,
          "issues": [],
          "recommendations": [],
          "metric": 18.91891891891892
        },
        "module_size": {
          "compliant": true,
          "module_size": 90,
          "issues": [],
          "recommendations": [],
          "metric": 90
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 87.5,
          "functions": 7,
          "functions_with_docstrings": 6,
          "classes": 1,
          "classes_with_docstrings": 1,
          "issues": [],
          "recommendations": [],
          "metric": 87.5
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 100.0,
      "issues": [],
      "recommendations": [],
      "priority": "low"
    },
    {
      "path": "core/cyberwarfare/__init__.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/cyberwarfare/__init__.py",
      "total_lines": 62,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 21,
              "length": 83,
              "content": "This package provides offensive security tool inte..."
            }
          ],
          "issues": [
            "Found 1 lines exceeding 80 characters",
            "  Line 21: 83 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 1
        },
        "comment_density": {
          "compliant": false,
          "comment_density": 3.6363636363636362,
          "comment_lines": 2,
          "code_lines": 53,
          "issues": [
            "Comment density 3.6% below minimum 15.0%",
            "  Comment lines: 2, Code lines: 53"
          ],
          "recommendations": [
            "Add more comments to explain complex logic and functions"
          ],
          "metric": 3.6363636363636362
        },
        "module_size": {
          "compliant": true,
          "module_size": 62,
          "issues": [],
          "recommendations": [],
          "metric": 62
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100,
          "functions": 0,
          "functions_with_docstrings": 0,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 77.93726741095162,
      "issues": [
        "Found 1 lines exceeding 80 characters",
        "  Line 21: 83 chars",
        "Comment density 3.6% below minimum 15.0%",
        "  Comment lines: 2, Code lines: 53"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Add more comments to explain complex logic and functions"
      ],
      "priority": "low"
    },
    {
      "path": "core/cyberwarfare/assessment_reporting.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/cyberwarfare/assessment_reporting.py",
      "total_lines": 364,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 301,
              "length": 123,
              "content": "        {\"\".join([f\"<li><b>{f['title']}</b> ({f['s..."
            }
          ],
          "issues": [
            "Found 1 lines exceeding 80 characters",
            "  Line 301: 123 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 1
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 29.841269841269842,
          "comment_lines": 94,
          "code_lines": 221,
          "issues": [],
          "recommendations": [],
          "metric": 29.841269841269842
        },
        "module_size": {
          "compliant": false,
          "module_size": 364,
          "issues": [
            "Module size 364 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 364
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 7,
          "functions_with_docstrings": 7,
          "classes": 1,
          "classes_with_docstrings": 1,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 73.68421052631578,
      "issues": [
        "Found 1 lines exceeding 80 characters",
        "  Line 301: 123 chars",
        "Module size 364 lines exceeds maximum 300 lines"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files"
      ],
      "priority": "low"
    },
    {
      "path": "core/cyberwarfare/kali_integrator.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/cyberwarfare/kali_integrator.py",
      "total_lines": 1058,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 50.66225165562914,
          "comment_lines": 459,
          "code_lines": 447,
          "issues": [],
          "recommendations": [],
          "metric": 50.66225165562914
        },
        "module_size": {
          "compliant": false,
          "module_size": 1058,
          "issues": [
            "Module size 1058 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 1058
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 18,
          "functions_with_docstrings": 18,
          "classes": 3,
          "classes_with_docstrings": 3,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 82.45614035087719,
      "issues": [
        "Module size 1058 lines exceeds maximum 300 lines"
      ],
      "recommendations": [
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files"
      ],
      "priority": "low"
    },
    {
      "path": "core/cyberwarfare/results_parser.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/cyberwarfare/results_parser.py",
      "total_lines": 486,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 31.82957393483709,
          "comment_lines": 127,
          "code_lines": 272,
          "issues": [],
          "recommendations": [],
          "metric": 31.82957393483709
        },
        "module_size": {
          "compliant": false,
          "module_size": 486,
          "issues": [
            "Module size 486 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 486
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 6,
          "functions_with_docstrings": 6,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 82.45614035087719,
      "issues": [
        "Module size 486 lines exceeds maximum 300 lines"
      ],
      "recommendations": [
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files"
      ],
      "priority": "low"
    },
    {
      "path": "core/cyberwarfare/tool_manager.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/cyberwarfare/tool_manager.py",
      "total_lines": 1082,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 934,
              "length": 83,
              "content": "            tool_name: Optional tool to execute wi..."
            }
          ],
          "issues": [
            "Found 1 lines exceeding 80 characters",
            "  Line 934: 83 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 1
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 52.55712731229597,
          "comment_lines": 483,
          "code_lines": 436,
          "issues": [],
          "recommendations": [],
          "metric": 52.55712731229597
        },
        "module_size": {
          "compliant": false,
          "module_size": 1082,
          "issues": [
            "Module size 1082 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 1082
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 21,
          "functions_with_docstrings": 21,
          "classes": 3,
          "classes_with_docstrings": 3,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 73.68421052631578,
      "issues": [
        "Found 1 lines exceeding 80 characters",
        "  Line 934: 83 chars",
        "Module size 1082 lines exceeds maximum 300 lines"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files"
      ],
      "priority": "low"
    },
    {
      "path": "core/cyberwarfare/tool_scraper.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/cyberwarfare/tool_scraper.py",
      "total_lines": 985,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 812,
              "length": 97,
              "content": "                    f\"Scraping details for tool {t..."
            },
            {
              "line_number": 854,
              "length": 87,
              "content": "                    f\"Error scraping tool {tool_in..."
            }
          ],
          "issues": [
            "Found 2 lines exceeding 80 characters",
            "  Line 812: 97 chars",
            "  Line 854: 87 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 2
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 53.62663495838288,
          "comment_lines": 451,
          "code_lines": 390,
          "issues": [],
          "recommendations": [],
          "metric": 53.62663495838288
        },
        "module_size": {
          "compliant": false,
          "module_size": 985,
          "issues": [
            "Module size 985 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 985
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 8,
          "functions_with_docstrings": 8,
          "classes": 3,
          "classes_with_docstrings": 3,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 73.68421052631578,
      "issues": [
        "Found 2 lines exceeding 80 characters",
        "  Line 812: 97 chars",
        "  Line 854: 87 chars",
        "Module size 985 lines exceeds maximum 300 lines"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files"
      ],
      "priority": "low"
    },
    {
      "path": "core/darkweb_analyzer/darkweb_intelligence.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/darkweb_analyzer/darkweb_intelligence.py",
      "total_lines": 1264,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 123,
              "length": 82,
              "content": "            proxy_url: Proxy URL for TOR access (e..."
            },
            {
              "line_number": 295,
              "length": 81,
              "content": "                FOREIGN KEY (target_id) REFERENCES..."
            },
            {
              "line_number": 360,
              "length": 90,
              "content": "            DarkwebContent object containing extra..."
            },
            {
              "line_number": 401,
              "length": 99,
              "content": "                \"User-Agent\": \"Mozilla/5.0 (Window..."
            },
            {
              "line_number": 437,
              "length": 85,
              "content": "            # This is a simplified approach - in p..."
            },
            {
              "line_number": 683,
              "length": 103,
              "content": "            (content_id, url, title, extraction_da..."
            },
            {
              "line_number": 729,
              "length": 129,
              "content": "            (target_id, name, created_date, is_act..."
            },
            {
              "line_number": 805,
              "length": 82,
              "content": "                    \"SELECT keyword FROM monitorin..."
            },
            {
              "line_number": 1149,
              "length": 88,
              "content": "            # This is a simplified search - in pro..."
            }
          ],
          "issues": [
            "Found 9 lines exceeding 80 characters",
            "  Line 123: 82 chars",
            "  Line 295: 81 chars",
            "  Line 360: 90 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 9
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 21.339712918660286,
          "comment_lines": 223,
          "code_lines": 822,
          "issues": [],
          "recommendations": [],
          "metric": 21.339712918660286
        },
        "module_size": {
          "compliant": false,
          "module_size": 1264,
          "issues": [
            "Module size 1264 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 1264
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 18,
          "functions_with_docstrings": 18,
          "classes": 3,
          "classes_with_docstrings": 3,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": false,
          "complexity_issues": [
            "Function 'extract_content' has high complexity (13 decision points)"
          ],
          "issues": [
            "Function 'extract_content' has high complexity (13 decision points)"
          ],
          "recommendations": [
            "Break complex functions into smaller, focused functions",
            "Extract complex logic into separate methods or classes"
          ],
          "metric": 1
        }
      },
      "overall_compliant": false,
      "compliance_score": 65.78947368421052,
      "issues": [
        "Found 9 lines exceeding 80 characters",
        "  Line 123: 82 chars",
        "  Line 295: 81 chars",
        "  Line 360: 90 chars",
        "Module size 1264 lines exceeds maximum 300 lines",
        "Function 'extract_content' has high complexity (13 decision points)"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files",
        "Break complex functions into smaller, focused functions",
        "Extract complex logic into separate methods or classes"
      ],
      "priority": "low"
    },
    {
      "path": "core/database/__init__.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/database/__init__.py",
      "total_lines": 28,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": false,
          "comment_density": 8.0,
          "comment_lines": 2,
          "code_lines": 23,
          "issues": [
            "Comment density 8.0% below minimum 15.0%",
            "  Comment lines: 2, Code lines: 23"
          ],
          "recommendations": [
            "Add more comments to explain complex logic and functions"
          ],
          "metric": 8.0
        },
        "module_size": {
          "compliant": true,
          "module_size": 28,
          "issues": [],
          "recommendations": [],
          "metric": 28
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100,
          "functions": 0,
          "functions_with_docstrings": 0,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 91.81286549707603,
      "issues": [
        "Comment density 8.0% below minimum 15.0%",
        "  Comment lines: 2, Code lines: 23"
      ],
      "recommendations": [
        "Add more comments to explain complex logic and functions"
      ],
      "priority": "low"
    },
    {
      "path": "core/database/config.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/database/config.py",
      "total_lines": 247,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 213,
              "length": 85,
              "content": "            ValueError: If configuration for the s..."
            }
          ],
          "issues": [
            "Found 1 lines exceeding 80 characters",
            "  Line 213: 85 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 1
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 38.07106598984771,
          "comment_lines": 75,
          "code_lines": 122,
          "issues": [],
          "recommendations": [],
          "metric": 38.07106598984771
        },
        "module_size": {
          "compliant": true,
          "module_size": 247,
          "issues": [],
          "recommendations": [],
          "metric": 247
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 8,
          "functions_with_docstrings": 8,
          "classes": 5,
          "classes_with_docstrings": 5,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 91.22807017543859,
      "issues": [
        "Found 1 lines exceeding 80 characters",
        "  Line 213: 85 chars"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation"
      ],
      "priority": "low"
    },
    {
      "path": "core/database/factory.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/database/factory.py",
      "total_lines": 165,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 32.83582089552239,
          "comment_lines": 44,
          "code_lines": 90,
          "issues": [],
          "recommendations": [],
          "metric": 32.83582089552239
        },
        "module_size": {
          "compliant": true,
          "module_size": 165,
          "issues": [],
          "recommendations": [],
          "metric": 165
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 6,
          "functions_with_docstrings": 6,
          "classes": 1,
          "classes_with_docstrings": 1,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 100.0,
      "issues": [],
      "recommendations": [],
      "priority": "low"
    },
    {
      "path": "core/database/mongodb/__init__.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/database/mongodb/__init__.py",
      "total_lines": 25,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": false,
          "comment_density": 9.090909090909092,
          "comment_lines": 2,
          "code_lines": 20,
          "issues": [
            "Comment density 9.1% below minimum 15.0%",
            "  Comment lines: 2, Code lines: 20"
          ],
          "recommendations": [
            "Add more comments to explain complex logic and functions"
          ],
          "metric": 9.090909090909092
        },
        "module_size": {
          "compliant": true,
          "module_size": 25,
          "issues": [],
          "recommendations": [],
          "metric": 25
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100,
          "functions": 0,
          "functions_with_docstrings": 0,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 93.08878256246678,
      "issues": [
        "Comment density 9.1% below minimum 15.0%",
        "  Comment lines: 2, Code lines: 20"
      ],
      "recommendations": [
        "Add more comments to explain complex logic and functions"
      ],
      "priority": "low"
    },
    {
      "path": "core/database/mongodb/connector.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/database/mongodb/connector.py",
      "total_lines": 528,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 169,
              "length": 87,
              "content": "                f\"Inserted document in {collection..."
            },
            {
              "line_number": 339,
              "length": 81,
              "content": "                f\"Updated {result.modified_count} ..."
            },
            {
              "line_number": 366,
              "length": 81,
              "content": "                f\"Deleted {result.deleted_count} d..."
            },
            {
              "line_number": 393,
              "length": 82,
              "content": "                f\"Deleted {result.deleted_count} d..."
            },
            {
              "line_number": 465,
              "length": 85,
              "content": "            keys: Index keys (either a string or a..."
            }
          ],
          "issues": [
            "Found 5 lines exceeding 80 characters",
            "  Line 169: 87 chars",
            "  Line 339: 81 chars",
            "  Line 366: 81 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 5
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 25.407925407925408,
          "comment_lines": 109,
          "code_lines": 320,
          "issues": [],
          "recommendations": [],
          "metric": 25.407925407925408
        },
        "module_size": {
          "compliant": false,
          "module_size": 528,
          "issues": [
            "Module size 528 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 528
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 18,
          "functions_with_docstrings": 18,
          "classes": 2,
          "classes_with_docstrings": 2,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 73.68421052631578,
      "issues": [
        "Found 5 lines exceeding 80 characters",
        "  Line 169: 87 chars",
        "  Line 339: 81 chars",
        "  Line 366: 81 chars",
        "Module size 528 lines exceeds maximum 300 lines"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files"
      ],
      "priority": "low"
    },
    {
      "path": "core/database/neo4j/__init__.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/database/neo4j/__init__.py",
      "total_lines": 25,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": false,
          "comment_density": 9.090909090909092,
          "comment_lines": 2,
          "code_lines": 20,
          "issues": [
            "Comment density 9.1% below minimum 15.0%",
            "  Comment lines: 2, Code lines: 20"
          ],
          "recommendations": [
            "Add more comments to explain complex logic and functions"
          ],
          "metric": 9.090909090909092
        },
        "module_size": {
          "compliant": true,
          "module_size": 25,
          "issues": [],
          "recommendations": [],
          "metric": 25
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100,
          "functions": 0,
          "functions_with_docstrings": 0,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 93.08878256246678,
      "issues": [
        "Comment density 9.1% below minimum 15.0%",
        "  Comment lines: 2, Code lines: 20"
      ],
      "recommendations": [
        "Add more comments to explain complex logic and functions"
      ],
      "priority": "low"
    },
    {
      "path": "core/database/neo4j/connector.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/database/neo4j/connector.py",
      "total_lines": 405,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 386,
              "length": 98,
              "content": "        # Example implementation, needs to be cust..."
            }
          ],
          "issues": [
            "Found 1 lines exceeding 80 characters",
            "  Line 386: 98 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 1
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 27.794561933534744,
          "comment_lines": 92,
          "code_lines": 239,
          "issues": [],
          "recommendations": [],
          "metric": 27.794561933534744
        },
        "module_size": {
          "compliant": false,
          "module_size": 405,
          "issues": [
            "Module size 405 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 405
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 12,
          "functions_with_docstrings": 12,
          "classes": 1,
          "classes_with_docstrings": 1,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 73.68421052631578,
      "issues": [
        "Found 1 lines exceeding 80 characters",
        "  Line 386: 98 chars",
        "Module size 405 lines exceeds maximum 300 lines"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files"
      ],
      "priority": "low"
    },
    {
      "path": "core/database/streamlit_safe_factory.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/database/streamlit_safe_factory.py",
      "total_lines": 114,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 81,
              "length": 85,
              "content": "                logger.info(f\"Creating {db_type} c..."
            },
            {
              "line_number": 83,
              "length": 97,
              "content": "                return {\"type\": db_type, \"thread\":..."
            },
            {
              "line_number": 86,
              "length": 114,
              "content": "                    logger.warning(f\"Connection at..."
            },
            {
              "line_number": 96,
              "length": 95,
              "content": "            return connection is not None and time..."
            },
            {
              "line_number": 103,
              "length": 93,
              "content": "        keys_to_remove = [k for k in self._connect..."
            }
          ],
          "issues": [
            "Found 5 lines exceeding 80 characters",
            "  Line 81: 85 chars",
            "  Line 83: 97 chars",
            "  Line 86: 114 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 5
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 18.75,
          "comment_lines": 18,
          "code_lines": 78,
          "issues": [],
          "recommendations": [],
          "metric": 18.75
        },
        "module_size": {
          "compliant": true,
          "module_size": 114,
          "issues": [],
          "recommendations": [],
          "metric": 114
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 83.33333333333334,
          "functions": 5,
          "functions_with_docstrings": 4,
          "classes": 1,
          "classes_with_docstrings": 1,
          "issues": [],
          "recommendations": [],
          "metric": 83.33333333333334
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 91.22807017543859,
      "issues": [
        "Found 5 lines exceeding 80 characters",
        "  Line 81: 85 chars",
        "  Line 83: 97 chars",
        "  Line 86: 114 chars"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation"
      ],
      "priority": "low"
    },
    {
      "path": "core/database/supabase/__init__.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/database/supabase/__init__.py",
      "total_lines": 25,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": false,
          "comment_density": 9.090909090909092,
          "comment_lines": 2,
          "code_lines": 20,
          "issues": [
            "Comment density 9.1% below minimum 15.0%",
            "  Comment lines: 2, Code lines: 20"
          ],
          "recommendations": [
            "Add more comments to explain complex logic and functions"
          ],
          "metric": 9.090909090909092
        },
        "module_size": {
          "compliant": true,
          "module_size": 25,
          "issues": [],
          "recommendations": [],
          "metric": 25
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100,
          "functions": 0,
          "functions_with_docstrings": 0,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 93.08878256246678,
      "issues": [
        "Comment density 9.1% below minimum 15.0%",
        "  Comment lines: 2, Code lines: 20"
      ],
      "recommendations": [
        "Add more comments to explain complex logic and functions"
      ],
      "priority": "low"
    },
    {
      "path": "core/database/supabase/connector.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/database/supabase/connector.py",
      "total_lines": 362,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 25.675675675675674,
          "comment_lines": 76,
          "code_lines": 220,
          "issues": [],
          "recommendations": [],
          "metric": 25.675675675675674
        },
        "module_size": {
          "compliant": false,
          "module_size": 362,
          "issues": [
            "Module size 362 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 362
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 11,
          "functions_with_docstrings": 11,
          "classes": 1,
          "classes_with_docstrings": 1,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 82.45614035087719,
      "issues": [
        "Module size 362 lines exceeds maximum 300 lines"
      ],
      "recommendations": [
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files"
      ],
      "priority": "low"
    },
    {
      "path": "core/database/supabase/thread_safe_connector.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/database/supabase/thread_safe_connector.py",
      "total_lines": 403,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 77,
              "length": 86,
              "content": "        logger.info(\"Thread-safe Supabase connecto..."
            },
            {
              "line_number": 97,
              "length": 82,
              "content": "                        pool_recycle=1800,  # Recy..."
            },
            {
              "line_number": 110,
              "length": 88,
              "content": "                    logger.info(\"Connected to Supa..."
            }
          ],
          "issues": [
            "Found 3 lines exceeding 80 characters",
            "  Line 77: 86 chars",
            "  Line 97: 82 chars",
            "  Line 110: 88 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 3
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 25.225225225225223,
          "comment_lines": 84,
          "code_lines": 249,
          "issues": [],
          "recommendations": [],
          "metric": 25.225225225225223
        },
        "module_size": {
          "compliant": false,
          "module_size": 403,
          "issues": [
            "Module size 403 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 403
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 12,
          "functions_with_docstrings": 12,
          "classes": 1,
          "classes_with_docstrings": 1,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 73.68421052631578,
      "issues": [
        "Found 3 lines exceeding 80 characters",
        "  Line 77: 86 chars",
        "  Line 97: 82 chars",
        "  Line 110: 88 chars",
        "Module size 403 lines exceeds maximum 300 lines"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files"
      ],
      "priority": "low"
    },
    {
      "path": "core/database/thread_safe_factory.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/database/thread_safe_factory.py",
      "total_lines": 196,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 30,
              "length": 84,
              "content": "from core.database.supabase.thread_safe_connector ..."
            },
            {
              "line_number": 55,
              "length": 98,
              "content": "    def get_instance(cls, config: Optional[Databas..."
            },
            {
              "line_number": 109,
              "length": 83,
              "content": "            if db_type in self.connectors and self..."
            },
            {
              "line_number": 152,
              "length": 98,
              "content": "    def get_neo4j(self) -> Any:  # Will be updated..."
            },
            {
              "line_number": 165,
              "length": 102,
              "content": "    def get_mongodb(self) -> Any:  # Will be updat..."
            },
            {
              "line_number": 193,
              "length": 83,
              "content": "                        logger.error(f\"Error closi..."
            }
          ],
          "issues": [
            "Found 6 lines exceeding 80 characters",
            "  Line 30: 84 chars",
            "  Line 55: 98 chars",
            "  Line 109: 83 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 6
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 33.33333333333333,
          "comment_lines": 53,
          "code_lines": 106,
          "issues": [],
          "recommendations": [],
          "metric": 33.33333333333333
        },
        "module_size": {
          "compliant": true,
          "module_size": 196,
          "issues": [],
          "recommendations": [],
          "metric": 196
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 7,
          "functions_with_docstrings": 7,
          "classes": 1,
          "classes_with_docstrings": 1,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 91.22807017543859,
      "issues": [
        "Found 6 lines exceeding 80 characters",
        "  Line 30: 84 chars",
        "  Line 55: 98 chars",
        "  Line 109: 83 chars"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation"
      ],
      "priority": "low"
    },
    {
      "path": "core/database/utils.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/database/utils.py",
      "total_lines": 416,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 22.76657060518732,
          "comment_lines": 79,
          "code_lines": 268,
          "issues": [],
          "recommendations": [],
          "metric": 22.76657060518732
        },
        "module_size": {
          "compliant": false,
          "module_size": 416,
          "issues": [
            "Module size 416 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 416
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 9,
          "functions_with_docstrings": 9,
          "classes": 1,
          "classes_with_docstrings": 1,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 82.45614035087719,
      "issues": [
        "Module size 416 lines exceeds maximum 300 lines"
      ],
      "recommendations": [
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files"
      ],
      "priority": "low"
    },
    {
      "path": "core/drone/__init__.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/drone/__init__.py",
      "total_lines": 1,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 100.0,
          "comment_lines": 1,
          "code_lines": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "module_size": {
          "compliant": true,
          "module_size": 1,
          "issues": [],
          "recommendations": [],
          "metric": 1
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100,
          "functions": 0,
          "functions_with_docstrings": 0,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 100.0,
      "issues": [],
      "recommendations": [],
      "priority": "low"
    },
    {
      "path": "core/drone/flight_profiles.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/drone/flight_profiles.py",
      "total_lines": 293,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 16.532258064516128,
          "comment_lines": 41,
          "code_lines": 207,
          "issues": [],
          "recommendations": [],
          "metric": 16.532258064516128
        },
        "module_size": {
          "compliant": true,
          "module_size": 293,
          "issues": [],
          "recommendations": [],
          "metric": 293
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 90.9090909090909,
          "functions": 9,
          "functions_with_docstrings": 8,
          "classes": 2,
          "classes_with_docstrings": 2,
          "issues": [],
          "recommendations": [],
          "metric": 90.9090909090909
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 100.0,
      "issues": [],
      "recommendations": [],
      "priority": "low"
    },
    {
      "path": "core/drone/simulation.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/drone/simulation.py",
      "total_lines": 1256,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 616,
              "length": 83,
              "content": "            leader_id: ID of the leader drone (opt..."
            },
            {
              "line_number": 1222,
              "length": 86,
              "content": "                            \"message\": f\"{sensor} ..."
            }
          ],
          "issues": [
            "Found 2 lines exceeding 80 characters",
            "  Line 616: 83 chars",
            "  Line 1222: 86 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 2
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 15.974145891043397,
          "comment_lines": 173,
          "code_lines": 910,
          "issues": [],
          "recommendations": [],
          "metric": 15.974145891043397
        },
        "module_size": {
          "compliant": false,
          "module_size": 1256,
          "issues": [
            "Module size 1256 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 1256
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 14,
          "functions_with_docstrings": 14,
          "classes": 1,
          "classes_with_docstrings": 1,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": false,
          "complexity_issues": [
            "Function 'assign_squadron_formation' has high complexity (11 decision points)"
          ],
          "issues": [
            "Function 'assign_squadron_formation' has high complexity (11 decision points)"
          ],
          "recommendations": [
            "Break complex functions into smaller, focused functions",
            "Extract complex logic into separate methods or classes"
          ],
          "metric": 1
        }
      },
      "overall_compliant": false,
      "compliance_score": 65.78947368421052,
      "issues": [
        "Found 2 lines exceeding 80 characters",
        "  Line 616: 83 chars",
        "  Line 1222: 86 chars",
        "Module size 1256 lines exceeds maximum 300 lines",
        "Function 'assign_squadron_formation' has high complexity (11 decision points)"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files",
        "Break complex functions into smaller, focused functions",
        "Extract complex logic into separate methods or classes"
      ],
      "priority": "low"
    },
    {
      "path": "core/geospatial/__init__.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/geospatial/__init__.py",
      "total_lines": 72,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": false,
          "comment_density": 4.615384615384616,
          "comment_lines": 3,
          "code_lines": 62,
          "issues": [
            "Comment density 4.6% below minimum 15.0%",
            "  Comment lines: 3, Code lines: 62"
          ],
          "recommendations": [
            "Add more comments to explain complex logic and functions"
          ],
          "metric": 4.615384615384616
        },
        "module_size": {
          "compliant": true,
          "module_size": 72,
          "issues": [],
          "recommendations": [],
          "metric": 72
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100,
          "functions": 0,
          "functions_with_docstrings": 0,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 87.85425101214575,
      "issues": [
        "Comment density 4.6% below minimum 15.0%",
        "  Comment lines: 3, Code lines: 62"
      ],
      "recommendations": [
        "Add more comments to explain complex logic and functions"
      ],
      "priority": "low"
    },
    {
      "path": "core/geospatial/base_maps.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/geospatial/base_maps.py",
      "total_lines": 395,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 42.65129682997118,
          "comment_lines": 148,
          "code_lines": 199,
          "issues": [],
          "recommendations": [],
          "metric": 42.65129682997118
        },
        "module_size": {
          "compliant": false,
          "module_size": 395,
          "issues": [
            "Module size 395 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 395
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 4,
          "functions_with_docstrings": 4,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 82.45614035087719,
      "issues": [
        "Module size 395 lines exceeds maximum 300 lines"
      ],
      "recommendations": [
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files"
      ],
      "priority": "low"
    },
    {
      "path": "core/geospatial/data_preparation.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/geospatial/data_preparation.py",
      "total_lines": 240,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 56.310679611650485,
          "comment_lines": 116,
          "code_lines": 90,
          "issues": [],
          "recommendations": [],
          "metric": 56.310679611650485
        },
        "module_size": {
          "compliant": true,
          "module_size": 240,
          "issues": [],
          "recommendations": [],
          "metric": 240
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 3,
          "functions_with_docstrings": 3,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 100.0,
      "issues": [],
      "recommendations": [],
      "priority": "low"
    },
    {
      "path": "core/geospatial/plugin_manager.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/geospatial/plugin_manager.py",
      "total_lines": 292,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 61,
              "length": 90,
              "content": "                        from core.integrations.sat..."
            },
            {
              "line_number": 147,
              "length": 83,
              "content": "            \"Plugin infrastructure not available. ..."
            },
            {
              "line_number": 235,
              "length": 83,
              "content": "            f\"Successfully initialized plugin syst..."
            }
          ],
          "issues": [
            "Found 3 lines exceeding 80 characters",
            "  Line 61: 90 chars",
            "  Line 147: 83 chars",
            "  Line 235: 83 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 3
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 38.800000000000004,
          "comment_lines": 97,
          "code_lines": 153,
          "issues": [],
          "recommendations": [],
          "metric": 38.800000000000004
        },
        "module_size": {
          "compliant": true,
          "module_size": 292,
          "issues": [],
          "recommendations": [],
          "metric": 292
        },
        "docstrings": {
          "compliant": false,
          "docstring_coverage": 25.0,
          "functions": 6,
          "functions_with_docstrings": 2,
          "classes": 2,
          "classes_with_docstrings": 0,
          "issues": [
            "Docstring coverage 25.0% below minimum 80.0%",
            "  Functions: 2/6 with docstrings",
            "  Classes: 0/2 with docstrings"
          ],
          "recommendations": [
            "Add docstrings to all functions and classes",
            "Use clear, descriptive docstrings following Google or NumPy style"
          ],
          "metric": 25.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 79.16666666666666,
      "issues": [
        "Found 3 lines exceeding 80 characters",
        "  Line 61: 90 chars",
        "  Line 147: 83 chars",
        "  Line 235: 83 chars",
        "Docstring coverage 25.0% below minimum 80.0%",
        "  Functions: 2/6 with docstrings",
        "  Classes: 0/2 with docstrings"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Add docstrings to all functions and classes",
        "Use clear, descriptive docstrings following Google or NumPy style"
      ],
      "priority": "low"
    },
    {
      "path": "core/geospatial/reporting.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/geospatial/reporting.py",
      "total_lines": 651,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 507,
              "length": 93,
              "content": "    href = f'<a href=\"data:file/json;base64,{b64}\"..."
            }
          ],
          "issues": [
            "Found 1 lines exceeding 80 characters",
            "  Line 507: 93 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 1
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 48.409893992932865,
          "comment_lines": 274,
          "code_lines": 292,
          "issues": [],
          "recommendations": [],
          "metric": 48.409893992932865
        },
        "module_size": {
          "compliant": false,
          "module_size": 651,
          "issues": [
            "Module size 651 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 651
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 7,
          "functions_with_docstrings": 7,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 73.68421052631578,
      "issues": [
        "Found 1 lines exceeding 80 characters",
        "  Line 507: 93 chars",
        "Module size 651 lines exceeds maximum 300 lines"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files"
      ],
      "priority": "low"
    },
    {
      "path": "core/geospatial/threat_analysis.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/geospatial/threat_analysis.py",
      "total_lines": 472,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 46.84466019417476,
          "comment_lines": 193,
          "code_lines": 219,
          "issues": [],
          "recommendations": [],
          "metric": 46.84466019417476
        },
        "module_size": {
          "compliant": false,
          "module_size": 472,
          "issues": [
            "Module size 472 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 472
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 3,
          "functions_with_docstrings": 3,
          "classes": 1,
          "classes_with_docstrings": 1,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 82.45614035087719,
      "issues": [
        "Module size 472 lines exceeds maximum 300 lines"
      ],
      "recommendations": [
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files"
      ],
      "priority": "low"
    },
    {
      "path": "core/geospatial/visualizers/__init__.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/geospatial/visualizers/__init__.py",
      "total_lines": 28,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": false,
          "comment_density": 7.6923076923076925,
          "comment_lines": 2,
          "code_lines": 24,
          "issues": [
            "Comment density 7.7% below minimum 15.0%",
            "  Comment lines: 2, Code lines: 24"
          ],
          "recommendations": [
            "Add more comments to explain complex logic and functions"
          ],
          "metric": 7.6923076923076925
        },
        "module_size": {
          "compliant": true,
          "module_size": 28,
          "issues": [],
          "recommendations": [],
          "metric": 28
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100,
          "functions": 0,
          "functions_with_docstrings": 0,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 91.45299145299145,
      "issues": [
        "Comment density 7.7% below minimum 15.0%",
        "  Comment lines: 2, Code lines: 24"
      ],
      "recommendations": [
        "Add more comments to explain complex logic and functions"
      ],
      "priority": "low"
    },
    {
      "path": "core/geospatial/visualizers/choropleths.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/geospatial/visualizers/choropleths.py",
      "total_lines": 416,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 81,
              "length": 90,
              "content": "            f\"Value field '{value_field}' not foun..."
            },
            {
              "line_number": 92,
              "length": 96,
              "content": "            f\"Location field '{location_field}' no..."
            },
            {
              "line_number": 219,
              "length": 103,
              "content": "            f\"Number of colors ({len(colors)}) mus..."
            },
            {
              "line_number": 318,
              "length": 88,
              "content": "    <div style=\"position: fixed; bottom: 50px; rig..."
            },
            {
              "line_number": 319,
              "length": 81,
              "content": "    background-color: white; border:2px solid grey..."
            },
            {
              "line_number": 336,
              "length": 108,
              "content": "            <div style=\"background-color: {colors[..."
            }
          ],
          "issues": [
            "Found 6 lines exceeding 80 characters",
            "  Line 81: 90 chars",
            "  Line 92: 96 chars",
            "  Line 219: 103 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 6
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 43.85026737967914,
          "comment_lines": 164,
          "code_lines": 210,
          "issues": [],
          "recommendations": [],
          "metric": 43.85026737967914
        },
        "module_size": {
          "compliant": false,
          "module_size": 416,
          "issues": [
            "Module size 416 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 416
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 3,
          "functions_with_docstrings": 3,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 73.68421052631578,
      "issues": [
        "Found 6 lines exceeding 80 characters",
        "  Line 81: 90 chars",
        "  Line 92: 96 chars",
        "  Line 219: 103 chars",
        "Module size 416 lines exceeds maximum 300 lines"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files"
      ],
      "priority": "low"
    },
    {
      "path": "core/geospatial/visualizers/heatmap.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/geospatial/visualizers/heatmap.py",
      "total_lines": 249,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 70,
              "length": 97,
              "content": "            f\"Data must contain both latitude and ..."
            }
          ],
          "issues": [
            "Found 1 lines exceeding 80 characters",
            "  Line 70: 97 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 1
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 39.726027397260275,
          "comment_lines": 87,
          "code_lines": 132,
          "issues": [],
          "recommendations": [],
          "metric": 39.726027397260275
        },
        "module_size": {
          "compliant": true,
          "module_size": 249,
          "issues": [],
          "recommendations": [],
          "metric": 249
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 3,
          "functions_with_docstrings": 3,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 91.22807017543859,
      "issues": [
        "Found 1 lines exceeding 80 characters",
        "  Line 70: 97 chars"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation"
      ],
      "priority": "low"
    },
    {
      "path": "core/geospatial/visualizers/markers.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/geospatial/visualizers/markers.py",
      "total_lines": 310,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 70,
              "length": 97,
              "content": "            f\"Data must contain both latitude and ..."
            },
            {
              "line_number": 190,
              "length": 97,
              "content": "            f\"Data must contain both latitude and ..."
            }
          ],
          "issues": [
            "Found 2 lines exceeding 80 characters",
            "  Line 70: 97 chars",
            "  Line 190: 97 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 2
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 47.985347985347985,
          "comment_lines": 131,
          "code_lines": 142,
          "issues": [],
          "recommendations": [],
          "metric": 47.985347985347985
        },
        "module_size": {
          "compliant": false,
          "module_size": 310,
          "issues": [
            "Module size 310 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 310
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 3,
          "functions_with_docstrings": 3,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 87.71929824561403,
      "issues": [
        "Found 2 lines exceeding 80 characters",
        "  Line 70: 97 chars",
        "  Line 190: 97 chars",
        "Module size 310 lines exceeds maximum 300 lines"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files"
      ],
      "priority": "low"
    },
    {
      "path": "core/geospatial/visualizers/networks.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/geospatial/visualizers/networks.py",
      "total_lines": 345,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 43.35443037974683,
          "comment_lines": 137,
          "code_lines": 179,
          "issues": [],
          "recommendations": [],
          "metric": 43.35443037974683
        },
        "module_size": {
          "compliant": false,
          "module_size": 345,
          "issues": [
            "Module size 345 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 345
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 1,
          "functions_with_docstrings": 1,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": false,
          "complexity_issues": [
            "Function 'create_network_graph' has high complexity (19 decision points)"
          ],
          "issues": [
            "Function 'create_network_graph' has high complexity (19 decision points)"
          ],
          "recommendations": [
            "Break complex functions into smaller, focused functions",
            "Extract complex logic into separate methods or classes"
          ],
          "metric": 1
        }
      },
      "overall_compliant": false,
      "compliance_score": 76.3157894736842,
      "issues": [
        "Module size 345 lines exceeds maximum 300 lines",
        "Function 'create_network_graph' has high complexity (19 decision points)"
      ],
      "recommendations": [
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files",
        "Break complex functions into smaller, focused functions",
        "Extract complex logic into separate methods or classes"
      ],
      "priority": "low"
    },
    {
      "path": "core/gnn/gnn_model.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/gnn/gnn_model.py",
      "total_lines": 657,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 16.574585635359114,
          "comment_lines": 90,
          "code_lines": 453,
          "issues": [],
          "recommendations": [],
          "metric": 16.574585635359114
        },
        "module_size": {
          "compliant": false,
          "module_size": 657,
          "issues": [
            "Module size 657 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 657
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 23,
          "functions_with_docstrings": 23,
          "classes": 3,
          "classes_with_docstrings": 3,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": false,
          "complexity_issues": [
            "Function '_extract_task_features' has high complexity (11 decision points)"
          ],
          "issues": [
            "Function '_extract_task_features' has high complexity (11 decision points)"
          ],
          "recommendations": [
            "Break complex functions into smaller, focused functions",
            "Extract complex logic into separate methods or classes"
          ],
          "metric": 1
        }
      },
      "overall_compliant": false,
      "compliance_score": 74.56140350877193,
      "issues": [
        "Module size 657 lines exceeds maximum 300 lines",
        "Function '_extract_task_features' has high complexity (11 decision points)"
      ],
      "recommendations": [
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files",
        "Break complex functions into smaller, focused functions",
        "Extract complex logic into separate methods or classes"
      ],
      "priority": "low"
    },
    {
      "path": "core/integrations/graph_db/neo4j_connector.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/integrations/graph_db/neo4j_connector.py",
      "total_lines": 1423,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 165,
              "length": 86,
              "content": "            f\"Neo4j connector initialized for {sel..."
            },
            {
              "line_number": 229,
              "length": 101,
              "content": "                    f\"Failed to connect to Neo4j (..."
            },
            {
              "line_number": 241,
              "length": 94,
              "content": "                    error_msg = f\"Failed to connec..."
            },
            {
              "line_number": 678,
              "length": 99,
              "content": "                          all(k IN keys(rel.start_..."
            },
            {
              "line_number": 680,
              "length": 95,
              "content": "                          all(k IN keys(rel.end_no..."
            },
            {
              "line_number": 994,
              "length": 97,
              "content": "        query = f\"CREATE CONSTRAINT ON (n:{label})..."
            },
            {
              "line_number": 1012,
              "length": 84,
              "content": "                f\"Created {constraint_type} constr..."
            },
            {
              "line_number": 1272,
              "length": 90,
              "content": "                description=\"Neo4j graph database ..."
            },
            {
              "line_number": 1414,
              "length": 81,
              "content": "                    \"create_relationships\": \"Creat..."
            },
            {
              "line_number": 1418,
              "length": 82,
              "content": "                    \"create_constraint\": \"Ensure d..."
            }
          ],
          "issues": [
            "Found 10 lines exceeding 80 characters",
            "  Line 165: 86 chars",
            "  Line 229: 101 chars",
            "  Line 241: 94 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 10
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 57.726180944755804,
          "comment_lines": 721,
          "code_lines": 528,
          "issues": [],
          "recommendations": [],
          "metric": 57.726180944755804
        },
        "module_size": {
          "compliant": false,
          "module_size": 1423,
          "issues": [
            "Module size 1423 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 1423
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 20,
          "functions_with_docstrings": 20,
          "classes": 3,
          "classes_with_docstrings": 3,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 73.68421052631578,
      "issues": [
        "Found 10 lines exceeding 80 characters",
        "  Line 165: 86 chars",
        "  Line 229: 101 chars",
        "  Line 241: 94 chars",
        "Module size 1423 lines exceeds maximum 300 lines"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files"
      ],
      "priority": "low"
    },
    {
      "path": "core/integrations/satellite/google_earth_integration.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/integrations/satellite/google_earth_integration.py",
      "total_lines": 1952,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 179,
              "length": 84,
              "content": "            f\"Google Earth manager initialized wit..."
            },
            {
              "line_number": 205,
              "length": 86,
              "content": "                    href=\"http://maps.google.com/m..."
            },
            {
              "line_number": 213,
              "length": 86,
              "content": "                    href=\"http://maps.google.com/m..."
            },
            {
              "line_number": 221,
              "length": 87,
              "content": "                    href=\"http://maps.google.com/m..."
            },
            {
              "line_number": 229,
              "length": 86,
              "content": "                    href=\"http://maps.google.com/m..."
            },
            {
              "line_number": 273,
              "length": 84,
              "content": "                        f\"Loaded custom styles fro..."
            },
            {
              "line_number": 725,
              "length": 84,
              "content": "            inner_boundaries: Optional list of coo..."
            },
            {
              "line_number": 837,
              "length": 105,
              "content": "        element: Any,  # Can be various KML elemen..."
            },
            {
              "line_number": 1604,
              "length": 100,
              "content": "            feature_types: Optional list of featur..."
            },
            {
              "line_number": 1816,
              "length": 93,
              "content": "                description=\"Google Earth KML/KMZ ..."
            },
            {
              "line_number": 1824,
              "length": 87,
              "content": "                documentation_url=\"https://nyxtrac..."
            }
          ],
          "issues": [
            "Found 11 lines exceeding 80 characters",
            "  Line 179: 84 chars",
            "  Line 205: 86 chars",
            "  Line 213: 86 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 11
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 57.044278320874064,
          "comment_lines": 992,
          "code_lines": 747,
          "issues": [],
          "recommendations": [],
          "metric": 57.044278320874064
        },
        "module_size": {
          "compliant": false,
          "module_size": 1952,
          "issues": [
            "Module size 1952 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 1952
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 20,
          "functions_with_docstrings": 20,
          "classes": 3,
          "classes_with_docstrings": 3,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": false,
          "complexity_issues": [
            "Function '_parse_kml_styles' has high complexity (13 decision points)"
          ],
          "issues": [
            "Function '_parse_kml_styles' has high complexity (13 decision points)"
          ],
          "recommendations": [
            "Break complex functions into smaller, focused functions",
            "Extract complex logic into separate methods or classes"
          ],
          "metric": 1
        }
      },
      "overall_compliant": false,
      "compliance_score": 65.78947368421052,
      "issues": [
        "Found 11 lines exceeding 80 characters",
        "  Line 179: 84 chars",
        "  Line 205: 86 chars",
        "  Line 213: 86 chars",
        "Module size 1952 lines exceeds maximum 300 lines",
        "Function '_parse_kml_styles' has high complexity (13 decision points)"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files",
        "Break complex functions into smaller, focused functions",
        "Extract complex logic into separate methods or classes"
      ],
      "priority": "low"
    },
    {
      "path": "core/interfaces/__init__.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/interfaces/__init__.py",
      "total_lines": 51,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 15.217391304347828,
          "comment_lines": 7,
          "code_lines": 39,
          "issues": [],
          "recommendations": [],
          "metric": 15.217391304347828
        },
        "module_size": {
          "compliant": true,
          "module_size": 51,
          "issues": [],
          "recommendations": [],
          "metric": 51
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100,
          "functions": 0,
          "functions_with_docstrings": 0,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 100.0,
      "issues": [],
      "recommendations": [],
      "priority": "low"
    },
    {
      "path": "core/interfaces/analyzers.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/interfaces/analyzers.py",
      "total_lines": 575,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 4,
              "length": 83,
              "content": "Defines the interfaces for intelligence analysis c..."
            },
            {
              "line_number": 5,
              "length": 92,
              "content": "These analyzers evaluate processed intelligence to..."
            },
            {
              "line_number": 157,
              "length": 84,
              "content": "            priority_threshold: Minimum priority t..."
            },
            {
              "line_number": 529,
              "length": 88,
              "content": "            time_horizon: Time horizon for predict..."
            }
          ],
          "issues": [
            "Found 4 lines exceeding 80 characters",
            "  Line 4: 83 chars",
            "  Line 5: 92 chars",
            "  Line 157: 84 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 4
        },
        "comment_density": {
          "compliant": false,
          "comment_density": 13.347022587268995,
          "comment_lines": 65,
          "code_lines": 422,
          "issues": [
            "Comment density 13.3% below minimum 15.0%",
            "  Comment lines: 65, Code lines: 422"
          ],
          "recommendations": [
            "Add more comments to explain complex logic and functions"
          ],
          "metric": 13.347022587268995
        },
        "module_size": {
          "compliant": false,
          "module_size": 575,
          "issues": [
            "Module size 575 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 575
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 9,
          "functions_with_docstrings": 9,
          "classes": 7,
          "classes_with_docstrings": 7,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 71.75090361084092,
      "issues": [
        "Found 4 lines exceeding 80 characters",
        "  Line 4: 83 chars",
        "  Line 5: 92 chars",
        "  Line 157: 84 chars",
        "Comment density 13.3% below minimum 15.0%",
        "  Comment lines: 65, Code lines: 422",
        "Module size 575 lines exceeds maximum 300 lines"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Add more comments to explain complex logic and functions",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files"
      ],
      "priority": "low"
    },
    {
      "path": "core/interfaces/base.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/interfaces/base.py",
      "total_lines": 321,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 21.686746987951807,
          "comment_lines": 54,
          "code_lines": 195,
          "issues": [],
          "recommendations": [],
          "metric": 21.686746987951807
        },
        "module_size": {
          "compliant": false,
          "module_size": 321,
          "issues": [
            "Module size 321 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 321
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 22,
          "functions_with_docstrings": 22,
          "classes": 6,
          "classes_with_docstrings": 6,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 92.63157894736842,
      "issues": [
        "Module size 321 lines exceeds maximum 300 lines"
      ],
      "recommendations": [
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files"
      ],
      "priority": "low"
    },
    {
      "path": "core/interfaces/collectors.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/interfaces/collectors.py",
      "total_lines": 131,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 18.446601941747574,
          "comment_lines": 19,
          "code_lines": 84,
          "issues": [],
          "recommendations": [],
          "metric": 18.446601941747574
        },
        "module_size": {
          "compliant": true,
          "module_size": 131,
          "issues": [],
          "recommendations": [],
          "metric": 131
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 7,
          "functions_with_docstrings": 7,
          "classes": 3,
          "classes_with_docstrings": 3,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 100.0,
      "issues": [],
      "recommendations": [],
      "priority": "low"
    },
    {
      "path": "core/interfaces/processors.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/interfaces/processors.py",
      "total_lines": 172,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 16.911764705882355,
          "comment_lines": 23,
          "code_lines": 113,
          "issues": [],
          "recommendations": [],
          "metric": 16.911764705882355
        },
        "module_size": {
          "compliant": true,
          "module_size": 172,
          "issues": [],
          "recommendations": [],
          "metric": 172
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 8,
          "functions_with_docstrings": 8,
          "classes": 3,
          "classes_with_docstrings": 3,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 100.0,
      "issues": [],
      "recommendations": [],
      "priority": "low"
    },
    {
      "path": "core/interfaces/visualizers.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/interfaces/visualizers.py",
      "total_lines": 70,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 22.641509433962266,
          "comment_lines": 12,
          "code_lines": 41,
          "issues": [],
          "recommendations": [],
          "metric": 22.641509433962266
        },
        "module_size": {
          "compliant": true,
          "module_size": 70,
          "issues": [],
          "recommendations": [],
          "metric": 70
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 3,
          "functions_with_docstrings": 3,
          "classes": 3,
          "classes_with_docstrings": 3,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 100.0,
      "issues": [],
      "recommendations": [],
      "priority": "low"
    },
    {
      "path": "core/mathematics/__init__.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/mathematics/__init__.py",
      "total_lines": 49,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 42.5,
          "comment_lines": 17,
          "code_lines": 23,
          "issues": [],
          "recommendations": [],
          "metric": 42.5
        },
        "module_size": {
          "compliant": true,
          "module_size": 49,
          "issues": [],
          "recommendations": [],
          "metric": 49
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100,
          "functions": 0,
          "functions_with_docstrings": 0,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 100.0,
      "issues": [],
      "recommendations": [],
      "priority": "low"
    },
    {
      "path": "core/mathematics/las_vegas/__init__.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/mathematics/las_vegas/__init__.py",
      "total_lines": 33,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": false,
          "comment_density": 6.666666666666667,
          "comment_lines": 2,
          "code_lines": 28,
          "issues": [
            "Comment density 6.7% below minimum 15.0%",
            "  Comment lines: 2, Code lines: 28"
          ],
          "recommendations": [
            "Add more comments to explain complex logic and functions"
          ],
          "metric": 6.666666666666667
        },
        "module_size": {
          "compliant": true,
          "module_size": 33,
          "issues": [],
          "recommendations": [],
          "metric": 33
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100,
          "functions": 0,
          "functions_with_docstrings": 0,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 90.25341130604288,
      "issues": [
        "Comment density 6.7% below minimum 15.0%",
        "  Comment lines: 2, Code lines: 28"
      ],
      "recommendations": [
        "Add more comments to explain complex logic and functions"
      ],
      "priority": "low"
    },
    {
      "path": "core/mathematics/las_vegas/algorithm.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/mathematics/las_vegas/algorithm.py",
      "total_lines": 605,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 146,
              "length": 83,
              "content": "            f\"Las Vegas algorithm initialized with..."
            },
            {
              "line_number": 190,
              "length": 91,
              "content": "                f\"Found solution in {iterations} i..."
            },
            {
              "line_number": 194,
              "length": 103,
              "content": "                f\"Failed to find solution after {i..."
            },
            {
              "line_number": 243,
              "length": 83,
              "content": "                    f\"Reached maximum time: {self...."
            },
            {
              "line_number": 281,
              "length": 93,
              "content": "                    f\"Search progress: {iterations..."
            },
            {
              "line_number": 387,
              "length": 87,
              "content": "                        f\"Reached maximum time: {s..."
            },
            {
              "line_number": 459,
              "length": 103,
              "content": "                        f\"Search progress: {total_..."
            },
            {
              "line_number": 460,
              "length": 83,
              "content": "                        f\"({total_iterations/self...."
            },
            {
              "line_number": 485,
              "length": 81,
              "content": "            initial_iterations: Initial number of ..."
            },
            {
              "line_number": 505,
              "length": 99,
              "content": "                f\"Restart {restart+1}/{max_restart..."
            },
            {
              "line_number": 534,
              "length": 104,
              "content": "                    f\"Solution found after {restar..."
            },
            {
              "line_number": 544,
              "length": 83,
              "content": "                    f\"Reached maximum time: {self...."
            }
          ],
          "issues": [
            "Found 12 lines exceeding 80 characters",
            "  Line 146: 83 chars",
            "  Line 190: 91 chars",
            "  Line 194: 103 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 12
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 21.14624505928854,
          "comment_lines": 107,
          "code_lines": 399,
          "issues": [],
          "recommendations": [],
          "metric": 21.14624505928854
        },
        "module_size": {
          "compliant": false,
          "module_size": 605,
          "issues": [
            "Module size 605 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 605
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 92.3076923076923,
          "functions": 10,
          "functions_with_docstrings": 9,
          "classes": 3,
          "classes_with_docstrings": 3,
          "issues": [],
          "recommendations": [],
          "metric": 92.3076923076923
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": false,
          "complexity_issues": [
            "Function '_run_parallel' has high complexity (17 decision points)"
          ],
          "issues": [
            "Function '_run_parallel' has high complexity (17 decision points)"
          ],
          "recommendations": [
            "Break complex functions into smaller, focused functions",
            "Extract complex logic into separate methods or classes"
          ],
          "metric": 1
        }
      },
      "overall_compliant": false,
      "compliance_score": 65.78947368421052,
      "issues": [
        "Found 12 lines exceeding 80 characters",
        "  Line 146: 83 chars",
        "  Line 190: 91 chars",
        "  Line 194: 103 chars",
        "Module size 605 lines exceeds maximum 300 lines",
        "Function '_run_parallel' has high complexity (17 decision points)"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files",
        "Break complex functions into smaller, focused functions",
        "Extract complex logic into separate methods or classes"
      ],
      "priority": "low"
    },
    {
      "path": "core/mathematics/las_vegas/framework.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/mathematics/las_vegas/framework.py",
      "total_lines": 551,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 244,
              "length": 82,
              "content": "            True if solution is valid according to..."
            },
            {
              "line_number": 271,
              "length": 82,
              "content": "            cycle_iterations: Number of iterations..."
            },
            {
              "line_number": 348,
              "length": 81,
              "content": "            success_memory: Number of recent succe..."
            },
            {
              "line_number": 426,
              "length": 82,
              "content": "                # Update success count for the str..."
            }
          ],
          "issues": [
            "Found 4 lines exceeding 80 characters",
            "  Line 244: 82 chars",
            "  Line 271: 82 chars",
            "  Line 348: 81 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 4
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 33.6322869955157,
          "comment_lines": 150,
          "code_lines": 296,
          "issues": [],
          "recommendations": [],
          "metric": 33.6322869955157
        },
        "module_size": {
          "compliant": false,
          "module_size": 551,
          "issues": [
            "Module size 551 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 551
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 18,
          "functions_with_docstrings": 18,
          "classes": 6,
          "classes_with_docstrings": 6,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 73.68421052631578,
      "issues": [
        "Found 4 lines exceeding 80 characters",
        "  Line 244: 82 chars",
        "  Line 271: 82 chars",
        "  Line 348: 81 chars",
        "Module size 551 lines exceeds maximum 300 lines"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files"
      ],
      "priority": "low"
    },
    {
      "path": "core/mathematics/monte_carlo/__init__.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/mathematics/monte_carlo/__init__.py",
      "total_lines": 36,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": false,
          "comment_density": 6.0606060606060606,
          "comment_lines": 2,
          "code_lines": 31,
          "issues": [
            "Comment density 6.1% below minimum 15.0%",
            "  Comment lines: 2, Code lines: 31"
          ],
          "recommendations": [
            "Add more comments to explain complex logic and functions"
          ],
          "metric": 6.0606060606060606
        },
        "module_size": {
          "compliant": true,
          "module_size": 36,
          "issues": [],
          "recommendations": [],
          "metric": 36
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100,
          "functions": 0,
          "functions_with_docstrings": 0,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 89.54456849193691,
      "issues": [
        "Comment density 6.1% below minimum 15.0%",
        "  Comment lines: 2, Code lines: 31"
      ],
      "recommendations": [
        "Add more comments to explain complex logic and functions"
      ],
      "priority": "low"
    },
    {
      "path": "core/mathematics/monte_carlo/integration.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/mathematics/monte_carlo/integration.py",
      "total_lines": 958,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 70,
              "length": 86,
              "content": "            f\"Integral Value: {self.integral_value..."
            },
            {
              "line_number": 120,
              "length": 91,
              "content": "            func: Function to integrate (takes arg..."
            },
            {
              "line_number": 127,
              "length": 82,
              "content": "            IntegrationResult containing integral ..."
            },
            {
              "line_number": 133,
              "length": 89,
              "content": "            f\"Starting Monte Carlo integration in ..."
            },
            {
              "line_number": 225,
              "length": 98,
              "content": "                    f\"Integration progress: {i}/{i..."
            },
            {
              "line_number": 324,
              "length": 121,
              "content": "                            f\"Integration progress..."
            },
            {
              "line_number": 359,
              "length": 82,
              "content": "            IntegrationResult containing integral ..."
            },
            {
              "line_number": 365,
              "length": 97,
              "content": "            f\"Starting importance sampling integra..."
            },
            {
              "line_number": 432,
              "length": 95,
              "content": "            Tuple of (sum of weighted function val..."
            },
            {
              "line_number": 456,
              "length": 98,
              "content": "                    f\"Integration progress: {i}/{i..."
            },
            {
              "line_number": 486,
              "length": 95,
              "content": "            Tuple of (sum of weighted function val..."
            },
            {
              "line_number": 559,
              "length": 121,
              "content": "                            f\"Integration progress..."
            },
            {
              "line_number": 592,
              "length": 82,
              "content": "            IntegrationResult containing integral ..."
            },
            {
              "line_number": 603,
              "length": 88,
              "content": "            f\"Using {strata_per_dim} strata per di..."
            },
            {
              "line_number": 606,
              "length": 94,
              "content": "            f\"Using {samples_per_stratum} samples ..."
            },
            {
              "line_number": 694,
              "length": 82,
              "content": "            List of strata indices, where each ind..."
            },
            {
              "line_number": 816,
              "length": 105,
              "content": "                    f\"Stratified sampling progress..."
            },
            {
              "line_number": 933,
              "length": 120,
              "content": "                            f\"Stratified sampling ..."
            }
          ],
          "issues": [
            "Found 18 lines exceeding 80 characters",
            "  Line 70: 86 chars",
            "  Line 120: 91 chars",
            "  Line 127: 82 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 18
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 19.101123595505616,
          "comment_lines": 153,
          "code_lines": 648,
          "issues": [],
          "recommendations": [],
          "metric": 19.101123595505616
        },
        "module_size": {
          "compliant": false,
          "module_size": 958,
          "issues": [
            "Module size 958 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 958
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 84.21052631578947,
          "functions": 17,
          "functions_with_docstrings": 14,
          "classes": 2,
          "classes_with_docstrings": 2,
          "issues": [],
          "recommendations": [],
          "metric": 84.21052631578947
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": false,
          "complexity_issues": [
            "Function '_stratified_sampling_parallel' has high complexity (11 decision points)"
          ],
          "issues": [
            "Function '_stratified_sampling_parallel' has high complexity (11 decision points)"
          ],
          "recommendations": [
            "Break complex functions into smaller, focused functions",
            "Extract complex logic into separate methods or classes"
          ],
          "metric": 1
        }
      },
      "overall_compliant": false,
      "compliance_score": 65.78947368421052,
      "issues": [
        "Found 18 lines exceeding 80 characters",
        "  Line 70: 86 chars",
        "  Line 120: 91 chars",
        "  Line 127: 82 chars",
        "Module size 958 lines exceeds maximum 300 lines",
        "Function '_stratified_sampling_parallel' has high complexity (11 decision points)"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files",
        "Break complex functions into smaller, focused functions",
        "Extract complex logic into separate methods or classes"
      ],
      "priority": "low"
    },
    {
      "path": "core/mathematics/monte_carlo/simulation.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/mathematics/monte_carlo/simulation.py",
      "total_lines": 661,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 308,
              "length": 85,
              "content": "            simulation_function: Function that per..."
            },
            {
              "line_number": 320,
              "length": 84,
              "content": "            f\"Starting Monte Carlo simulation '{na..."
            },
            {
              "line_number": 360,
              "length": 85,
              "content": "            simulation_function: Function that per..."
            },
            {
              "line_number": 379,
              "length": 97,
              "content": "                    f\"Simulation progress: {i}/{it..."
            },
            {
              "line_number": 399,
              "length": 85,
              "content": "            simulation_function: Function that per..."
            },
            {
              "line_number": 437,
              "length": 101,
              "content": "                        f\"Simulation progress: {i}..."
            },
            {
              "line_number": 459,
              "length": 85,
              "content": "            simulation_function: Function that per..."
            },
            {
              "line_number": 460,
              "length": 83,
              "content": "            parameter_ranges: Dictionary mapping p..."
            },
            {
              "line_number": 467,
              "length": 110,
              "content": "            Dictionary mapping parameter names to ..."
            },
            {
              "line_number": 494,
              "length": 94,
              "content": "                    f\"Completed parameter value {p..."
            },
            {
              "line_number": 602,
              "length": 82,
              "content": "            scenarios: Dictionary mapping scenario..."
            },
            {
              "line_number": 603,
              "length": 85,
              "content": "            simulation_function: Function that per..."
            }
          ],
          "issues": [
            "Found 12 lines exceeding 80 characters",
            "  Line 308: 85 chars",
            "  Line 320: 84 chars",
            "  Line 360: 85 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 12
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 20.503597122302157,
          "comment_lines": 114,
          "code_lines": 442,
          "issues": [],
          "recommendations": [],
          "metric": 20.503597122302157
        },
        "module_size": {
          "compliant": false,
          "module_size": 661,
          "issues": [
            "Module size 661 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 661
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 15,
          "functions_with_docstrings": 15,
          "classes": 2,
          "classes_with_docstrings": 2,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 73.68421052631578,
      "issues": [
        "Found 12 lines exceeding 80 characters",
        "  Line 308: 85 chars",
        "  Line 320: 84 chars",
        "  Line 360: 85 chars",
        "Module size 661 lines exceeds maximum 300 lines"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files"
      ],
      "priority": "low"
    },
    {
      "path": "core/mathematics/optimization/__init__.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/mathematics/optimization/__init__.py",
      "total_lines": 36,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": false,
          "comment_density": 6.0606060606060606,
          "comment_lines": 2,
          "code_lines": 31,
          "issues": [
            "Comment density 6.1% below minimum 15.0%",
            "  Comment lines: 2, Code lines: 31"
          ],
          "recommendations": [
            "Add more comments to explain complex logic and functions"
          ],
          "metric": 6.0606060606060606
        },
        "module_size": {
          "compliant": true,
          "module_size": 36,
          "issues": [],
          "recommendations": [],
          "metric": 36
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100,
          "functions": 0,
          "functions_with_docstrings": 0,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 89.54456849193691,
      "issues": [
        "Comment density 6.1% below minimum 15.0%",
        "  Comment lines: 2, Code lines: 31"
      ],
      "recommendations": [
        "Add more comments to explain complex logic and functions"
      ],
      "priority": "low"
    },
    {
      "path": "core/mathematics/optimization/genetic_algorithm.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/mathematics/optimization/genetic_algorithm.py",
      "total_lines": 1054,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 159,
              "length": 84,
              "content": "            f\"Genetic Algorithm Evolution - {self...."
            },
            {
              "line_number": 358,
              "length": 81,
              "content": "            f\"Genetic algorithm initialized with s..."
            },
            {
              "line_number": 422,
              "length": 87,
              "content": "                        f\"Reached maximum time: {s..."
            },
            {
              "line_number": 432,
              "length": 113,
              "content": "                        f\"Early stopping after {ge..."
            },
            {
              "line_number": 527,
              "length": 82,
              "content": "                        f\"Generation {generation}/..."
            },
            {
              "line_number": 548,
              "length": 87,
              "content": "                    \"generations_without_improveme..."
            },
            {
              "line_number": 553,
              "length": 114,
              "content": "            f\"Evolution complete: {result.best_fit..."
            },
            {
              "line_number": 595,
              "length": 84,
              "content": "            f\"Starting parallel evolution with ini..."
            },
            {
              "line_number": 621,
              "length": 83,
              "content": "                    f\"Reached maximum time: {self...."
            },
            {
              "line_number": 631,
              "length": 109,
              "content": "                    f\"Early stopping after {genera..."
            },
            {
              "line_number": 775,
              "length": 83,
              "content": "                \"generations_without_improvement\":..."
            },
            {
              "line_number": 783,
              "length": 86,
              "content": "        Select an individual from the population u..."
            },
            {
              "line_number": 855,
              "length": 96,
              "content": "                        \"Custom selection function..."
            },
            {
              "line_number": 860,
              "length": 98,
              "content": "                    \"Custom selection method selec..."
            },
            {
              "line_number": 872,
              "length": 83,
              "content": "        Perform crossover between two parents usin..."
            },
            {
              "line_number": 896,
              "length": 108,
              "content": "                    \"Custom crossover method selec..."
            }
          ],
          "issues": [
            "Found 16 lines exceeding 80 characters",
            "  Line 159: 84 chars",
            "  Line 358: 81 chars",
            "  Line 422: 87 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 16
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 24.22857142857143,
          "comment_lines": 212,
          "code_lines": 663,
          "issues": [],
          "recommendations": [],
          "metric": 24.22857142857143
        },
        "module_size": {
          "compliant": false,
          "module_size": 1054,
          "issues": [
            "Module size 1054 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 1054
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 96.15384615384616,
          "functions": 19,
          "functions_with_docstrings": 18,
          "classes": 7,
          "classes_with_docstrings": 7,
          "issues": [],
          "recommendations": [],
          "metric": 96.15384615384616
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": false,
          "complexity_issues": [
            "Function 'evolve' has high complexity (16 decision points)",
            "Function '_evolve_parallel' has high complexity (19 decision points)"
          ],
          "issues": [
            "Function 'evolve' has high complexity (16 decision points)",
            "Function '_evolve_parallel' has high complexity (19 decision points)"
          ],
          "recommendations": [
            "Break complex functions into smaller, focused functions",
            "Extract complex logic into separate methods or classes"
          ],
          "metric": 2
        }
      },
      "overall_compliant": false,
      "compliance_score": 65.78947368421052,
      "issues": [
        "Found 16 lines exceeding 80 characters",
        "  Line 159: 84 chars",
        "  Line 358: 81 chars",
        "  Line 422: 87 chars",
        "Module size 1054 lines exceeds maximum 300 lines",
        "Function 'evolve' has high complexity (16 decision points)",
        "Function '_evolve_parallel' has high complexity (19 decision points)"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files",
        "Break complex functions into smaller, focused functions",
        "Extract complex logic into separate methods or classes"
      ],
      "priority": "low"
    },
    {
      "path": "core/mathematics/optimization/particle_swarm.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/mathematics/optimization/particle_swarm.py",
      "total_lines": 938,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 241,
              "length": 91,
              "content": "            f\"Particle Swarm Optimization initiali..."
            },
            {
              "line_number": 259,
              "length": 94,
              "content": "            fitness_function: Function to evaluate..."
            },
            {
              "line_number": 262,
              "length": 89,
              "content": "            maximize: Whether to maximize (True) o..."
            },
            {
              "line_number": 272,
              "length": 85,
              "content": "                f\"Bounds length ({len(bounds)}) mu..."
            },
            {
              "line_number": 334,
              "length": 87,
              "content": "                        f\"Reached maximum time: {s..."
            },
            {
              "line_number": 344,
              "length": 111,
              "content": "                        f\"Early stopping after {it..."
            },
            {
              "line_number": 446,
              "length": 85,
              "content": "                    \"iterations_without_improvemen..."
            },
            {
              "line_number": 506,
              "length": 85,
              "content": "                # Get neighborhood best (use globa..."
            },
            {
              "line_number": 581,
              "length": 83,
              "content": "                    f\"Reached maximum time: {self...."
            },
            {
              "line_number": 591,
              "length": 107,
              "content": "                    f\"Early stopping after {iterat..."
            },
            {
              "line_number": 678,
              "length": 81,
              "content": "                \"iterations_without_improvement\": ..."
            },
            {
              "line_number": 812,
              "length": 82,
              "content": "            # Focal (star) topology - one central ..."
            }
          ],
          "issues": [
            "Found 12 lines exceeding 80 characters",
            "  Line 241: 91 chars",
            "  Line 259: 94 chars",
            "  Line 262: 89 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 12
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 21.84655396618986,
          "comment_lines": 168,
          "code_lines": 601,
          "issues": [],
          "recommendations": [],
          "metric": 21.84655396618986
        },
        "module_size": {
          "compliant": false,
          "module_size": 938,
          "issues": [
            "Module size 938 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 938
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 94.11764705882352,
          "functions": 12,
          "functions_with_docstrings": 11,
          "classes": 5,
          "classes_with_docstrings": 5,
          "issues": [],
          "recommendations": [],
          "metric": 94.11764705882352
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": false,
          "complexity_issues": [
            "Function 'optimize' has high complexity (18 decision points)",
            "Function '_optimize_parallel' has high complexity (16 decision points)",
            "Function '_initialize_topology' has high complexity (13 decision points)"
          ],
          "issues": [
            "Function 'optimize' has high complexity (18 decision points)",
            "Function '_optimize_parallel' has high complexity (16 decision points)",
            "Function '_initialize_topology' has high complexity (13 decision points)"
          ],
          "recommendations": [
            "Break complex functions into smaller, focused functions",
            "Extract complex logic into separate methods or classes"
          ],
          "metric": 3
        }
      },
      "overall_compliant": false,
      "compliance_score": 65.78947368421052,
      "issues": [
        "Found 12 lines exceeding 80 characters",
        "  Line 241: 91 chars",
        "  Line 259: 94 chars",
        "  Line 262: 89 chars",
        "Module size 938 lines exceeds maximum 300 lines",
        "Function 'optimize' has high complexity (18 decision points)",
        "Function '_optimize_parallel' has high complexity (16 decision points)",
        "Function '_initialize_topology' has high complexity (13 decision points)"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files",
        "Break complex functions into smaller, focused functions",
        "Extract complex logic into separate methods or classes"
      ],
      "priority": "low"
    },
    {
      "path": "core/mathematics/optimization/simulated_annealing.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/mathematics/optimization/simulated_annealing.py",
      "total_lines": 776,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 203,
              "length": 85,
              "content": "        None  # Trigger reheating if no improvemen..."
            },
            {
              "line_number": 234,
              "length": 83,
              "content": "            f\"Simulated annealing initialized with..."
            },
            {
              "line_number": 255,
              "length": 84,
              "content": "            energy_function: Function to calculate..."
            },
            {
              "line_number": 286,
              "length": 81,
              "content": "            f\"Starting simulated annealing with in..."
            },
            {
              "line_number": 309,
              "length": 87,
              "content": "                        f\"Reached maximum time: {s..."
            },
            {
              "line_number": 387,
              "length": 107,
              "content": "                        f\"Reheating at iteration {..."
            },
            {
              "line_number": 388,
              "length": 100,
              "content": "                        f\"(no improvement for {ite..."
            },
            {
              "line_number": 395,
              "length": 87,
              "content": "                        f\"Temperature: {temperatur..."
            },
            {
              "line_number": 416,
              "length": 116,
              "content": "            f\"Optimization complete: {result.best_..."
            },
            {
              "line_number": 419,
              "length": 106,
              "content": "            f\"Acceptance rate: {result.acceptance_..."
            },
            {
              "line_number": 434,
              "length": 81,
              "content": "        Run simulated annealing optimization with ..."
            },
            {
              "line_number": 472,
              "length": 90,
              "content": "            f\"Starting parallel simulated annealin..."
            },
            {
              "line_number": 537,
              "length": 83,
              "content": "                    f\"Reached maximum time: {self...."
            },
            {
              "line_number": 639,
              "length": 103,
              "content": "                    f\"Reheating at iteration {iter..."
            },
            {
              "line_number": 640,
              "length": 96,
              "content": "                    f\"(no improvement for {iterati..."
            },
            {
              "line_number": 647,
              "length": 83,
              "content": "                    f\"Temperature: {temperature:.6..."
            },
            {
              "line_number": 716,
              "length": 99,
              "content": "                    \"Custom cooling schedule selec..."
            }
          ],
          "issues": [
            "Found 17 lines exceeding 80 characters",
            "  Line 203: 85 chars",
            "  Line 234: 83 chars",
            "  Line 255: 84 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 17
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 20.278637770897834,
          "comment_lines": 131,
          "code_lines": 515,
          "issues": [],
          "recommendations": [],
          "metric": 20.278637770897834
        },
        "module_size": {
          "compliant": false,
          "module_size": 776,
          "issues": [
            "Module size 776 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 776
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 92.3076923076923,
          "functions": 9,
          "functions_with_docstrings": 8,
          "classes": 4,
          "classes_with_docstrings": 4,
          "issues": [],
          "recommendations": [],
          "metric": 92.3076923076923
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": false,
          "complexity_issues": [
            "Function 'optimize' has high complexity (13 decision points)",
            "Function '_optimize_parallel' has high complexity (17 decision points)"
          ],
          "issues": [
            "Function 'optimize' has high complexity (13 decision points)",
            "Function '_optimize_parallel' has high complexity (17 decision points)"
          ],
          "recommendations": [
            "Break complex functions into smaller, focused functions",
            "Extract complex logic into separate methods or classes"
          ],
          "metric": 2
        }
      },
      "overall_compliant": false,
      "compliance_score": 65.78947368421052,
      "issues": [
        "Found 17 lines exceeding 80 characters",
        "  Line 203: 85 chars",
        "  Line 234: 83 chars",
        "  Line 255: 84 chars",
        "Module size 776 lines exceeds maximum 300 lines",
        "Function 'optimize' has high complexity (13 decision points)",
        "Function '_optimize_parallel' has high complexity (17 decision points)"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files",
        "Break complex functions into smaller, focused functions",
        "Extract complex logic into separate methods or classes"
      ],
      "priority": "low"
    },
    {
      "path": "core/matroid/base.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/matroid/base.py",
      "total_lines": 591,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 37,
              "length": 93,
              "content": "    A matroid is a mathematical structure that gen..."
            },
            {
              "line_number": 38,
              "length": 95,
              "content": "    in vector spaces. In the context of NyxTrace, ..."
            },
            {
              "line_number": 103,
              "length": 87,
              "content": "                    \"Adding this set would violate..."
            },
            {
              "line_number": 299,
              "length": 136,
              "content": "        return f\"Matroid(name={self.name}, ground_..."
            },
            {
              "line_number": 303,
              "length": 117,
              "content": "        return f\"Matroid(name={self.name}, ground_..."
            },
            {
              "line_number": 313,
              "length": 83,
              "content": "    3. If X and Y are sets, then r(X \u222a Y) + r(X \u2229 ..."
            },
            {
              "line_number": 363,
              "length": 82,
              "content": "    An independence oracle is a function that retu..."
            },
            {
              "line_number": 376,
              "length": 81,
              "content": "            independence_oracle: Function that det..."
            },
            {
              "line_number": 397,
              "length": 87,
              "content": "    Matroid specifically designed for modeling tas..."
            },
            {
              "line_number": 399,
              "length": 84,
              "content": "    Tasks are independent if they can be performed..."
            },
            {
              "line_number": 413,
              "length": 83,
              "content": "            resource_constraints: Dictionary mappi..."
            }
          ],
          "issues": [
            "Found 11 lines exceeding 80 characters",
            "  Line 37: 93 chars",
            "  Line 38: 95 chars",
            "  Line 103: 87 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 11
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 20.600858369098713,
          "comment_lines": 96,
          "code_lines": 370,
          "issues": [],
          "recommendations": [],
          "metric": 20.600858369098713
        },
        "module_size": {
          "compliant": false,
          "module_size": 591,
          "issues": [
            "Module size 591 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 591
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 27,
          "functions_with_docstrings": 27,
          "classes": 4,
          "classes_with_docstrings": 4,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": false,
          "violations": [
            "Variable 'Element' should use snake_case"
          ],
          "issues": [
            "Variable 'Element' should use snake_case"
          ],
          "recommendations": [
            "Follow Python naming conventions: snake_case for functions/variables, PascalCase for classes"
          ],
          "metric": 1
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 66.66666666666667,
      "issues": [
        "Found 11 lines exceeding 80 characters",
        "  Line 37: 93 chars",
        "  Line 38: 95 chars",
        "  Line 103: 87 chars",
        "Module size 591 lines exceeds maximum 300 lines",
        "Variable 'Element' should use snake_case"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files",
        "Follow Python naming conventions: snake_case for functions/variables, PascalCase for classes"
      ],
      "priority": "low"
    },
    {
      "path": "core/matroid/spatial_matroid.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/matroid/spatial_matroid.py",
      "total_lines": 702,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 5,
              "length": 87,
              "content": "These matroids handle spatial data, geographic rel..."
            },
            {
              "line_number": 42,
              "length": 82,
              "content": "    satisfy spatial constraints like minimum dista..."
            },
            {
              "line_number": 192,
              "length": 82,
              "content": "        Find an optimal subset of locations that p..."
            },
            {
              "line_number": 472,
              "length": 84,
              "content": "                \"min_time_interval_seconds\": self...."
            }
          ],
          "issues": [
            "Found 4 lines exceeding 80 characters",
            "  Line 5: 87 chars",
            "  Line 42: 82 chars",
            "  Line 192: 82 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 4
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 15.82608695652174,
          "comment_lines": 91,
          "code_lines": 484,
          "issues": [],
          "recommendations": [],
          "metric": 15.82608695652174
        },
        "module_size": {
          "compliant": false,
          "module_size": 702,
          "issues": [
            "Module size 702 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 702
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 88.88888888888889,
          "functions": 24,
          "functions_with_docstrings": 21,
          "classes": 3,
          "classes_with_docstrings": 3,
          "issues": [],
          "recommendations": [],
          "metric": 88.88888888888889
        },
        "naming_conventions": {
          "compliant": false,
          "violations": [
            "Variable 'Location' should use snake_case",
            "Variable 'GeoElement' should use snake_case"
          ],
          "issues": [
            "Variable 'Location' should use snake_case",
            "Variable 'GeoElement' should use snake_case"
          ],
          "recommendations": [
            "Follow Python naming conventions: snake_case for functions/variables, PascalCase for classes"
          ],
          "metric": 2
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 66.66666666666667,
      "issues": [
        "Found 4 lines exceeding 80 characters",
        "  Line 5: 87 chars",
        "  Line 42: 82 chars",
        "  Line 192: 82 chars",
        "Module size 702 lines exceeds maximum 300 lines",
        "Variable 'Location' should use snake_case",
        "Variable 'GeoElement' should use snake_case"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files",
        "Follow Python naming conventions: snake_case for functions/variables, PascalCase for classes"
      ],
      "priority": "low"
    },
    {
      "path": "core/mcp_client.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/mcp_client.py",
      "total_lines": 718,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 288,
              "length": 86,
              "content": "            optional_variables: Optional variables..."
            },
            {
              "line_number": 412,
              "length": 89,
              "content": "                or \"claude-3-5-sonnet-20241022\",  ..."
            },
            {
              "line_number": 428,
              "length": 102,
              "content": "            url = \"https://generativelanguage.goog..."
            },
            {
              "line_number": 447,
              "length": 93,
              "content": "            url = f\"https://api.wolframalpha.com/v..."
            },
            {
              "line_number": 505,
              "length": 97,
              "content": "                            f\"Request failed with ..."
            },
            {
              "line_number": 508,
              "length": 97,
              "content": "                            f\"Request failed with ..."
            },
            {
              "line_number": 528,
              "length": 84,
              "content": "                        f\"Request failed, retrying..."
            },
            {
              "line_number": 699,
              "length": 135,
              "content": "        \"Analyze the following task from a CTAS pe..."
            }
          ],
          "issues": [
            "Found 8 lines exceeding 80 characters",
            "  Line 288: 86 chars",
            "  Line 412: 89 chars",
            "  Line 428: 102 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 8
        },
        "comment_density": {
          "compliant": false,
          "comment_density": 13.810316139767053,
          "comment_lines": 83,
          "code_lines": 518,
          "issues": [
            "Comment density 13.8% below minimum 15.0%",
            "  Comment lines: 83, Code lines: 518"
          ],
          "recommendations": [
            "Add more comments to explain complex logic and functions"
          ],
          "metric": 13.810316139767053
        },
        "module_size": {
          "compliant": false,
          "module_size": 718,
          "issues": [
            "Module size 718 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 718
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 92.85714285714286,
          "functions": 9,
          "functions_with_docstrings": 9,
          "classes": 5,
          "classes_with_docstrings": 4,
          "issues": [],
          "recommendations": [],
          "metric": 92.85714285714286
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 72.29276741493223,
      "issues": [
        "Found 8 lines exceeding 80 characters",
        "  Line 288: 86 chars",
        "  Line 412: 89 chars",
        "  Line 428: 102 chars",
        "Comment density 13.8% below minimum 15.0%",
        "  Comment lines: 83, Code lines: 518",
        "Module size 718 lines exceeds maximum 300 lines"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Add more comments to explain complex logic and functions",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files"
      ],
      "priority": "low"
    },
    {
      "path": "core/mcp_server.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/mcp_server.py",
      "total_lines": 2532,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 4,
              "length": 91,
              "content": "Advanced MCP server for NyxTrace with extensive ca..."
            },
            {
              "line_number": 5,
              "length": 81,
              "content": "multiple language models, dynamic workflows, and s..."
            },
            {
              "line_number": 841,
              "length": 116,
              "content": "                    detail=f\"Not enough permission..."
            },
            {
              "line_number": 872,
              "length": 98,
              "content": "                    detail=f\"Rate limit exceeded. ..."
            },
            {
              "line_number": 987,
              "length": 85,
              "content": "    use a proper workflow engine with dependency r..."
            },
            {
              "line_number": 1141,
              "length": 81,
              "content": "        f\"LLM {config.type}:{config.model} registe..."
            },
            {
              "line_number": 1269,
              "length": 100,
              "content": "                detail=f\"Missing required variable..."
            },
            {
              "line_number": 1304,
              "length": 91,
              "content": "            content += \"\\n\\n```python\\ndef hello_w..."
            },
            {
              "line_number": 1361,
              "length": 108,
              "content": "            f\"LLM call to {request.llm_type}:{mode..."
            },
            {
              "line_number": 1383,
              "length": 83,
              "content": "    # In a real implementation, this would connect..."
            },
            {
              "line_number": 1427,
              "length": 106,
              "content": "            \"\\n\\nBased on your input, I can see th..."
            },
            {
              "line_number": 1428,
              "length": 106,
              "content": "            \"\\n\\nThis involves collecting data fro..."
            },
            {
              "line_number": 1434,
              "length": 91,
              "content": "            \"\\n\\nLet me know if you need more spec..."
            },
            {
              "line_number": 1925,
              "length": 101,
              "content": "        f\"Workflow {request.workflow_id} execution..."
            },
            {
              "line_number": 1950,
              "length": 85,
              "content": "            f\"Workflow {workflow_id} execution {ex..."
            },
            {
              "line_number": 2172,
              "length": 86,
              "content": "    # Activation function: \u03a6h(\u03b6,T,tools)=1 if \u03b6>0...."
            },
            {
              "line_number": 2181,
              "length": 92,
              "content": "        \"activation_formula\": \"\u03a6h(\u03b6,T,tools)=1 if ..."
            },
            {
              "line_number": 2228,
              "length": 113,
              "content": "                font-family: -apple-system, BlinkM..."
            },
            {
              "line_number": 2288,
              "length": 87,
              "content": "                <li><a href=\"/mcp/docs\" target=\"_b..."
            },
            {
              "line_number": 2289,
              "length": 85,
              "content": "                <li><a href=\"/mcp/redoc\" target=\"_..."
            },
            {
              "line_number": 2290,
              "length": 94,
              "content": "                <li><a href=\"/mcp/openapi.json\" ta..."
            },
            {
              "line_number": 2302,
              "length": 94,
              "content": "                <a href=\"/mcp/workflow/execute\">/m..."
            },
            {
              "line_number": 2322,
              "length": 94,
              "content": "                document.getElementById('server-ti..."
            },
            {
              "line_number": 2432,
              "length": 82,
              "content": "            \"context\": \"Recent cybersecurity alert..."
            }
          ],
          "issues": [
            "Found 24 lines exceeding 80 characters",
            "  Line 4: 91 chars",
            "  Line 5: 81 chars",
            "  Line 841: 116 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 24
        },
        "comment_density": {
          "compliant": false,
          "comment_density": 12.370649106302917,
          "comment_lines": 263,
          "code_lines": 1863,
          "issues": [
            "Comment density 12.4% below minimum 15.0%",
            "  Comment lines: 263, Code lines: 1863"
          ],
          "recommendations": [
            "Add more comments to explain complex logic and functions"
          ],
          "metric": 12.370649106302917
        },
        "module_size": {
          "compliant": false,
          "module_size": 2532,
          "issues": [
            "Module size 2532 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 2532
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 94.11764705882352,
          "functions": 10,
          "functions_with_docstrings": 8,
          "classes": 24,
          "classes_with_docstrings": 24,
          "issues": [],
          "recommendations": [],
          "metric": 94.11764705882352
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 70.6089463231613,
      "issues": [
        "Found 24 lines exceeding 80 characters",
        "  Line 4: 91 chars",
        "  Line 5: 81 chars",
        "  Line 841: 116 chars",
        "Comment density 12.4% below minimum 15.0%",
        "  Comment lines: 263, Code lines: 1863",
        "Module size 2532 lines exceeds maximum 300 lines"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Add more comments to explain complex logic and functions",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files"
      ],
      "priority": "low"
    },
    {
      "path": "core/media_analysis/analyzer.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/media_analysis/analyzer.py",
      "total_lines": 653,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 470,
              "length": 84,
              "content": "                        \"confidence\": 0.85,  # Har..."
            },
            {
              "line_number": 566,
              "length": 86,
              "content": "                f\"Analyzed {frame_count} frames, e..."
            }
          ],
          "issues": [
            "Found 2 lines exceeding 80 characters",
            "  Line 470: 84 chars",
            "  Line 566: 86 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 2
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 25.38167938931298,
          "comment_lines": 133,
          "code_lines": 391,
          "issues": [],
          "recommendations": [],
          "metric": 25.38167938931298
        },
        "module_size": {
          "compliant": false,
          "module_size": 653,
          "issues": [
            "Module size 653 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 653
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 13,
          "functions_with_docstrings": 13,
          "classes": 2,
          "classes_with_docstrings": 2,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": false,
          "complexity_issues": [
            "Function 'extract_metadata' has high complexity (15 decision points)",
            "Function 'analyze_url_media' has high complexity (11 decision points)"
          ],
          "issues": [
            "Function 'extract_metadata' has high complexity (15 decision points)",
            "Function 'analyze_url_media' has high complexity (11 decision points)"
          ],
          "recommendations": [
            "Break complex functions into smaller, focused functions",
            "Extract complex logic into separate methods or classes"
          ],
          "metric": 2
        }
      },
      "overall_compliant": false,
      "compliance_score": 65.78947368421052,
      "issues": [
        "Found 2 lines exceeding 80 characters",
        "  Line 470: 84 chars",
        "  Line 566: 86 chars",
        "Module size 653 lines exceeds maximum 300 lines",
        "Function 'extract_metadata' has high complexity (15 decision points)",
        "Function 'analyze_url_media' has high complexity (11 decision points)"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files",
        "Break complex functions into smaller, focused functions",
        "Extract complex logic into separate methods or classes"
      ],
      "priority": "low"
    },
    {
      "path": "core/new/models/__init__.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/new/models/__init__.py",
      "total_lines": 27,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": false,
          "comment_density": 8.333333333333332,
          "comment_lines": 2,
          "code_lines": 22,
          "issues": [
            "Comment density 8.3% below minimum 15.0%",
            "  Comment lines: 2, Code lines: 22"
          ],
          "recommendations": [
            "Add more comments to explain complex logic and functions"
          ],
          "metric": 8.333333333333332
        },
        "module_size": {
          "compliant": true,
          "module_size": 27,
          "issues": [],
          "recommendations": [],
          "metric": 27
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100,
          "functions": 0,
          "functions_with_docstrings": 0,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 92.2027290448343,
      "issues": [
        "Comment density 8.3% below minimum 15.0%",
        "  Comment lines: 2, Code lines: 22"
      ],
      "recommendations": [
        "Add more comments to explain complex logic and functions"
      ],
      "priority": "low"
    },
    {
      "path": "core/new/models/complete_element.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/new/models/complete_element.py",
      "total_lines": 149,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 26.01626016260163,
          "comment_lines": 32,
          "code_lines": 91,
          "issues": [],
          "recommendations": [],
          "metric": 26.01626016260163
        },
        "module_size": {
          "compliant": true,
          "module_size": 149,
          "issues": [],
          "recommendations": [],
          "metric": 149
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 3,
          "functions_with_docstrings": 3,
          "classes": 1,
          "classes_with_docstrings": 1,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 100.0,
      "issues": [],
      "recommendations": [],
      "priority": "low"
    },
    {
      "path": "core/new/models/element.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/new/models/element.py",
      "total_lines": 160,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 22,
              "length": 89,
              "content": "representing a single classification entity with p..."
            }
          ],
          "issues": [
            "Found 1 lines exceeding 80 characters",
            "  Line 22: 89 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 1
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 34.883720930232556,
          "comment_lines": 45,
          "code_lines": 84,
          "issues": [],
          "recommendations": [],
          "metric": 34.883720930232556
        },
        "module_size": {
          "compliant": true,
          "module_size": 160,
          "issues": [],
          "recommendations": [],
          "metric": 160
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 7,
          "functions_with_docstrings": 7,
          "classes": 1,
          "classes_with_docstrings": 1,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 91.22807017543859,
      "issues": [
        "Found 1 lines exceeding 80 characters",
        "  Line 22: 89 chars"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation"
      ],
      "priority": "low"
    },
    {
      "path": "core/new/models/element_property.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/new/models/element_property.py",
      "total_lines": 91,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 21,
              "length": 82,
              "content": "This module defines the ElementProperty enum for t..."
            }
          ],
          "issues": [
            "Found 1 lines exceeding 80 characters",
            "  Line 21: 82 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 1
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 22.36842105263158,
          "comment_lines": 17,
          "code_lines": 59,
          "issues": [],
          "recommendations": [],
          "metric": 22.36842105263158
        },
        "module_size": {
          "compliant": true,
          "module_size": 91,
          "issues": [],
          "recommendations": [],
          "metric": 91
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 0,
          "functions_with_docstrings": 0,
          "classes": 1,
          "classes_with_docstrings": 1,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 91.22807017543859,
      "issues": [
        "Found 1 lines exceeding 80 characters",
        "  Line 21: 82 chars"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation"
      ],
      "priority": "low"
    },
    {
      "path": "core/new/models/element_relationships.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/new/models/element_relationships.py",
      "total_lines": 148,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 133,
              "length": 83,
              "content": "    def clear_relationships(self, relationship_typ..."
            }
          ],
          "issues": [
            "Found 1 lines exceeding 80 characters",
            "  Line 133: 83 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 1
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 30.327868852459016,
          "comment_lines": 37,
          "code_lines": 85,
          "issues": [],
          "recommendations": [],
          "metric": 30.327868852459016
        },
        "module_size": {
          "compliant": true,
          "module_size": 148,
          "issues": [],
          "recommendations": [],
          "metric": 148
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 6,
          "functions_with_docstrings": 6,
          "classes": 1,
          "classes_with_docstrings": 1,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 91.22807017543859,
      "issues": [
        "Found 1 lines exceeding 80 characters",
        "  Line 133: 83 chars"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation"
      ],
      "priority": "low"
    },
    {
      "path": "core/new/models/element_serialization.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/new/models/element_serialization.py",
      "total_lines": 117,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 22,
              "length": 83,
              "content": "for converting elements to and from dictionary for..."
            },
            {
              "line_number": 75,
              "length": 83,
              "content": "    def _parse_properties(cls, data: Dict[str, Any..."
            },
            {
              "line_number": 100,
              "length": 88,
              "content": "    def _parse_related_elements(cls, data: Dict[st..."
            }
          ],
          "issues": [
            "Found 3 lines exceeding 80 characters",
            "  Line 22: 83 chars",
            "  Line 75: 83 chars",
            "  Line 100: 88 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 3
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 25.510204081632654,
          "comment_lines": 25,
          "code_lines": 73,
          "issues": [],
          "recommendations": [],
          "metric": 25.510204081632654
        },
        "module_size": {
          "compliant": true,
          "module_size": 117,
          "issues": [],
          "recommendations": [],
          "metric": 117
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 3,
          "functions_with_docstrings": 3,
          "classes": 1,
          "classes_with_docstrings": 1,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 91.22807017543859,
      "issues": [
        "Found 3 lines exceeding 80 characters",
        "  Line 22: 83 chars",
        "  Line 75: 83 chars",
        "  Line 100: 88 chars"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation"
      ],
      "priority": "low"
    },
    {
      "path": "core/periodic_table/__init__.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/periodic_table/__init__.py",
      "total_lines": 42,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": false,
          "comment_density": 5.128205128205128,
          "comment_lines": 2,
          "code_lines": 37,
          "issues": [
            "Comment density 5.1% below minimum 15.0%",
            "  Comment lines: 2, Code lines: 37"
          ],
          "recommendations": [
            "Add more comments to explain complex logic and functions"
          ],
          "metric": 5.128205128205128
        },
        "module_size": {
          "compliant": true,
          "module_size": 42,
          "issues": [],
          "recommendations": [],
          "metric": 42
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100,
          "functions": 0,
          "functions_with_docstrings": 0,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 88.45404108562003,
      "issues": [
        "Comment density 5.1% below minimum 15.0%",
        "  Comment lines: 2, Code lines: 37"
      ],
      "recommendations": [
        "Add more comments to explain complex logic and functions"
      ],
      "priority": "low"
    },
    {
      "path": "core/periodic_table/adversary_task.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/periodic_table/adversary_task.py",
      "total_lines": 240,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 16.666666666666664,
          "comment_lines": 35,
          "code_lines": 175,
          "issues": [],
          "recommendations": [],
          "metric": 16.666666666666664
        },
        "module_size": {
          "compliant": true,
          "module_size": 240,
          "issues": [],
          "recommendations": [],
          "metric": 240
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 11,
          "functions_with_docstrings": 11,
          "classes": 1,
          "classes_with_docstrings": 1,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 100.0,
      "issues": [],
      "recommendations": [],
      "priority": "low"
    },
    {
      "path": "core/periodic_table/cache_manager.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/periodic_table/cache_manager.py",
      "total_lines": 396,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 47,
              "length": 85,
              "content": "    with Streamlit. It uses a thread-local storage..."
            },
            {
              "line_number": 88,
              "length": 86,
              "content": "                f\"Cached {len(elements)} elements,..."
            },
            {
              "line_number": 105,
              "length": 92,
              "content": "                f\"Cached {len(categories)} categor..."
            },
            {
              "line_number": 139,
              "length": 83,
              "content": "                f\"Cached {len(periods)} periods, t..."
            },
            {
              "line_number": 144,
              "length": 88,
              "content": "        Cache a list of relationships for thread-s..."
            }
          ],
          "issues": [
            "Found 5 lines exceeding 80 characters",
            "  Line 47: 85 chars",
            "  Line 88: 86 chars",
            "  Line 105: 92 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 5
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 16.463414634146343,
          "comment_lines": 54,
          "code_lines": 274,
          "issues": [],
          "recommendations": [],
          "metric": 16.463414634146343
        },
        "module_size": {
          "compliant": false,
          "module_size": 396,
          "issues": [
            "Module size 396 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 396
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 25,
          "functions_with_docstrings": 25,
          "classes": 1,
          "classes_with_docstrings": 1,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 73.68421052631578,
      "issues": [
        "Found 5 lines exceeding 80 characters",
        "  Line 47: 85 chars",
        "  Line 88: 86 chars",
        "  Line 105: 92 chars",
        "Module size 396 lines exceeds maximum 300 lines"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files"
      ],
      "priority": "low"
    },
    {
      "path": "core/periodic_table/element.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/periodic_table/element.py",
      "total_lines": 379,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 22,
              "length": 89,
              "content": "representing a single classification entity with p..."
            }
          ],
          "issues": [
            "Found 1 lines exceeding 80 characters",
            "  Line 22: 89 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 1
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 28.70967741935484,
          "comment_lines": 89,
          "code_lines": 221,
          "issues": [],
          "recommendations": [],
          "metric": 28.70967741935484
        },
        "module_size": {
          "compliant": false,
          "module_size": 379,
          "issues": [
            "Module size 379 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 379
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 11,
          "functions_with_docstrings": 11,
          "classes": 2,
          "classes_with_docstrings": 2,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 73.68421052631578,
      "issues": [
        "Found 1 lines exceeding 80 characters",
        "  Line 22: 89 chars",
        "Module size 379 lines exceeds maximum 300 lines"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files"
      ],
      "priority": "low"
    },
    {
      "path": "core/periodic_table/group.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/periodic_table/group.py",
      "total_lines": 256,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 21,
              "length": 88,
              "content": "This module defines the Group, Period, and Categor..."
            }
          ],
          "issues": [
            "Found 1 lines exceeding 80 characters",
            "  Line 21: 88 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 1
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 24.651162790697676,
          "comment_lines": 53,
          "code_lines": 162,
          "issues": [],
          "recommendations": [],
          "metric": 24.651162790697676
        },
        "module_size": {
          "compliant": true,
          "module_size": 256,
          "issues": [],
          "recommendations": [],
          "metric": 256
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 6,
          "functions_with_docstrings": 6,
          "classes": 4,
          "classes_with_docstrings": 4,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 91.22807017543859,
      "issues": [
        "Found 1 lines exceeding 80 characters",
        "  Line 21: 88 chars"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation"
      ],
      "priority": "low"
    },
    {
      "path": "core/periodic_table/registry.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/periodic_table/registry.py",
      "total_lines": 1109,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 193,
              "length": 94,
              "content": "            \"CREATE INDEX IF NOT EXISTS idx_elemen..."
            },
            {
              "line_number": 196,
              "length": 84,
              "content": "            \"CREATE INDEX IF NOT EXISTS idx_elemen..."
            },
            {
              "line_number": 199,
              "length": 86,
              "content": "            \"CREATE INDEX IF NOT EXISTS idx_elemen..."
            },
            {
              "line_number": 202,
              "length": 90,
              "content": "            \"CREATE INDEX IF NOT EXISTS idx_elemen..."
            },
            {
              "line_number": 206,
              "length": 93,
              "content": "            \"CREATE INDEX IF NOT EXISTS idx_relati..."
            },
            {
              "line_number": 209,
              "length": 93,
              "content": "            \"CREATE INDEX IF NOT EXISTS idx_relati..."
            },
            {
              "line_number": 212,
              "length": 86,
              "content": "            \"CREATE INDEX IF NOT EXISTS idx_relati..."
            },
            {
              "line_number": 895,
              "length": 81,
              "content": "            f\"Added relationship: {relationship.na..."
            },
            {
              "line_number": 962,
              "length": 96,
              "content": "            f\"Loaded {len(self.relationship_manage..."
            },
            {
              "line_number": 979,
              "length": 105,
              "content": "            Dictionary mapping relationship types ..."
            }
          ],
          "issues": [
            "Found 10 lines exceeding 80 characters",
            "  Line 193: 94 chars",
            "  Line 196: 84 chars",
            "  Line 199: 86 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 10
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 26.666666666666668,
          "comment_lines": 244,
          "code_lines": 671,
          "issues": [],
          "recommendations": [],
          "metric": 26.666666666666668
        },
        "module_size": {
          "compliant": false,
          "module_size": 1109,
          "issues": [
            "Module size 1109 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 1109
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 25,
          "functions_with_docstrings": 25,
          "classes": 1,
          "classes_with_docstrings": 1,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 73.68421052631578,
      "issues": [
        "Found 10 lines exceeding 80 characters",
        "  Line 193: 94 chars",
        "  Line 196: 84 chars",
        "  Line 199: 86 chars",
        "Module size 1109 lines exceeds maximum 300 lines"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files"
      ],
      "priority": "low"
    },
    {
      "path": "core/periodic_table/relationships.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/periodic_table/relationships.py",
      "total_lines": 599,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 21,
              "length": 83,
              "content": "This module defines the relationship types and cla..."
            },
            {
              "line_number": 225,
              "length": 83,
              "content": "            RelationshipType.COMMUNICATES_WITH: Re..."
            },
            {
              "line_number": 297,
              "length": 93,
              "content": "            skip_inverse: Flag to prevent creating..."
            },
            {
              "line_number": 307,
              "length": 138,
              "content": "                    f\"Skipping duplicate relations..."
            },
            {
              "line_number": 314,
              "length": 117,
              "content": "            f\"Added relationship: {relationship.ty..."
            },
            {
              "line_number": 336,
              "length": 115,
              "content": "                f\"Adding inverse relationship: {in..."
            }
          ],
          "issues": [
            "Found 6 lines exceeding 80 characters",
            "  Line 21: 83 chars",
            "  Line 225: 83 chars",
            "  Line 297: 93 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 6
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 26.369168356997974,
          "comment_lines": 130,
          "code_lines": 363,
          "issues": [],
          "recommendations": [],
          "metric": 26.369168356997974
        },
        "module_size": {
          "compliant": false,
          "module_size": 599,
          "issues": [
            "Module size 599 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 599
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 16,
          "functions_with_docstrings": 16,
          "classes": 3,
          "classes_with_docstrings": 3,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 73.68421052631578,
      "issues": [
        "Found 6 lines exceeding 80 characters",
        "  Line 21: 83 chars",
        "  Line 225: 83 chars",
        "  Line 297: 93 chars",
        "Module size 599 lines exceeds maximum 300 lines"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files"
      ],
      "priority": "low"
    },
    {
      "path": "core/periodic_table/simple_relationships.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/periodic_table/simple_relationships.py",
      "total_lines": 342,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 22,
              "length": 82,
              "content": "Adversary Task model, focusing on string-based rel..."
            },
            {
              "line_number": 153,
              "length": 93,
              "content": "            skip_inverse: Whether to skip creating..."
            },
            {
              "line_number": 167,
              "length": 129,
              "content": "                f\"Skipping duplicate relationship:..."
            },
            {
              "line_number": 211,
              "length": 86,
              "content": "            # Add inverse relationship with skip_i..."
            }
          ],
          "issues": [
            "Found 4 lines exceeding 80 characters",
            "  Line 22: 82 chars",
            "  Line 153: 93 chars",
            "  Line 167: 129 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 4
        },
        "comment_density": {
          "compliant": false,
          "comment_density": 13.85135135135135,
          "comment_lines": 41,
          "code_lines": 255,
          "issues": [
            "Comment density 13.9% below minimum 15.0%",
            "  Comment lines: 41, Code lines: 255"
          ],
          "recommendations": [
            "Add more comments to explain complex logic and functions"
          ],
          "metric": 13.85135135135135
        },
        "module_size": {
          "compliant": false,
          "module_size": 342,
          "issues": [
            "Module size 342 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 342
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 10,
          "functions_with_docstrings": 10,
          "classes": 2,
          "classes_with_docstrings": 2,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 75.14777935830567,
      "issues": [
        "Found 4 lines exceeding 80 characters",
        "  Line 22: 82 chars",
        "  Line 153: 93 chars",
        "  Line 167: 129 chars",
        "Comment density 13.9% below minimum 15.0%",
        "  Comment lines: 41, Code lines: 255",
        "Module size 342 lines exceeds maximum 300 lines"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Add more comments to explain complex logic and functions",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files"
      ],
      "priority": "low"
    },
    {
      "path": "core/periodic_table/table.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/periodic_table/table.py",
      "total_lines": 915,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 106,
              "length": 136,
              "content": "            <div style=\"font-size: 0.8em; color: {..."
            },
            {
              "line_number": 152,
              "length": 90,
              "content": "        <div style=\"border: 3px solid {border_colo..."
            },
            {
              "line_number": 155,
              "length": 92,
              "content": "            <div style=\"display: flex; justify-con..."
            },
            {
              "line_number": 156,
              "length": 108,
              "content": "                <div style=\"background-color: rgba..."
            },
            {
              "line_number": 161,
              "length": 88,
              "content": "            <div style=\"display: flex; justify-con..."
            },
            {
              "line_number": 162,
              "length": 94,
              "content": "                <div style=\"background-color: rgba..."
            },
            {
              "line_number": 163,
              "length": 109,
              "content": "                            border-radius: 8px; di..."
            },
            {
              "line_number": 168,
              "length": 97,
              "content": "                <div style=\"background-color: rgba..."
            },
            {
              "line_number": 169,
              "length": 98,
              "content": "                            text-align: center; bo..."
            },
            {
              "line_number": 174,
              "length": 92,
              "content": "                <div style=\"background-color: rgba..."
            },
            {
              "line_number": 175,
              "length": 109,
              "content": "                            border-radius: 8px; di..."
            },
            {
              "line_number": 181,
              "length": 97,
              "content": "            <div style=\"background-color: rgba(200..."
            },
            {
              "line_number": 182,
              "length": 110,
              "content": "                        margin: 10px 0; border-rad..."
            },
            {
              "line_number": 186,
              "length": 97,
              "content": "            <div style=\"background-color: rgba(255..."
            },
            {
              "line_number": 411,
              "length": 193,
              "content": "                        hovertemplate=\"<b>%{text}<..."
            },
            {
              "line_number": 440,
              "length": 108,
              "content": "                        hovertemplate=\"<b>%{text}<..."
            },
            {
              "line_number": 461,
              "length": 120,
              "content": "                        hovertemplate=\"<b>%{text}<..."
            },
            {
              "line_number": 643,
              "length": 84,
              "content": "                        hovertemplate=\"<b>%{text}<..."
            }
          ],
          "issues": [
            "Found 18 lines exceeding 80 characters",
            "  Line 106: 136 chars",
            "  Line 152: 90 chars",
            "  Line 155: 92 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 18
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 18.846153846153847,
          "comment_lines": 147,
          "code_lines": 633,
          "issues": [],
          "recommendations": [],
          "metric": 18.846153846153847
        },
        "module_size": {
          "compliant": false,
          "module_size": 915,
          "issues": [
            "Module size 915 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 915
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 92.85714285714286,
          "functions": 12,
          "functions_with_docstrings": 11,
          "classes": 2,
          "classes_with_docstrings": 2,
          "issues": [],
          "recommendations": [],
          "metric": 92.85714285714286
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": false,
          "complexity_issues": [
            "Function 'create_network_graph' has high complexity (12 decision points)",
            "Function '_force_atlas2_layout' has high complexity (14 decision points)"
          ],
          "issues": [
            "Function 'create_network_graph' has high complexity (12 decision points)",
            "Function '_force_atlas2_layout' has high complexity (14 decision points)"
          ],
          "recommendations": [
            "Break complex functions into smaller, focused functions",
            "Extract complex logic into separate methods or classes"
          ],
          "metric": 2
        }
      },
      "overall_compliant": false,
      "compliance_score": 65.78947368421052,
      "issues": [
        "Found 18 lines exceeding 80 characters",
        "  Line 106: 136 chars",
        "  Line 152: 90 chars",
        "  Line 155: 92 chars",
        "Module size 915 lines exceeds maximum 300 lines",
        "Function 'create_network_graph' has high complexity (12 decision points)",
        "Function '_force_atlas2_layout' has high complexity (14 decision points)"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files",
        "Break complex functions into smaller, focused functions",
        "Extract complex logic into separate methods or classes"
      ],
      "priority": "low"
    },
    {
      "path": "core/periodic_table/task_loader.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/periodic_table/task_loader.py",
      "total_lines": 328,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 298,
              "length": 97,
              "content": "            description=f\"Example task for demonst..."
            },
            {
              "line_number": 299,
              "length": 84,
              "content": "            capabilities=f\"This task demonstrates ..."
            },
            {
              "line_number": 300,
              "length": 88,
              "content": "            limitations=f\"This is a demo task with..."
            },
            {
              "line_number": 306,
              "length": 99,
              "content": "            relationships=f\"This task connects to ..."
            },
            {
              "line_number": 311,
              "length": 92,
              "content": "            historical_reference=f\"This is a refer..."
            }
          ],
          "issues": [
            "Found 5 lines exceeding 80 characters",
            "  Line 298: 97 chars",
            "  Line 299: 84 chars",
            "  Line 300: 88 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 5
        },
        "comment_density": {
          "compliant": false,
          "comment_density": 8.96551724137931,
          "comment_lines": 26,
          "code_lines": 264,
          "issues": [
            "Comment density 9.0% below minimum 15.0%",
            "  Comment lines: 26, Code lines: 264"
          ],
          "recommendations": [
            "Add more comments to explain complex logic and functions"
          ],
          "metric": 8.96551724137931
        },
        "module_size": {
          "compliant": false,
          "module_size": 328,
          "issues": [
            "Module size 328 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 328
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 4,
          "functions_with_docstrings": 4,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 74.34563420044363,
      "issues": [
        "Found 5 lines exceeding 80 characters",
        "  Line 298: 97 chars",
        "  Line 299: 84 chars",
        "  Line 300: 88 chars",
        "Comment density 9.0% below minimum 15.0%",
        "  Comment lines: 26, Code lines: 264",
        "Module size 328 lines exceeds maximum 300 lines"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Add more comments to explain complex logic and functions",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files"
      ],
      "priority": "low"
    },
    {
      "path": "core/periodic_table/task_registry.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/periodic_table/task_registry.py",
      "total_lines": 713,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 171,
              "length": 97,
              "content": "                \"CREATE INDEX IF NOT EXISTS idx_re..."
            },
            {
              "line_number": 174,
              "length": 97,
              "content": "                \"CREATE INDEX IF NOT EXISTS idx_re..."
            },
            {
              "line_number": 177,
              "length": 90,
              "content": "                \"CREATE INDEX IF NOT EXISTS idx_re..."
            },
            {
              "line_number": 238,
              "length": 84,
              "content": "        (id, task_id, hash_id, task_name, descript..."
            },
            {
              "line_number": 516,
              "length": 116,
              "content": "                f\"Added relationship: {relationshi..."
            },
            {
              "line_number": 561,
              "length": 82,
              "content": "            # Add to relationship manager (skip DB..."
            },
            {
              "line_number": 567,
              "length": 96,
              "content": "            f\"Loaded {len(self.relationship_manage..."
            },
            {
              "line_number": 671,
              "length": 85,
              "content": "        Get a task by its UUID string (for compati..."
            },
            {
              "line_number": 686,
              "length": 91,
              "content": "        Get all tasks formatted as elements (for c..."
            }
          ],
          "issues": [
            "Found 9 lines exceeding 80 characters",
            "  Line 171: 97 chars",
            "  Line 174: 97 chars",
            "  Line 177: 90 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 9
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 25.301204819277107,
          "comment_lines": 147,
          "code_lines": 434,
          "issues": [],
          "recommendations": [],
          "metric": 25.301204819277107
        },
        "module_size": {
          "compliant": false,
          "module_size": 713,
          "issues": [
            "Module size 713 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 713
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 20,
          "functions_with_docstrings": 20,
          "classes": 1,
          "classes_with_docstrings": 1,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 73.68421052631578,
      "issues": [
        "Found 9 lines exceeding 80 characters",
        "  Line 171: 97 chars",
        "  Line 174: 97 chars",
        "  Line 177: 90 chars",
        "Module size 713 lines exceeds maximum 300 lines"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files"
      ],
      "priority": "low"
    },
    {
      "path": "core/plugin_loader.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/plugin_loader.py",
      "total_lines": 663,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 109,
              "length": 82,
              "content": "                \"Plugin manager is not available. ..."
            },
            {
              "line_number": 390,
              "length": 85,
              "content": "                \"Plugin system not available. Cann..."
            }
          ],
          "issues": [
            "Found 2 lines exceeding 80 characters",
            "  Line 109: 82 chars",
            "  Line 390: 85 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 2
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 57.4430823117338,
          "comment_lines": 328,
          "code_lines": 243,
          "issues": [],
          "recommendations": [],
          "metric": 57.4430823117338
        },
        "module_size": {
          "compliant": false,
          "module_size": 663,
          "issues": [
            "Module size 663 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 663
        },
        "docstrings": {
          "compliant": false,
          "docstring_coverage": 78.57142857142857,
          "functions": 10,
          "functions_with_docstrings": 10,
          "classes": 4,
          "classes_with_docstrings": 1,
          "issues": [
            "Docstring coverage 78.6% below minimum 80.0%",
            "  Functions: 10/10 with docstrings",
            "  Classes: 1/4 with docstrings"
          ],
          "recommendations": [
            "Add docstrings to all functions and classes",
            "Use clear, descriptive docstrings following Google or NumPy style"
          ],
          "metric": 78.57142857142857
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 73.37092731829574,
      "issues": [
        "Found 2 lines exceeding 80 characters",
        "  Line 109: 82 chars",
        "  Line 390: 85 chars",
        "Module size 663 lines exceeds maximum 300 lines",
        "Docstring coverage 78.6% below minimum 80.0%",
        "  Functions: 10/10 with docstrings",
        "  Classes: 1/4 with docstrings"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files",
        "Add docstrings to all functions and classes",
        "Use clear, descriptive docstrings following Google or NumPy style"
      ],
      "priority": "low"
    },
    {
      "path": "core/plugins/plugin_base.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/plugins/plugin_base.py",
      "total_lines": 836,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 497,
              "length": 95,
              "content": "                                        f\"Discover..."
            },
            {
              "line_number": 505,
              "length": 93,
              "content": "                                    f\"Error instan..."
            },
            {
              "line_number": 616,
              "length": 90,
              "content": "                f\"Successfully activated plugin: {..."
            }
          ],
          "issues": [
            "Found 3 lines exceeding 80 characters",
            "  Line 497: 95 chars",
            "  Line 505: 93 chars",
            "  Line 616: 90 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 3
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 60.24759284731774,
          "comment_lines": 438,
          "code_lines": 289,
          "issues": [],
          "recommendations": [],
          "metric": 60.24759284731774
        },
        "module_size": {
          "compliant": false,
          "module_size": 836,
          "issues": [
            "Module size 836 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 836
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 13,
          "functions_with_docstrings": 13,
          "classes": 5,
          "classes_with_docstrings": 5,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 73.68421052631578,
      "issues": [
        "Found 3 lines exceeding 80 characters",
        "  Line 497: 95 chars",
        "  Line 505: 93 chars",
        "  Line 616: 90 chars",
        "Module size 836 lines exceeds maximum 300 lines"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files"
      ],
      "priority": "low"
    },
    {
      "path": "core/registry.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/registry.py",
      "total_lines": 1939,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 199,
              "length": 83,
              "content": "    def _store_metadata(self, key: K, metadata: Op..."
            },
            {
              "line_number": 663,
              "length": 90,
              "content": "    def _has_category(self, metadata: FeatureMetad..."
            },
            {
              "line_number": 708,
              "length": 88,
              "content": "    def _filter_items_by_category(self, category: ..."
            },
            {
              "line_number": 723,
              "length": 84,
              "content": "        category_predicate = lambda metadata: self..."
            },
            {
              "line_number": 762,
              "length": 89,
              "content": "    def _check_metadata_match(self, metadata: Feat..."
            },
            {
              "line_number": 781,
              "length": 94,
              "content": "    def _create_search_predicate(self, query_lower..."
            },
            {
              "line_number": 795,
              "length": 81,
              "content": "        return lambda metadata: self._check_metada..."
            }
          ],
          "issues": [
            "Found 7 lines exceeding 80 characters",
            "  Line 199: 83 chars",
            "  Line 663: 90 chars",
            "  Line 708: 88 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 7
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 57.8009828009828,
          "comment_lines": 941,
          "code_lines": 687,
          "issues": [],
          "recommendations": [],
          "metric": 57.8009828009828
        },
        "module_size": {
          "compliant": false,
          "module_size": 1939,
          "issues": [
            "Module size 1939 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 1939
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 61,
          "functions_with_docstrings": 61,
          "classes": 5,
          "classes_with_docstrings": 5,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 73.68421052631578,
      "issues": [
        "Found 7 lines exceeding 80 characters",
        "  Line 199: 83 chars",
        "  Line 663: 90 chars",
        "  Line 708: 88 chars",
        "Module size 1939 lines exceeds maximum 300 lines"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files"
      ],
      "priority": "low"
    },
    {
      "path": "core/security/__init__.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/security/__init__.py",
      "total_lines": 57,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": false,
          "comment_density": 3.8461538461538463,
          "comment_lines": 2,
          "code_lines": 50,
          "issues": [
            "Comment density 3.8% below minimum 15.0%",
            "  Comment lines: 2, Code lines: 50"
          ],
          "recommendations": [
            "Add more comments to explain complex logic and functions"
          ],
          "metric": 3.8461538461538463
        },
        "module_size": {
          "compliant": true,
          "module_size": 57,
          "issues": [],
          "recommendations": [],
          "metric": 57
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100,
          "functions": 0,
          "functions_with_docstrings": 0,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 86.95456590193432,
      "issues": [
        "Comment density 3.8% below minimum 15.0%",
        "  Comment lines: 2, Code lines: 50"
      ],
      "recommendations": [
        "Add more comments to explain complex logic and functions"
      ],
      "priority": "low"
    },
    {
      "path": "core/security/kali_integrator.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/security/kali_integrator.py",
      "total_lines": 1058,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 50.66225165562914,
          "comment_lines": 459,
          "code_lines": 447,
          "issues": [],
          "recommendations": [],
          "metric": 50.66225165562914
        },
        "module_size": {
          "compliant": false,
          "module_size": 1058,
          "issues": [
            "Module size 1058 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 1058
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 18,
          "functions_with_docstrings": 18,
          "classes": 3,
          "classes_with_docstrings": 3,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 82.45614035087719,
      "issues": [
        "Module size 1058 lines exceeds maximum 300 lines"
      ],
      "recommendations": [
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files"
      ],
      "priority": "low"
    },
    {
      "path": "core/soc_teams/__init__.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/soc_teams/__init__.py",
      "total_lines": 1,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 100.0,
          "comment_lines": 1,
          "code_lines": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "module_size": {
          "compliant": true,
          "module_size": 1,
          "issues": [],
          "recommendations": [],
          "metric": 1
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100,
          "functions": 0,
          "functions_with_docstrings": 0,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 100.0,
      "issues": [],
      "recommendations": [],
      "priority": "low"
    },
    {
      "path": "core/soc_teams/team_a/__init__.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/soc_teams/team_a/__init__.py",
      "total_lines": 1,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 100.0,
          "comment_lines": 1,
          "code_lines": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "module_size": {
          "compliant": true,
          "module_size": 1,
          "issues": [],
          "recommendations": [],
          "metric": 1
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100,
          "functions": 0,
          "functions_with_docstrings": 0,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 100.0,
      "issues": [],
      "recommendations": [],
      "priority": "low"
    },
    {
      "path": "core/soc_teams/team_a/handlers.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/soc_teams/team_a/handlers.py",
      "total_lines": 1,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 100.0,
          "comment_lines": 1,
          "code_lines": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "module_size": {
          "compliant": true,
          "module_size": 1,
          "issues": [],
          "recommendations": [],
          "metric": 1
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100,
          "functions": 0,
          "functions_with_docstrings": 0,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 100.0,
      "issues": [],
      "recommendations": [],
      "priority": "low"
    },
    {
      "path": "core/soc_teams/team_a/utils.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/soc_teams/team_a/utils.py",
      "total_lines": 1,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 100.0,
          "comment_lines": 1,
          "code_lines": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "module_size": {
          "compliant": true,
          "module_size": 1,
          "issues": [],
          "recommendations": [],
          "metric": 1
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100,
          "functions": 0,
          "functions_with_docstrings": 0,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 100.0,
      "issues": [],
      "recommendations": [],
      "priority": "low"
    },
    {
      "path": "core/soc_teams/team_b/__init__.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/soc_teams/team_b/__init__.py",
      "total_lines": 1,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 100.0,
          "comment_lines": 1,
          "code_lines": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "module_size": {
          "compliant": true,
          "module_size": 1,
          "issues": [],
          "recommendations": [],
          "metric": 1
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100,
          "functions": 0,
          "functions_with_docstrings": 0,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 100.0,
      "issues": [],
      "recommendations": [],
      "priority": "low"
    },
    {
      "path": "core/soc_teams/team_b/handlers.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/soc_teams/team_b/handlers.py",
      "total_lines": 1,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 100.0,
          "comment_lines": 1,
          "code_lines": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "module_size": {
          "compliant": true,
          "module_size": 1,
          "issues": [],
          "recommendations": [],
          "metric": 1
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100,
          "functions": 0,
          "functions_with_docstrings": 0,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 100.0,
      "issues": [],
      "recommendations": [],
      "priority": "low"
    },
    {
      "path": "core/soc_teams/team_b/utils.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/soc_teams/team_b/utils.py",
      "total_lines": 1,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 100.0,
          "comment_lines": 1,
          "code_lines": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "module_size": {
          "compliant": true,
          "module_size": 1,
          "issues": [],
          "recommendations": [],
          "metric": 1
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100,
          "functions": 0,
          "functions_with_docstrings": 0,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 100.0,
      "issues": [],
      "recommendations": [],
      "priority": "low"
    },
    {
      "path": "core/soc_teams/team_c/__init__.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/soc_teams/team_c/__init__.py",
      "total_lines": 1,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 100.0,
          "comment_lines": 1,
          "code_lines": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "module_size": {
          "compliant": true,
          "module_size": 1,
          "issues": [],
          "recommendations": [],
          "metric": 1
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100,
          "functions": 0,
          "functions_with_docstrings": 0,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 100.0,
      "issues": [],
      "recommendations": [],
      "priority": "low"
    },
    {
      "path": "core/soc_teams/team_c/handlers.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/soc_teams/team_c/handlers.py",
      "total_lines": 1,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 100.0,
          "comment_lines": 1,
          "code_lines": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "module_size": {
          "compliant": true,
          "module_size": 1,
          "issues": [],
          "recommendations": [],
          "metric": 1
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100,
          "functions": 0,
          "functions_with_docstrings": 0,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 100.0,
      "issues": [],
      "recommendations": [],
      "priority": "low"
    },
    {
      "path": "core/soc_teams/team_c/utils.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/soc_teams/team_c/utils.py",
      "total_lines": 1,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 100.0,
          "comment_lines": 1,
          "code_lines": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "module_size": {
          "compliant": true,
          "module_size": 1,
          "issues": [],
          "recommendations": [],
          "metric": 1
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100,
          "functions": 0,
          "functions_with_docstrings": 0,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 100.0,
      "issues": [],
      "recommendations": [],
      "priority": "low"
    },
    {
      "path": "core/storyteller/__init__.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/storyteller/__init__.py",
      "total_lines": 46,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": false,
          "comment_density": 4.761904761904762,
          "comment_lines": 2,
          "code_lines": 40,
          "issues": [
            "Comment density 4.8% below minimum 15.0%",
            "  Comment lines: 2, Code lines: 40"
          ],
          "recommendations": [
            "Add more comments to explain complex logic and functions"
          ],
          "metric": 4.761904761904762
        },
        "module_size": {
          "compliant": true,
          "module_size": 46,
          "issues": [],
          "recommendations": [],
          "metric": 46
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100,
          "functions": 0,
          "functions_with_docstrings": 0,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 88.02561960456697,
      "issues": [
        "Comment density 4.8% below minimum 15.0%",
        "  Comment lines: 2, Code lines: 40"
      ],
      "recommendations": [
        "Add more comments to explain complex logic and functions"
      ],
      "priority": "low"
    },
    {
      "path": "core/storyteller/real_time_tracker.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/storyteller/real_time_tracker.py",
      "total_lines": 661,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 160,
              "length": 82,
              "content": "                \"No elements in the timeline. Add ..."
            },
            {
              "line_number": 449,
              "length": 118,
              "content": "                <div style=\"border-left: 4px solid..."
            },
            {
              "line_number": 451,
              "length": 98,
              "content": "                <p style=\"margin: 5px 0; color: #6..."
            },
            {
              "line_number": 453,
              "length": 101,
              "content": "                <span style=\"font-size: 0.8em; col..."
            },
            {
              "line_number": 454,
              "length": 97,
              "content": "                <span style=\"font-size: 0.8em; col..."
            },
            {
              "line_number": 455,
              "length": 123,
              "content": "                <span style=\"font-size: 0.8em; col..."
            },
            {
              "line_number": 516,
              "length": 90,
              "content": "                    <div style=\"display: flex; ali..."
            },
            {
              "line_number": 517,
              "length": 120,
              "content": "                    <div style=\"background-color: ..."
            },
            {
              "line_number": 518,
              "length": 108,
              "content": "                          display: flex; align-ite..."
            },
            {
              "line_number": 522,
              "length": 84,
              "content": "                        <div style=\"display: flex;..."
            },
            {
              "line_number": 524,
              "length": 91,
              "content": "                            <span style=\"color: #8..."
            },
            {
              "line_number": 526,
              "length": 112,
              "content": "                        <div style=\"color: #666; f..."
            },
            {
              "line_number": 528,
              "length": 118,
              "content": "                            <span style=\"backgroun..."
            },
            {
              "line_number": 532,
              "length": 114,
              "content": "                            <span style=\"backgroun..."
            },
            {
              "line_number": 533,
              "length": 92,
              "content": "                                  font-size: 0.7em..."
            },
            {
              "line_number": 652,
              "length": 82,
              "content": "                    f\"**{element_type}**: {counts[..."
            }
          ],
          "issues": [
            "Found 16 lines exceeding 80 characters",
            "  Line 160: 82 chars",
            "  Line 449: 118 chars",
            "  Line 451: 98 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 16
        },
        "comment_density": {
          "compliant": false,
          "comment_density": 14.136125654450263,
          "comment_lines": 81,
          "code_lines": 492,
          "issues": [
            "Comment density 14.1% below minimum 15.0%",
            "  Comment lines: 81, Code lines: 492"
          ],
          "recommendations": [
            "Add more comments to explain complex logic and functions"
          ],
          "metric": 14.136125654450263
        },
        "module_size": {
          "compliant": false,
          "module_size": 661,
          "issues": [
            "Module size 661 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 661
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 7,
          "functions_with_docstrings": 7,
          "classes": 1,
          "classes_with_docstrings": 1,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 72.67383117479564,
      "issues": [
        "Found 16 lines exceeding 80 characters",
        "  Line 160: 82 chars",
        "  Line 449: 118 chars",
        "  Line 451: 98 chars",
        "Comment density 14.1% below minimum 15.0%",
        "  Comment lines: 81, Code lines: 492",
        "Module size 661 lines exceeds maximum 300 lines"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Add more comments to explain complex logic and functions",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files"
      ],
      "priority": "low"
    },
    {
      "path": "core/storyteller/story_elements.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/storyteller/story_elements.py",
      "total_lines": 378,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 32.79742765273312,
          "comment_lines": 102,
          "code_lines": 209,
          "issues": [],
          "recommendations": [],
          "metric": 32.79742765273312
        },
        "module_size": {
          "compliant": false,
          "module_size": 378,
          "issues": [
            "Module size 378 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 378
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 10,
          "functions_with_docstrings": 10,
          "classes": 5,
          "classes_with_docstrings": 5,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 82.45614035087719,
      "issues": [
        "Module size 378 lines exceeds maximum 300 lines"
      ],
      "recommendations": [
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files"
      ],
      "priority": "low"
    },
    {
      "path": "core/storyteller/workflow_progress.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/storyteller/workflow_progress.py",
      "total_lines": 1333,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 595,
              "length": 130,
              "content": "                    hovertext=f\"{row['title']} ({r..."
            },
            {
              "line_number": 838,
              "length": 84,
              "content": "            f\"Showing {len(filtered_elements)} of ..."
            },
            {
              "line_number": 873,
              "length": 83,
              "content": "                        f\"**Time:** {element.times..."
            },
            {
              "line_number": 1049,
              "length": 114,
              "content": "                    f\"<div style='padding: 10px; m..."
            },
            {
              "line_number": 1050,
              "length": 107,
              "content": "                    f\"<span style='font-weight: bo..."
            },
            {
              "line_number": 1051,
              "length": 123,
              "content": "                    f\"{milestone.title} <span styl..."
            },
            {
              "line_number": 1052,
              "length": 85,
              "content": "                    f\"<span style='font-size: 0.9e..."
            },
            {
              "line_number": 1194,
              "length": 84,
              "content": "                                f\"Added new {eleme..."
            },
            {
              "line_number": 1226,
              "length": 82,
              "content": "                    f\"**Description:** {selected_t..."
            },
            {
              "line_number": 1249,
              "length": 81,
              "content": "                                f\"Deleted timeline..."
            },
            {
              "line_number": 1323,
              "length": 95,
              "content": "                    \"No timeline loaded. Create or..."
            }
          ],
          "issues": [
            "Found 11 lines exceeding 80 characters",
            "  Line 595: 130 chars",
            "  Line 838: 84 chars",
            "  Line 873: 83 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 11
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 33.84879725085911,
          "comment_lines": 394,
          "code_lines": 770,
          "issues": [],
          "recommendations": [],
          "metric": 33.84879725085911
        },
        "module_size": {
          "compliant": false,
          "module_size": 1333,
          "issues": [
            "Module size 1333 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 1333
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 14,
          "functions_with_docstrings": 14,
          "classes": 1,
          "classes_with_docstrings": 1,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": false,
          "complexity_issues": [
            "Function 'create_timeline_editor' has high complexity (15 decision points)"
          ],
          "issues": [
            "Function 'create_timeline_editor' has high complexity (15 decision points)"
          ],
          "recommendations": [
            "Break complex functions into smaller, focused functions",
            "Extract complex logic into separate methods or classes"
          ],
          "metric": 1
        }
      },
      "overall_compliant": false,
      "compliance_score": 65.78947368421052,
      "issues": [
        "Found 11 lines exceeding 80 characters",
        "  Line 595: 130 chars",
        "  Line 838: 84 chars",
        "  Line 873: 83 chars",
        "Module size 1333 lines exceeds maximum 300 lines",
        "Function 'create_timeline_editor' has high complexity (15 decision points)"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files",
        "Break complex functions into smaller, focused functions",
        "Extract complex logic into separate methods or classes"
      ],
      "priority": "low"
    },
    {
      "path": "core/triptych/__init__.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/triptych/__init__.py",
      "total_lines": 10,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 5,
              "length": 87,
              "content": "This module provides the core identity and cogniti..."
            }
          ],
          "issues": [
            "Found 1 lines exceeding 80 characters",
            "  Line 5: 87 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 1
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 25.0,
          "comment_lines": 2,
          "code_lines": 6,
          "issues": [],
          "recommendations": [],
          "metric": 25.0
        },
        "module_size": {
          "compliant": true,
          "module_size": 10,
          "issues": [],
          "recommendations": [],
          "metric": 10
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100,
          "functions": 0,
          "functions_with_docstrings": 0,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 91.22807017543859,
      "issues": [
        "Found 1 lines exceeding 80 characters",
        "  Line 5: 87 chars"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation"
      ],
      "priority": "low"
    },
    {
      "path": "core/triptych/client.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/triptych/client.py",
      "total_lines": 433,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 24,
              "length": 82,
              "content": "    This client provides methods for creating and ..."
            },
            {
              "line_number": 335,
              "length": 83,
              "content": "        # In a real implementation, we would have ..."
            },
            {
              "line_number": 386,
              "length": 86,
              "content": "                f\"Would update transition readines..."
            }
          ],
          "issues": [
            "Found 3 lines exceeding 80 characters",
            "  Line 24: 82 chars",
            "  Line 335: 83 chars",
            "  Line 386: 86 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 3
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 20.34383954154728,
          "comment_lines": 71,
          "code_lines": 278,
          "issues": [],
          "recommendations": [],
          "metric": 20.34383954154728
        },
        "module_size": {
          "compliant": false,
          "module_size": 433,
          "issues": [
            "Module size 433 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 433
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 14,
          "functions_with_docstrings": 14,
          "classes": 1,
          "classes_with_docstrings": 1,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 73.68421052631578,
      "issues": [
        "Found 3 lines exceeding 80 characters",
        "  Line 24: 82 chars",
        "  Line 335: 83 chars",
        "  Line 386: 86 chars",
        "Module size 433 lines exceeds maximum 300 lines"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files"
      ],
      "priority": "low"
    },
    {
      "path": "core/triptych/models.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/triptych/models.py",
      "total_lines": 495,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 130,
              "length": 94,
              "content": "        return f\"UUID(id={self.uuid_id}, namespace..."
            },
            {
              "line_number": 396,
              "length": 135,
              "content": "        return f\"SCH(id={self.sch_id}, domain={sel..."
            }
          ],
          "issues": [
            "Found 2 lines exceeding 80 characters",
            "  Line 130: 94 chars",
            "  Line 396: 135 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 2
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 16.458852867830423,
          "comment_lines": 66,
          "code_lines": 335,
          "issues": [],
          "recommendations": [],
          "metric": 16.458852867830423
        },
        "module_size": {
          "compliant": false,
          "module_size": 495,
          "issues": [
            "Module size 495 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 495
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 33,
          "functions_with_docstrings": 33,
          "classes": 4,
          "classes_with_docstrings": 4,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 73.68421052631578,
      "issues": [
        "Found 2 lines exceeding 80 characters",
        "  Line 130: 94 chars",
        "  Line 396: 135 chars",
        "Module size 495 lines exceeds maximum 300 lines"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files"
      ],
      "priority": "low"
    },
    {
      "path": "core/web_intelligence/media_outlets_processor.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/web_intelligence/media_outlets_processor.py",
      "total_lines": 1728,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 165,
              "length": 148,
              "content": "                \"User-Agent\": \"Mozilla/5.0 (Window..."
            },
            {
              "line_number": 166,
              "length": 103,
              "content": "                \"Accept\": \"text/html,application/x..."
            },
            {
              "line_number": 174,
              "length": 81,
              "content": "            f\"Initialized MediaOutletsProcessor wi..."
            },
            {
              "line_number": 393,
              "length": 100,
              "content": "                        # Parse article selectors ..."
            },
            {
              "line_number": 406,
              "length": 99,
              "content": "                        # Parse social media links..."
            },
            {
              "line_number": 421,
              "length": 83,
              "content": "                        f\"Error importing outlet {..."
            },
            {
              "line_number": 454,
              "length": 85,
              "content": "                reliability_score, bias_rating, ac..."
            },
            {
              "line_number": 511,
              "length": 104,
              "content": "                INSERT INTO outlet_selectors (outl..."
            },
            {
              "line_number": 520,
              "length": 91,
              "content": "                INSERT INTO outlet_social_media (o..."
            },
            {
              "line_number": 604,
              "length": 97,
              "content": "                \"SELECT selector_type, selector_va..."
            },
            {
              "line_number": 613,
              "length": 84,
              "content": "                \"SELECT platform, url FROM outlet_..."
            },
            {
              "line_number": 1138,
              "length": 81,
              "content": "                    # For each position, get conte..."
            },
            {
              "line_number": 1148,
              "length": 81,
              "content": "                            outlet_id=\"\",  # Will ..."
            },
            {
              "line_number": 1418,
              "length": 90,
              "content": "                        category=outlet.category, ..."
            },
            {
              "line_number": 1419,
              "length": 87,
              "content": "                        country=outlet.country,  #..."
            },
            {
              "line_number": 1433,
              "length": 89,
              "content": "                f\"Discovered {len(discovered_outle..."
            },
            {
              "line_number": 1457,
              "length": 83,
              "content": "            keywords: List of keywords to monitor ..."
            },
            {
              "line_number": 1671,
              "length": 99,
              "content": "            query = f\"UPDATE content_matches SET e..."
            }
          ],
          "issues": [
            "Found 18 lines exceeding 80 characters",
            "  Line 165: 148 chars",
            "  Line 166: 103 chars",
            "  Line 174: 81 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 18
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 21.163279607568324,
          "comment_lines": 302,
          "code_lines": 1125,
          "issues": [],
          "recommendations": [],
          "metric": 21.163279607568324
        },
        "module_size": {
          "compliant": false,
          "module_size": 1728,
          "issues": [
            "Module size 1728 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 1728
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 22,
          "functions_with_docstrings": 22,
          "classes": 4,
          "classes_with_docstrings": 4,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": false,
          "complexity_issues": [
            "Function 'import_outlets_from_excel' has high complexity (14 decision points)",
            "Function 'extract_content_from_url' has high complexity (29 decision points)",
            "Function 'scan_content_for_keywords' has high complexity (11 decision points)"
          ],
          "issues": [
            "Function 'import_outlets_from_excel' has high complexity (14 decision points)",
            "Function 'extract_content_from_url' has high complexity (29 decision points)",
            "Function 'scan_content_for_keywords' has high complexity (11 decision points)"
          ],
          "recommendations": [
            "Break complex functions into smaller, focused functions",
            "Extract complex logic into separate methods or classes"
          ],
          "metric": 3
        }
      },
      "overall_compliant": false,
      "compliance_score": 65.78947368421052,
      "issues": [
        "Found 18 lines exceeding 80 characters",
        "  Line 165: 148 chars",
        "  Line 166: 103 chars",
        "  Line 174: 81 chars",
        "Module size 1728 lines exceeds maximum 300 lines",
        "Function 'import_outlets_from_excel' has high complexity (14 decision points)",
        "Function 'extract_content_from_url' has high complexity (29 decision points)",
        "Function 'scan_content_for_keywords' has high complexity (11 decision points)"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files",
        "Break complex functions into smaller, focused functions",
        "Extract complex logic into separate methods or classes"
      ],
      "priority": "low"
    },
    {
      "path": "core/web_intelligence/news_scraper.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/core/web_intelligence/news_scraper.py",
      "total_lines": 855,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 142,
              "length": 132,
              "content": "            or \"Mozilla/5.0 (Windows NT 10.0; Win6..."
            },
            {
              "line_number": 153,
              "length": 81,
              "content": "            f\"Initialized NewsScraper with {len(se..."
            },
            {
              "line_number": 323,
              "length": 81,
              "content": "            NewsArticle object with extracted cont..."
            },
            {
              "line_number": 429,
              "length": 87,
              "content": "                    # Extract images using Beautif..."
            },
            {
              "line_number": 470,
              "length": 93,
              "content": "                    # Extract content - this is a ..."
            },
            {
              "line_number": 786,
              "length": 86,
              "content": "                f\"Analyzed news source {url}: {res..."
            },
            {
              "line_number": 816,
              "length": 88,
              "content": "        # In a real-world scenario, this would use..."
            },
            {
              "line_number": 849,
              "length": 94,
              "content": "            f\"Created news organization database w..."
            }
          ],
          "issues": [
            "Found 8 lines exceeding 80 characters",
            "  Line 142: 132 chars",
            "  Line 153: 81 chars",
            "  Line 323: 81 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 8
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 21.529745042492916,
          "comment_lines": 152,
          "code_lines": 554,
          "issues": [],
          "recommendations": [],
          "metric": 21.529745042492916
        },
        "module_size": {
          "compliant": false,
          "module_size": 855,
          "issues": [
            "Module size 855 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 855
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 13,
          "functions_with_docstrings": 13,
          "classes": 3,
          "classes_with_docstrings": 3,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": false,
          "complexity_issues": [
            "Function 'extract_article_content' has high complexity (24 decision points)"
          ],
          "issues": [
            "Function 'extract_article_content' has high complexity (24 decision points)"
          ],
          "recommendations": [
            "Break complex functions into smaller, focused functions",
            "Extract complex logic into separate methods or classes"
          ],
          "metric": 1
        }
      },
      "overall_compliant": false,
      "compliance_score": 65.78947368421052,
      "issues": [
        "Found 8 lines exceeding 80 characters",
        "  Line 142: 132 chars",
        "  Line 153: 81 chars",
        "  Line 323: 81 chars",
        "Module size 855 lines exceeds maximum 300 lines",
        "Function 'extract_article_content' has high complexity (24 decision points)"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files",
        "Break complex functions into smaller, focused functions",
        "Extract complex logic into separate methods or classes"
      ],
      "priority": "low"
    },
    {
      "path": "database/__init__.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/database/__init__.py",
      "total_lines": 28,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": false,
          "comment_density": 8.0,
          "comment_lines": 2,
          "code_lines": 23,
          "issues": [
            "Comment density 8.0% below minimum 15.0%",
            "  Comment lines: 2, Code lines: 23"
          ],
          "recommendations": [
            "Add more comments to explain complex logic and functions"
          ],
          "metric": 8.0
        },
        "module_size": {
          "compliant": true,
          "module_size": 28,
          "issues": [],
          "recommendations": [],
          "metric": 28
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100,
          "functions": 0,
          "functions_with_docstrings": 0,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 91.81286549707603,
      "issues": [
        "Comment density 8.0% below minimum 15.0%",
        "  Comment lines: 2, Code lines: 23"
      ],
      "recommendations": [
        "Add more comments to explain complex logic and functions"
      ],
      "priority": "low"
    },
    {
      "path": "database/config.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/database/config.py",
      "total_lines": 247,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 213,
              "length": 85,
              "content": "            ValueError: If configuration for the s..."
            }
          ],
          "issues": [
            "Found 1 lines exceeding 80 characters",
            "  Line 213: 85 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 1
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 38.07106598984771,
          "comment_lines": 75,
          "code_lines": 122,
          "issues": [],
          "recommendations": [],
          "metric": 38.07106598984771
        },
        "module_size": {
          "compliant": true,
          "module_size": 247,
          "issues": [],
          "recommendations": [],
          "metric": 247
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 8,
          "functions_with_docstrings": 8,
          "classes": 5,
          "classes_with_docstrings": 5,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 91.22807017543859,
      "issues": [
        "Found 1 lines exceeding 80 characters",
        "  Line 213: 85 chars"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation"
      ],
      "priority": "low"
    },
    {
      "path": "database/factory.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/database/factory.py",
      "total_lines": 165,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 32.83582089552239,
          "comment_lines": 44,
          "code_lines": 90,
          "issues": [],
          "recommendations": [],
          "metric": 32.83582089552239
        },
        "module_size": {
          "compliant": true,
          "module_size": 165,
          "issues": [],
          "recommendations": [],
          "metric": 165
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 6,
          "functions_with_docstrings": 6,
          "classes": 1,
          "classes_with_docstrings": 1,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 100.0,
      "issues": [],
      "recommendations": [],
      "priority": "low"
    },
    {
      "path": "database/mongodb/__init__.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/database/mongodb/__init__.py",
      "total_lines": 25,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": false,
          "comment_density": 9.090909090909092,
          "comment_lines": 2,
          "code_lines": 20,
          "issues": [
            "Comment density 9.1% below minimum 15.0%",
            "  Comment lines: 2, Code lines: 20"
          ],
          "recommendations": [
            "Add more comments to explain complex logic and functions"
          ],
          "metric": 9.090909090909092
        },
        "module_size": {
          "compliant": true,
          "module_size": 25,
          "issues": [],
          "recommendations": [],
          "metric": 25
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100,
          "functions": 0,
          "functions_with_docstrings": 0,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 93.08878256246678,
      "issues": [
        "Comment density 9.1% below minimum 15.0%",
        "  Comment lines: 2, Code lines: 20"
      ],
      "recommendations": [
        "Add more comments to explain complex logic and functions"
      ],
      "priority": "low"
    },
    {
      "path": "database/mongodb/connector.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/database/mongodb/connector.py",
      "total_lines": 528,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 169,
              "length": 87,
              "content": "                f\"Inserted document in {collection..."
            },
            {
              "line_number": 339,
              "length": 81,
              "content": "                f\"Updated {result.modified_count} ..."
            },
            {
              "line_number": 366,
              "length": 81,
              "content": "                f\"Deleted {result.deleted_count} d..."
            },
            {
              "line_number": 393,
              "length": 82,
              "content": "                f\"Deleted {result.deleted_count} d..."
            },
            {
              "line_number": 465,
              "length": 85,
              "content": "            keys: Index keys (either a string or a..."
            }
          ],
          "issues": [
            "Found 5 lines exceeding 80 characters",
            "  Line 169: 87 chars",
            "  Line 339: 81 chars",
            "  Line 366: 81 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 5
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 25.407925407925408,
          "comment_lines": 109,
          "code_lines": 320,
          "issues": [],
          "recommendations": [],
          "metric": 25.407925407925408
        },
        "module_size": {
          "compliant": false,
          "module_size": 528,
          "issues": [
            "Module size 528 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 528
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 18,
          "functions_with_docstrings": 18,
          "classes": 2,
          "classes_with_docstrings": 2,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 73.68421052631578,
      "issues": [
        "Found 5 lines exceeding 80 characters",
        "  Line 169: 87 chars",
        "  Line 339: 81 chars",
        "  Line 366: 81 chars",
        "Module size 528 lines exceeds maximum 300 lines"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files"
      ],
      "priority": "low"
    },
    {
      "path": "database/neo4j/__init__.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/database/neo4j/__init__.py",
      "total_lines": 25,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": false,
          "comment_density": 9.090909090909092,
          "comment_lines": 2,
          "code_lines": 20,
          "issues": [
            "Comment density 9.1% below minimum 15.0%",
            "  Comment lines: 2, Code lines: 20"
          ],
          "recommendations": [
            "Add more comments to explain complex logic and functions"
          ],
          "metric": 9.090909090909092
        },
        "module_size": {
          "compliant": true,
          "module_size": 25,
          "issues": [],
          "recommendations": [],
          "metric": 25
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100,
          "functions": 0,
          "functions_with_docstrings": 0,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 93.08878256246678,
      "issues": [
        "Comment density 9.1% below minimum 15.0%",
        "  Comment lines: 2, Code lines: 20"
      ],
      "recommendations": [
        "Add more comments to explain complex logic and functions"
      ],
      "priority": "low"
    },
    {
      "path": "database/neo4j/connector.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/database/neo4j/connector.py",
      "total_lines": 405,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 386,
              "length": 98,
              "content": "        # Example implementation, needs to be cust..."
            }
          ],
          "issues": [
            "Found 1 lines exceeding 80 characters",
            "  Line 386: 98 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 1
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 27.794561933534744,
          "comment_lines": 92,
          "code_lines": 239,
          "issues": [],
          "recommendations": [],
          "metric": 27.794561933534744
        },
        "module_size": {
          "compliant": false,
          "module_size": 405,
          "issues": [
            "Module size 405 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 405
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 12,
          "functions_with_docstrings": 12,
          "classes": 1,
          "classes_with_docstrings": 1,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 73.68421052631578,
      "issues": [
        "Found 1 lines exceeding 80 characters",
        "  Line 386: 98 chars",
        "Module size 405 lines exceeds maximum 300 lines"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files"
      ],
      "priority": "low"
    },
    {
      "path": "database/rust_crawler_integration.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/database/rust_crawler_integration.py",
      "total_lines": 501,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 68,
              "length": 88,
              "content": "        self.rust_crawler_path = self.project_root..."
            },
            {
              "line_number": 80,
              "length": 85,
              "content": "            logger.warning(\"Rust crawler not found..."
            },
            {
              "line_number": 164,
              "length": 90,
              "content": "                retention_policy=self._get_retenti..."
            },
            {
              "line_number": 178,
              "length": 84,
              "content": "    def _generate_fields_for_struct(self, struct_n..."
            },
            {
              "line_number": 202,
              "length": 82,
              "content": "                {\"name\": \"correlation_id\", \"type\":..."
            },
            {
              "line_number": 205,
              "length": 83,
              "content": "                {\"name\": \"relationship_type\", \"typ..."
            },
            {
              "line_number": 243,
              "length": 97,
              "content": "                \"description\": \"Optimize threat in..."
            },
            {
              "line_number": 244,
              "length": 96,
              "content": "                \"implementation\": \"Use Sled for ho..."
            },
            {
              "line_number": 249,
              "length": 95,
              "content": "                \"implementation\": \"Use spatial ind..."
            },
            {
              "line_number": 253,
              "length": 87,
              "content": "                \"description\": \"Cache behavioral p..."
            },
            {
              "line_number": 254,
              "length": 84,
              "content": "                \"implementation\": \"Use MongoDB wit..."
            },
            {
              "line_number": 258,
              "length": 82,
              "content": "                \"description\": \"Optimize threat co..."
            },
            {
              "line_number": 259,
              "length": 89,
              "content": "                \"implementation\": \"Use Neo4j for r..."
            },
            {
              "line_number": 263,
              "length": 87,
              "content": "                \"description\": \"Create analytics w..."
            },
            {
              "line_number": 264,
              "length": 86,
              "content": "                \"implementation\": \"Use Supabase wi..."
            },
            {
              "line_number": 268,
              "length": 102,
              "content": "    async def _enhance_with_ctas_context(self, rus..."
            },
            {
              "line_number": 281,
              "length": 91,
              "content": "            optimization_count=rust_report[\"optimi..."
            },
            {
              "line_number": 333,
              "length": 81,
              "content": "CREATE INDEX idx_threat_intelligence_timestamp ON ..."
            },
            {
              "line_number": 335,
              "length": 83,
              "content": "CREATE INDEX idx_geospatial_coordinates ON geospat..."
            },
            {
              "line_number": 371,
              "length": 103,
              "content": "db.behavioral_analysis.createIndex({ \"timestamp\": ..."
            },
            {
              "line_number": 400,
              "length": 84,
              "content": "CREATE CONSTRAINT location_id IF NOT EXISTS FOR (l..."
            },
            {
              "line_number": 427,
              "length": 87,
              "content": "CREATE (t:Threat {id: \"threat_001\"})-[:ORIGINATES_..."
            },
            {
              "line_number": 428,
              "length": 86,
              "content": "CREATE (e:Entity {id: \"entity_001\"})-[:LOCATED_AT]..."
            },
            {
              "line_number": 429,
              "length": 89,
              "content": "CREATE (t1:Threat {id: \"threat_001\"})-[:CORRELATES..."
            },
            {
              "line_number": 447,
              "length": 81,
              "content": "DEFINE FIELD created_at ON threat_intelligence TYP..."
            },
            {
              "line_number": 465,
              "length": 82,
              "content": "DEFINE RELATIONSHIP correlates_with ON threat_inte..."
            },
            {
              "line_number": 478,
              "length": 88,
              "content": "    analyzer = CTASDatabaseAnalyzer(\"/Users/cp5337..."
            },
            {
              "line_number": 487,
              "length": 84,
              "content": "    print(f\"\u251c\u2500 SurrealDB candidates: {report.surre..."
            }
          ],
          "issues": [
            "Found 28 lines exceeding 80 characters",
            "  Line 68: 88 chars",
            "  Line 80: 85 chars",
            "  Line 164: 90 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 28
        },
        "comment_density": {
          "compliant": false,
          "comment_density": 8.803611738148984,
          "comment_lines": 39,
          "code_lines": 404,
          "issues": [
            "Comment density 8.8% below minimum 15.0%",
            "  Comment lines: 39, Code lines: 404"
          ],
          "recommendations": [
            "Add more comments to explain complex logic and functions"
          ],
          "metric": 8.803611738148984
        },
        "module_size": {
          "compliant": false,
          "module_size": 501,
          "issues": [
            "Module size 501 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 501
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 92.85714285714286,
          "functions": 9,
          "functions_with_docstrings": 8,
          "classes": 5,
          "classes_with_docstrings": 5,
          "issues": [],
          "recommendations": [],
          "metric": 92.85714285714286
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 66.4369727931567,
      "issues": [
        "Found 28 lines exceeding 80 characters",
        "  Line 68: 88 chars",
        "  Line 80: 85 chars",
        "  Line 164: 90 chars",
        "Comment density 8.8% below minimum 15.0%",
        "  Comment lines: 39, Code lines: 404",
        "Module size 501 lines exceeds maximum 300 lines"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Add more comments to explain complex logic and functions",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files"
      ],
      "priority": "low"
    },
    {
      "path": "database/supabase/__init__.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/database/supabase/__init__.py",
      "total_lines": 25,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": false,
          "comment_density": 9.090909090909092,
          "comment_lines": 2,
          "code_lines": 20,
          "issues": [
            "Comment density 9.1% below minimum 15.0%",
            "  Comment lines: 2, Code lines: 20"
          ],
          "recommendations": [
            "Add more comments to explain complex logic and functions"
          ],
          "metric": 9.090909090909092
        },
        "module_size": {
          "compliant": true,
          "module_size": 25,
          "issues": [],
          "recommendations": [],
          "metric": 25
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100,
          "functions": 0,
          "functions_with_docstrings": 0,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 93.08878256246678,
      "issues": [
        "Comment density 9.1% below minimum 15.0%",
        "  Comment lines: 2, Code lines: 20"
      ],
      "recommendations": [
        "Add more comments to explain complex logic and functions"
      ],
      "priority": "low"
    },
    {
      "path": "database/supabase/connector.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/database/supabase/connector.py",
      "total_lines": 362,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 25.675675675675674,
          "comment_lines": 76,
          "code_lines": 220,
          "issues": [],
          "recommendations": [],
          "metric": 25.675675675675674
        },
        "module_size": {
          "compliant": false,
          "module_size": 362,
          "issues": [
            "Module size 362 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 362
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 11,
          "functions_with_docstrings": 11,
          "classes": 1,
          "classes_with_docstrings": 1,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 82.45614035087719,
      "issues": [
        "Module size 362 lines exceeds maximum 300 lines"
      ],
      "recommendations": [
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files"
      ],
      "priority": "low"
    },
    {
      "path": "database/supabase/thread_safe_connector.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/database/supabase/thread_safe_connector.py",
      "total_lines": 403,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 77,
              "length": 86,
              "content": "        logger.info(\"Thread-safe Supabase connecto..."
            },
            {
              "line_number": 97,
              "length": 82,
              "content": "                        pool_recycle=1800,  # Recy..."
            },
            {
              "line_number": 110,
              "length": 88,
              "content": "                    logger.info(\"Connected to Supa..."
            }
          ],
          "issues": [
            "Found 3 lines exceeding 80 characters",
            "  Line 77: 86 chars",
            "  Line 97: 82 chars",
            "  Line 110: 88 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 3
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 25.225225225225223,
          "comment_lines": 84,
          "code_lines": 249,
          "issues": [],
          "recommendations": [],
          "metric": 25.225225225225223
        },
        "module_size": {
          "compliant": false,
          "module_size": 403,
          "issues": [
            "Module size 403 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 403
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 12,
          "functions_with_docstrings": 12,
          "classes": 1,
          "classes_with_docstrings": 1,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 73.68421052631578,
      "issues": [
        "Found 3 lines exceeding 80 characters",
        "  Line 77: 86 chars",
        "  Line 97: 82 chars",
        "  Line 110: 88 chars",
        "Module size 403 lines exceeds maximum 300 lines"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files"
      ],
      "priority": "low"
    },
    {
      "path": "database/thread_safe_factory.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/database/thread_safe_factory.py",
      "total_lines": 196,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 30,
              "length": 84,
              "content": "from core.database.supabase.thread_safe_connector ..."
            },
            {
              "line_number": 55,
              "length": 98,
              "content": "    def get_instance(cls, config: Optional[Databas..."
            },
            {
              "line_number": 109,
              "length": 83,
              "content": "            if db_type in self.connectors and self..."
            },
            {
              "line_number": 152,
              "length": 98,
              "content": "    def get_neo4j(self) -> Any:  # Will be updated..."
            },
            {
              "line_number": 165,
              "length": 102,
              "content": "    def get_mongodb(self) -> Any:  # Will be updat..."
            },
            {
              "line_number": 193,
              "length": 83,
              "content": "                        logger.error(f\"Error closi..."
            }
          ],
          "issues": [
            "Found 6 lines exceeding 80 characters",
            "  Line 30: 84 chars",
            "  Line 55: 98 chars",
            "  Line 109: 83 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 6
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 33.33333333333333,
          "comment_lines": 53,
          "code_lines": 106,
          "issues": [],
          "recommendations": [],
          "metric": 33.33333333333333
        },
        "module_size": {
          "compliant": true,
          "module_size": 196,
          "issues": [],
          "recommendations": [],
          "metric": 196
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 7,
          "functions_with_docstrings": 7,
          "classes": 1,
          "classes_with_docstrings": 1,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 91.22807017543859,
      "issues": [
        "Found 6 lines exceeding 80 characters",
        "  Line 30: 84 chars",
        "  Line 55: 98 chars",
        "  Line 109: 83 chars"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation"
      ],
      "priority": "low"
    },
    {
      "path": "database/utils.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/database/utils.py",
      "total_lines": 416,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 22.76657060518732,
          "comment_lines": 79,
          "code_lines": 268,
          "issues": [],
          "recommendations": [],
          "metric": 22.76657060518732
        },
        "module_size": {
          "compliant": false,
          "module_size": 416,
          "issues": [
            "Module size 416 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 416
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 9,
          "functions_with_docstrings": 9,
          "classes": 1,
          "classes_with_docstrings": 1,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 82.45614035087719,
      "issues": [
        "Module size 416 lines exceeds maximum 300 lines"
      ],
      "recommendations": [
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files"
      ],
      "priority": "low"
    },
    {
      "path": "main.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/main.py",
      "total_lines": 960,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 162,
              "length": 91,
              "content": "            \"<h1 style='font-size: 1.5rem; margin-..."
            },
            {
              "line_number": 170,
              "length": 82,
              "content": "            <span style=\"font-size: 0.9rem; color:..."
            },
            {
              "line_number": 215,
              "length": 81,
              "content": "            <div style=\"font-size: 0.9rem; font-we..."
            },
            {
              "line_number": 227,
              "length": 85,
              "content": "    <div style=\"display: flex; justify-content: sp..."
            },
            {
              "line_number": 228,
              "length": 122,
              "content": "        <div style=\"background-color: #1A1C24; bor..."
            },
            {
              "line_number": 229,
              "length": 82,
              "content": "            <div style=\"font-size: 0.8rem; color: ..."
            },
            {
              "line_number": 230,
              "length": 86,
              "content": "            <div style=\"font-size: 1.8rem; font-we..."
            },
            {
              "line_number": 231,
              "length": 83,
              "content": "            <div style=\"font-size: 0.8rem; color: ..."
            },
            {
              "line_number": 233,
              "length": 122,
              "content": "        <div style=\"background-color: #1A1C24; bor..."
            },
            {
              "line_number": 234,
              "length": 86,
              "content": "            <div style=\"font-size: 0.8rem; color: ..."
            },
            {
              "line_number": 235,
              "length": 86,
              "content": "            <div style=\"font-size: 1.8rem; font-we..."
            },
            {
              "line_number": 236,
              "length": 81,
              "content": "            <div style=\"font-size: 0.8rem; color: ..."
            },
            {
              "line_number": 238,
              "length": 122,
              "content": "        <div style=\"background-color: #1A1C24; bor..."
            },
            {
              "line_number": 240,
              "length": 92,
              "content": "            <div style=\"font-size: 1.8rem; font-we..."
            },
            {
              "line_number": 241,
              "length": 93,
              "content": "            <div style=\"font-size: 0.8rem; color: ..."
            },
            {
              "line_number": 243,
              "length": 122,
              "content": "        <div style=\"background-color: #1A1C24; bor..."
            },
            {
              "line_number": 245,
              "length": 95,
              "content": "            <div style=\"font-size: 1.8rem; font-we..."
            },
            {
              "line_number": 246,
              "length": 85,
              "content": "            <div style=\"font-size: 0.8rem; color: ..."
            },
            {
              "line_number": 425,
              "length": 154,
              "content": "        hovertemplate=\"<b>%{customdata[0]}</b><br>..."
            },
            {
              "line_number": 487,
              "length": 109,
              "content": "            \"details\": \"Multiple failed authentica..."
            },
            {
              "line_number": 498,
              "length": 83,
              "content": "            \"details\": \"Unauthorized access to sec..."
            },
            {
              "line_number": 509,
              "length": 86,
              "content": "            \"details\": \"Large outbound data transf..."
            },
            {
              "line_number": 520,
              "length": 94,
              "content": "            \"details\": \"Unusual connection pattern..."
            },
            {
              "line_number": 531,
              "length": 90,
              "content": "            \"details\": \"Badge reader detected inva..."
            },
            {
              "line_number": 542,
              "length": 96,
              "content": "            \"details\": \"Phone call to help desk re..."
            },
            {
              "line_number": 576,
              "length": 172,
              "content": "            severity_badge = \"<span style='backgro..."
            },
            {
              "line_number": 578,
              "length": 176,
              "content": "            severity_badge = \"<span style='backgro..."
            },
            {
              "line_number": 580,
              "length": 171,
              "content": "            severity_badge = \"<span style='backgro..."
            },
            {
              "line_number": 583,
              "length": 195,
              "content": "        status_badge = f\"<span style='background-c..."
            },
            {
              "line_number": 589,
              "length": 173,
              "content": "            <div style=\"position: absolute; left: ..."
            },
            {
              "line_number": 590,
              "length": 119,
              "content": "            <div style=\"background-color: #1A1C24;..."
            },
            {
              "line_number": 591,
              "length": 117,
              "content": "                <div style=\"display: flex; justify..."
            },
            {
              "line_number": 592,
              "length": 123,
              "content": "                    <div style=\"font-size: 0.8rem;..."
            },
            {
              "line_number": 595,
              "length": 113,
              "content": "                <div style=\"font-size: 1rem; font-..."
            },
            {
              "line_number": 596,
              "length": 125,
              "content": "                <div style=\"font-size: 0.8rem; col..."
            },
            {
              "line_number": 597,
              "length": 146,
              "content": "                <div style=\"display: flex; justify..."
            },
            {
              "line_number": 678,
              "length": 90,
              "content": "    # Sample data for cyber attack trend - use 'ME..."
            },
            {
              "line_number": 725,
              "length": 87,
              "content": "            hovertemplate=\"<b>%{x|%b %Y}</b><br>Se..."
            },
            {
              "line_number": 848,
              "length": 85,
              "content": "                <h4 style=\"margin-top: 0; font-siz..."
            },
            {
              "line_number": 865,
              "length": 81,
              "content": "                <h4 style=\"margin-top: 0; font-siz..."
            },
            {
              "line_number": 881,
              "length": 99,
              "content": "                <div style=\"display: flex; justify..."
            },
            {
              "line_number": 885,
              "length": 99,
              "content": "                <div style=\"display: flex; justify..."
            },
            {
              "line_number": 904,
              "length": 89,
              "content": "            <p>Detailed analysis of physical secur..."
            },
            {
              "line_number": 917,
              "length": 94,
              "content": "            <p>Detailed analysis of cartel activit..."
            }
          ],
          "issues": [
            "Found 44 lines exceeding 80 characters",
            "  Line 162: 91 chars",
            "  Line 170: 82 chars",
            "  Line 215: 81 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 44
        },
        "comment_density": {
          "compliant": false,
          "comment_density": 8.132875143184421,
          "comment_lines": 71,
          "code_lines": 802,
          "issues": [
            "Comment density 8.1% below minimum 15.0%",
            "  Comment lines: 71, Code lines: 802"
          ],
          "recommendations": [
            "Add more comments to explain complex logic and functions"
          ],
          "metric": 8.132875143184421
        },
        "module_size": {
          "compliant": false,
          "module_size": 960,
          "issues": [
            "Module size 960 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 960
        },
        "docstrings": {
          "compliant": false,
          "docstring_coverage": 77.77777777777779,
          "functions": 9,
          "functions_with_docstrings": 7,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [
            "Docstring coverage 77.8% below minimum 80.0%",
            "  Functions: 7/9 with docstrings",
            "  Classes: 0/0 with docstrings"
          ],
          "recommendations": [
            "Add docstrings to all functions and classes",
            "Use clear, descriptive docstrings following Google or NumPy style"
          ],
          "metric": 77.77777777777779
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 65.16515611288627,
      "issues": [
        "Found 44 lines exceeding 80 characters",
        "  Line 162: 91 chars",
        "  Line 170: 82 chars",
        "  Line 215: 81 chars",
        "Comment density 8.1% below minimum 15.0%",
        "  Comment lines: 71, Code lines: 802",
        "Module size 960 lines exceeds maximum 300 lines",
        "Docstring coverage 77.8% below minimum 80.0%",
        "  Functions: 7/9 with docstrings",
        "  Classes: 0/0 with docstrings"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Add more comments to explain complex logic and functions",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files",
        "Add docstrings to all functions and classes",
        "Use clear, descriptive docstrings following Google or NumPy style"
      ],
      "priority": "low"
    },
    {
      "path": "pages/__init__.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/pages/__init__.py",
      "total_lines": 1,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 100.0,
          "comment_lines": 1,
          "code_lines": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "module_size": {
          "compliant": true,
          "module_size": 1,
          "issues": [],
          "recommendations": [],
          "metric": 1
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100,
          "functions": 0,
          "functions_with_docstrings": 0,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 100.0,
      "issues": [],
      "recommendations": [],
      "priority": "low"
    },
    {
      "path": "pages/advanced_osint_suite.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/pages/advanced_osint_suite.py",
      "total_lines": 956,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 41,
              "length": 105,
              "content": "from core.darkweb_analyzer.darkweb_intelligence im..."
            },
            {
              "line_number": 162,
              "length": 108,
              "content": "        st.markdown(\"Professional OSINT capabiliti..."
            },
            {
              "line_number": 221,
              "length": 111,
              "content": "    Supports content extraction, metadata analysis..."
            },
            {
              "line_number": 229,
              "length": 82,
              "content": "        url = st.text_input(\"Enter URL to extract ..."
            },
            {
              "line_number": 236,
              "length": 88,
              "content": "                    article = st.session_state.new..."
            },
            {
              "line_number": 247,
              "length": 88,
              "content": "        source_url = st.text_input(\"Enter news sou..."
            },
            {
              "line_number": 248,
              "length": 102,
              "content": "        article_count = st.slider(\"Number of artic..."
            },
            {
              "line_number": 254,
              "length": 120,
              "content": "                    results = st.session_state.new..."
            },
            {
              "line_number": 259,
              "length": 87,
              "content": "                        st.error(\"Failed to analyz..."
            },
            {
              "line_number": 286,
              "length": 90,
              "content": "        st.markdown(f\"**Published**: {article.date..."
            },
            {
              "line_number": 327,
              "length": 89,
              "content": "    if len(article.image_urls) > 1:  # If there ar..."
            },
            {
              "line_number": 334,
              "length": 94,
              "content": "            if img_url != article.main_image_url: ..."
            },
            {
              "line_number": 369,
              "length": 86,
              "content": "            <tr><th>Articles Analyzed</th><td>{res..."
            },
            {
              "line_number": 371,
              "length": 100,
              "content": "            <tr><th>Avg. Article Length</th><td>{i..."
            },
            {
              "line_number": 372,
              "length": 89,
              "content": "            <tr><th>Primary Language</th><td>{resu..."
            },
            {
              "line_number": 389,
              "length": 84,
              "content": "                st.markdown(f\"{i}. [{url.split('//..."
            },
            {
              "line_number": 408,
              "length": 89,
              "content": "    Analyze images and videos for intelligence gat..."
            },
            {
              "line_number": 409,
              "length": 82,
              "content": "    identify objects, and perform comprehensive me..."
            },
            {
              "line_number": 413,
              "length": 90,
              "content": "    url_tab, upload_tab = st.tabs([\"Analyze Media ..."
            },
            {
              "line_number": 419,
              "length": 94,
              "content": "        media_url = st.text_input(\"Enter URL to me..."
            },
            {
              "line_number": 420,
              "length": 89,
              "content": "        media_type = st.selectbox(\"Select media ty..."
            },
            {
              "line_number": 447,
              "length": 81,
              "content": "                        err_msg = results.get('err..."
            },
            {
              "line_number": 463,
              "length": 93,
              "content": "            detect_faces_upload = st.checkbox(\"Det..."
            },
            {
              "line_number": 464,
              "length": 99,
              "content": "            detect_objects_upload = st.checkbox(\"D..."
            },
            {
              "line_number": 465,
              "length": 99,
              "content": "            extract_text_upload = st.checkbox(\"Ext..."
            },
            {
              "line_number": 469,
              "length": 91,
              "content": "            file_details = {\"FileName\": uploaded_f..."
            },
            {
              "line_number": 479,
              "length": 81,
              "content": "                if st.button(\"Analyze Uploaded Ima..."
            },
            {
              "line_number": 482,
              "length": 123,
              "content": "                        temp_file_path = f\"data/me..."
            },
            {
              "line_number": 498,
              "length": 100,
              "content": "                        display_media_analysis_res..."
            },
            {
              "line_number": 504,
              "length": 94,
              "content": "                    st.warning(\"Video analysis is ..."
            },
            {
              "line_number": 507,
              "length": 123,
              "content": "                        temp_file_path = f\"data/me..."
            },
            {
              "line_number": 514,
              "length": 81,
              "content": "                            sample_rate=15  # Samp..."
            },
            {
              "line_number": 524,
              "length": 88,
              "content": "                st.error(\"Unsupported file type. P..."
            },
            {
              "line_number": 558,
              "length": 82,
              "content": "                <tr><th>Size</th><td>{metadata.siz..."
            },
            {
              "line_number": 562,
              "length": 120,
              "content": "                info_html += f\"<tr><th>Dimensions<..."
            },
            {
              "line_number": 565,
              "length": 98,
              "content": "                info_html += f\"<tr><th>Duration</t..."
            },
            {
              "line_number": 575,
              "length": 93,
              "content": "                <tr><th>File Hash</th><td><code>{m..."
            },
            {
              "line_number": 576,
              "length": 151,
              "content": "                <tr><th>Modified Date</th><td>{met..."
            },
            {
              "line_number": 582,
              "length": 95,
              "content": "                tech_html += f\"<tr><th>Location Da..."
            },
            {
              "line_number": 588,
              "length": 96,
              "content": "                tech_html += f\"<tr><th>Device Info..."
            },
            {
              "line_number": 633,
              "length": 100,
              "content": "                <div style=\"background-color: {hex..."
            },
            {
              "line_number": 721,
              "length": 99,
              "content": "                st.dataframe(timeline_df.drop(colu..."
            },
            {
              "line_number": 725,
              "length": 88,
              "content": "                st.markdown(\"Displaying analysis o..."
            },
            {
              "line_number": 735,
              "length": 88,
              "content": "                    keyframes_to_show.append(resul..."
            },
            {
              "line_number": 750,
              "length": 87,
              "content": "                    # Display keyframe analysis (u..."
            },
            {
              "line_number": 771,
              "length": 95,
              "content": "    Access darkweb intelligence gathering and moni..."
            },
            {
              "line_number": 772,
              "length": 85,
              "content": "    Monitor onion sites, track keywords, and analy..."
            },
            {
              "line_number": 777,
              "length": 102,
              "content": "    **Important Notice**: Darkweb access requires ..."
            },
            {
              "line_number": 778,
              "length": 114,
              "content": "    This tool only analyzes previously collected a..."
            },
            {
              "line_number": 809,
              "length": 111,
              "content": "                    <p><strong>URL:</strong> <span..."
            },
            {
              "line_number": 810,
              "length": 85,
              "content": "                    <p><strong>Score:</strong> {al..."
            },
            {
              "line_number": 811,
              "length": 169,
              "content": "                    <p><strong>Date:</strong> {ale..."
            },
            {
              "line_number": 822,
              "length": 101,
              "content": "                <p><strong>URL:</strong> <span cla..."
            },
            {
              "line_number": 839,
              "length": 99,
              "content": "                    results = st.session_state.dar..."
            },
            {
              "line_number": 842,
              "length": 92,
              "content": "                        st.success(f\"Found {len(re..."
            },
            {
              "line_number": 848,
              "length": 82,
              "content": "                                <h4>{result.get('t..."
            },
            {
              "line_number": 849,
              "length": 124,
              "content": "                                <p><strong>URL:</s..."
            },
            {
              "line_number": 850,
              "length": 116,
              "content": "                                <p><strong>Site Ty..."
            },
            {
              "line_number": 851,
              "length": 152,
              "content": "                                <p><strong>Extract..."
            },
            {
              "line_number": 853,
              "length": 127,
              "content": "                                {f\"<p><strong>Matc..."
            },
            {
              "line_number": 878,
              "length": 97,
              "content": "                    <h4>{target.name} <span style=..."
            },
            {
              "line_number": 879,
              "length": 82,
              "content": "                    <p><strong>Keywords:</strong> ..."
            },
            {
              "line_number": 880,
              "length": 96,
              "content": "                    <p><strong>Frequency:</strong>..."
            },
            {
              "line_number": 891,
              "length": 94,
              "content": "                <h4>Cryptocurrency Monitoring <spa..."
            },
            {
              "line_number": 892,
              "length": 95,
              "content": "                <p><strong>Keywords:</strong> bitc..."
            },
            {
              "line_number": 903,
              "length": 93,
              "content": "            keywords = st.text_input(\"Keywords (co..."
            },
            {
              "line_number": 904,
              "length": 88,
              "content": "            urls = st.text_area(\"URLs to Monitor (..."
            },
            {
              "line_number": 905,
              "length": 99,
              "content": "            frequency = st.slider(\"Monitoring Freq..."
            },
            {
              "line_number": 912,
              "length": 87,
              "content": "                        keywords=[k.strip() for k ..."
            },
            {
              "line_number": 913,
              "length": 81,
              "content": "                        urls=[u.strip() for u in u..."
            },
            {
              "line_number": 918,
              "length": 97,
              "content": "                    success = st.session_state.dar..."
            },
            {
              "line_number": 926,
              "length": 82,
              "content": "                    st.warning(\"Please enter at le..."
            }
          ],
          "issues": [
            "Found 72 lines exceeding 80 characters",
            "  Line 41: 105 chars",
            "  Line 162: 108 chars",
            "  Line 221: 111 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 72
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 27.435897435897438,
          "comment_lines": 214,
          "code_lines": 566,
          "issues": [],
          "recommendations": [],
          "metric": 27.435897435897438
        },
        "module_size": {
          "compliant": false,
          "module_size": 956,
          "issues": [
            "Module size 956 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 956
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 13,
          "functions_with_docstrings": 13,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": false,
          "complexity_issues": [
            "Function 'render_darkweb_intelligence_section' has high complexity (12 decision points)"
          ],
          "issues": [
            "Function 'render_darkweb_intelligence_section' has high complexity (12 decision points)"
          ],
          "recommendations": [
            "Break complex functions into smaller, focused functions",
            "Extract complex logic into separate methods or classes"
          ],
          "metric": 1
        }
      },
      "overall_compliant": false,
      "compliance_score": 65.78947368421052,
      "issues": [
        "Found 72 lines exceeding 80 characters",
        "  Line 41: 105 chars",
        "  Line 162: 108 chars",
        "  Line 221: 111 chars",
        "Module size 956 lines exceeds maximum 300 lines",
        "Function 'render_darkweb_intelligence_section' has high complexity (12 decision points)"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files",
        "Break complex functions into smaller, focused functions",
        "Extract complex logic into separate methods or classes"
      ],
      "priority": "low"
    },
    {
      "path": "pages/adversary_task_viewer.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/pages/adversary_task_viewer.py",
      "total_lines": 1117,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 40,
              "length": 86,
              "content": "from utils.enhanced_html_renderer import render_wi..."
            },
            {
              "line_number": 48,
              "length": 88,
              "content": "from core.periodic_table.task_loader import load_t..."
            },
            {
              "line_number": 85,
              "length": 228,
              "content": "        .task-card { border: 2px solid #4A4A4A; bo..."
            },
            {
              "line_number": 86,
              "length": 96,
              "content": "        .task-card:hover { transform: translateY(-..."
            },
            {
              "line_number": 87,
              "length": 117,
              "content": "        .task-card-header { display: flex; justify..."
            },
            {
              "line_number": 88,
              "length": 81,
              "content": "        .task-symbol-container { display: flex; al..."
            },
            {
              "line_number": 89,
              "length": 212,
              "content": "        .task-symbol { font-size: 1.5rem; font-wei..."
            },
            {
              "line_number": 91,
              "length": 85,
              "content": "        .task-hash-id { font-family: monospace; fo..."
            },
            {
              "line_number": 92,
              "length": 93,
              "content": "        .task-id { font-family: monospace; font-si..."
            },
            {
              "line_number": 93,
              "length": 108,
              "content": "        .task-meta-data { display: flex; flex-dire..."
            },
            {
              "line_number": 96,
              "length": 144,
              "content": "        .task-name { font-size: 1.2rem; font-weigh..."
            },
            {
              "line_number": 97,
              "length": 236,
              "content": "        .task-description { font-size: 0.9rem; mar..."
            },
            {
              "line_number": 98,
              "length": 89,
              "content": "        .task-metrics { display: flex; justify-con..."
            },
            {
              "line_number": 100,
              "length": 91,
              "content": "        .metric-label { display: flex; justify-con..."
            },
            {
              "line_number": 102,
              "length": 120,
              "content": "        .metric-bar { height: 6px; background-colo..."
            },
            {
              "line_number": 104,
              "length": 85,
              "content": "        .task-symbols { margin-top: 8px; font-size..."
            },
            {
              "line_number": 105,
              "length": 139,
              "content": "        .task-category-label { position: absolute;..."
            },
            {
              "line_number": 106,
              "length": 160,
              "content": "        .task-section-title { font-size: 1.1rem; f..."
            },
            {
              "line_number": 107,
              "length": 144,
              "content": "        .task-property-container { background-colo..."
            },
            {
              "line_number": 110,
              "length": 114,
              "content": "        .task-list li:before { content: \"\u2022\"; color..."
            },
            {
              "line_number": 111,
              "length": 154,
              "content": "        .ref-badge { display: inline-block; paddin..."
            },
            {
              "line_number": 112,
              "length": 149,
              "content": "        .relationship-item { padding: 4px 8px; bac..."
            },
            {
              "line_number": 113,
              "length": 156,
              "content": "        .task-footer { margin-top: 10px; font-size..."
            },
            {
              "line_number": 114,
              "length": 127,
              "content": "        .periodic-grid { display: grid; grid-templ..."
            },
            {
              "line_number": 116,
              "length": 182,
              "content": "        .phase-indicator { position: absolute; lef..."
            },
            {
              "line_number": 125,
              "length": 183,
              "content": "        @keyframes pulse { 0% { box-shadow: 0 0 0 ..."
            },
            {
              "line_number": 128,
              "length": 94,
              "content": "        .comparison-container { display: flex; gap..."
            },
            {
              "line_number": 129,
              "length": 147,
              "content": "        .comparison-card { flex: 0 0 auto; width: ..."
            },
            {
              "line_number": 130,
              "length": 203,
              "content": "        .comparison-header { font-weight: bold; pa..."
            },
            {
              "line_number": 132,
              "length": 91,
              "content": "        .property-table th, .property-table td { p..."
            },
            {
              "line_number": 134,
              "length": 88,
              "content": "        .property-table tr:nth-child(even) { backg..."
            },
            {
              "line_number": 135,
              "length": 139,
              "content": "        .filter-container { background-color: #1E2..."
            },
            {
              "line_number": 139,
              "length": 87,
              "content": "    # PRIMARY METHOD: Inject CSS using components...."
            },
            {
              "line_number": 193,
              "length": 86,
              "content": "    \"\"\"Initialize the task registry with data from..."
            },
            {
              "line_number": 198,
              "length": 87,
              "content": "            registry = TaskRegistry(db_path=\":memo..."
            },
            {
              "line_number": 209,
              "length": 91,
              "content": "                logger.warning(\"No tasks found in ..."
            },
            {
              "line_number": 213,
              "length": 88,
              "content": "            logger.warning(\"No attached_assets dir..."
            },
            {
              "line_number": 219,
              "length": 145,
              "content": "        logger.info(f\"Registry initialized with {l..."
            },
            {
              "line_number": 240,
              "length": 96,
              "content": "                st.error(\"Failed to initialize the..."
            },
            {
              "line_number": 243,
              "length": 104,
              "content": "            logger.info(f\"Registry initialized suc..."
            },
            {
              "line_number": 267,
              "length": 84,
              "content": "        task_name = task.task_name if hasattr(task..."
            },
            {
              "line_number": 270,
              "length": 89,
              "content": "        reliability = task.get_reliability() if ha..."
            },
            {
              "line_number": 271,
              "length": 86,
              "content": "        confidence = task.get_confidence() if hasa..."
            },
            {
              "line_number": 283,
              "length": 116,
              "content": "        valence = (task.get_valence() / 10) if has..."
            },
            {
              "line_number": 289,
              "length": 86,
              "content": "        category = task.get_category() if hasattr(..."
            },
            {
              "line_number": 301,
              "length": 102,
              "content": "                <div class=\"task-category-label\" s..."
            },
            {
              "line_number": 304,
              "length": 84,
              "content": "                        <div class=\"task-symbol\" s..."
            },
            {
              "line_number": 309,
              "length": 106,
              "content": "                            <div class=\"task-id\">U..."
            },
            {
              "line_number": 321,
              "length": 122,
              "content": "                        <div class=\"metric-filled\"..."
            },
            {
              "line_number": 325,
              "length": 113,
              "content": "                <div style=\"display: flex; justify..."
            },
            {
              "line_number": 338,
              "length": 137,
              "content": "            capabilities = task.capabilities if ha..."
            },
            {
              "line_number": 339,
              "length": 132,
              "content": "            limitations = task.limitations if hasa..."
            },
            {
              "line_number": 341,
              "length": 99,
              "content": "            indicators = task.indicators if hasatt..."
            },
            {
              "line_number": 342,
              "length": 115,
              "content": "            toolchain_refs = task.toolchain_refs i..."
            },
            {
              "line_number": 359,
              "length": 102,
              "content": "                <div class=\"task-category-label\" s..."
            },
            {
              "line_number": 362,
              "length": 84,
              "content": "                        <div class=\"task-symbol\" s..."
            },
            {
              "line_number": 372,
              "length": 81,
              "content": "                        <div class=\"task-valence\">..."
            },
            {
              "line_number": 376,
              "length": 104,
              "content": "                <div class=\"task-name\" style=\"font..."
            },
            {
              "line_number": 378,
              "length": 81,
              "content": "                <div class=\"task-description\" styl..."
            },
            {
              "line_number": 383,
              "length": 91,
              "content": "                <div class=\"task-symbols\" style=\"t..."
            },
            {
              "line_number": 394,
              "length": 123,
              "content": "                            <div class=\"metric-fil..."
            },
            {
              "line_number": 404,
              "length": 122,
              "content": "                            <div class=\"metric-fil..."
            },
            {
              "line_number": 416,
              "length": 120,
              "content": "                            <div class=\"metric-fil..."
            },
            {
              "line_number": 426,
              "length": 122,
              "content": "                            <div class=\"metric-fil..."
            },
            {
              "line_number": 445,
              "length": 86,
              "content": "                <div class=\"task-section-title\">Ta..."
            },
            {
              "line_number": 504,
              "length": 88,
              "content": "                            {rel.type} \u2192 {target_t..."
            },
            {
              "line_number": 513,
              "length": 88,
              "content": "                            {rel.type} \u2190 {source_t..."
            },
            {
              "line_number": 522,
              "length": 87,
              "content": "            atomic_number = task.atomic_number if ..."
            },
            {
              "line_number": 525,
              "length": 105,
              "content": "                    Category: {category} | Atomic ..."
            },
            {
              "line_number": 535,
              "length": 109,
              "content": "        return f\"<div class='task-card' style='bor..."
            },
            {
              "line_number": 669,
              "length": 102,
              "content": "    st.markdown(\"Explore the complete spectrum of ..."
            },
            {
              "line_number": 702,
              "length": 86,
              "content": "        [\"Periodic Table\", \"Task Cards\", \"Property..."
            },
            {
              "line_number": 721,
              "length": 102,
              "content": "        filtered_tasks = [task for task in filtere..."
            },
            {
              "line_number": 725,
              "length": 117,
              "content": "        filtered_tasks = [task for task in filtere..."
            },
            {
              "line_number": 734,
              "length": 107,
              "content": "        st.sidebar.warning(f\"Limited to {MAX_TASKS..."
            },
            {
              "line_number": 737,
              "length": 93,
              "content": "    task_options = {f\"{task.hash_id} - {task.task_..."
            },
            {
              "line_number": 741,
              "length": 126,
              "content": "        st.sidebar.markdown(f\"Showing {len(filtere..."
            },
            {
              "line_number": 743,
              "length": 87,
              "content": "        st.sidebar.markdown(f\"Showing {len(filtere..."
            },
            {
              "line_number": 769,
              "length": 84,
              "content": "        # For Periodic Table and Task Cards views,..."
            },
            {
              "line_number": 851,
              "length": 104,
              "content": "        st.markdown(f'<div class=\"periodic-grid\" s..."
            },
            {
              "line_number": 881,
              "length": 82,
              "content": "            # Handle the case where card_html migh..."
            },
            {
              "line_number": 889,
              "length": 89,
              "content": "            phase_indicator = f'<div class=\"phase-..."
            },
            {
              "line_number": 893,
              "length": 95,
              "content": "                                         f'<div cl..."
            },
            {
              "line_number": 895,
              "length": 94,
              "content": "                                         f'{phase_..."
            },
            {
              "line_number": 947,
              "length": 82,
              "content": "                <div style=\"display:flex; align-it..."
            },
            {
              "line_number": 948,
              "length": 123,
              "content": "                    <div style=\"width:20px; height..."
            },
            {
              "line_number": 957,
              "length": 143,
              "content": "                <div style=\"width:20px; height:20p..."
            },
            {
              "line_number": 961,
              "length": 138,
              "content": "                <div style=\"width:20px; height:20p..."
            },
            {
              "line_number": 965,
              "length": 154,
              "content": "                <div style=\"width:20px; height:20p..."
            },
            {
              "line_number": 969,
              "length": 153,
              "content": "                <div style=\"width:20px; height:20p..."
            },
            {
              "line_number": 983,
              "length": 108,
              "content": "            _Note: Interactive features will be im..."
            },
            {
              "line_number": 1001,
              "length": 95,
              "content": "                        with st.expander(f\"{task.h..."
            },
            {
              "line_number": 1003,
              "length": 89,
              "content": "                            # Render the HTML dire..."
            },
            {
              "line_number": 1004,
              "length": 81,
              "content": "                            detailed_card = render..."
            },
            {
              "line_number": 1006,
              "length": 87,
              "content": "                            # Use enhanced renderi..."
            },
            {
              "line_number": 1019,
              "length": 88,
              "content": "                                success = render_w..."
            },
            {
              "line_number": 1024,
              "length": 92,
              "content": "                                    st.caption(f\"I..."
            },
            {
              "line_number": 1026,
              "length": 84,
              "content": "                                    st.write(\"**Ca..."
            },
            {
              "line_number": 1030,
              "length": 105,
              "content": "                                        st.metric(..."
            },
            {
              "line_number": 1032,
              "length": 103,
              "content": "                                        st.metric(..."
            },
            {
              "line_number": 1034,
              "length": 99,
              "content": "                                        st.metric(..."
            },
            {
              "line_number": 1036,
              "length": 103,
              "content": "                                        st.metric(..."
            },
            {
              "line_number": 1087,
              "length": 81,
              "content": "                task_relationships = registry.get_..."
            },
            {
              "line_number": 1099,
              "length": 83,
              "content": "                st.dataframe(pd.DataFrame(relation..."
            },
            {
              "line_number": 1111,
              "length": 87,
              "content": "        st.markdown(\"CTAS Adversary Task Viewer v6..."
            }
          ],
          "issues": [
            "Found 105 lines exceeding 80 characters",
            "  Line 40: 86 chars",
            "  Line 48: 88 chars",
            "  Line 85: 228 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 105
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 16.32231404958678,
          "comment_lines": 158,
          "code_lines": 810,
          "issues": [],
          "recommendations": [],
          "metric": 16.32231404958678
        },
        "module_size": {
          "compliant": false,
          "module_size": 1117,
          "issues": [
            "Module size 1117 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 1117
        },
        "docstrings": {
          "compliant": false,
          "docstring_coverage": 71.42857142857143,
          "functions": 7,
          "functions_with_docstrings": 5,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [
            "Docstring coverage 71.4% below minimum 80.0%",
            "  Functions: 5/7 with docstrings",
            "  Classes: 0/0 with docstrings"
          ],
          "recommendations": [
            "Add docstrings to all functions and classes",
            "Use clear, descriptive docstrings following Google or NumPy style"
          ],
          "metric": 71.42857142857143
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": false,
          "complexity_issues": [
            "Function 'render_task_card' has high complexity (12 decision points)",
            "Function 'main' has high complexity (38 decision points)"
          ],
          "issues": [
            "Function 'render_task_card' has high complexity (12 decision points)",
            "Function 'main' has high complexity (38 decision points)"
          ],
          "recommendations": [
            "Break complex functions into smaller, focused functions",
            "Extract complex logic into separate methods or classes"
          ],
          "metric": 2
        }
      },
      "overall_compliant": false,
      "compliance_score": 63.909774436090224,
      "issues": [
        "Found 105 lines exceeding 80 characters",
        "  Line 40: 86 chars",
        "  Line 48: 88 chars",
        "  Line 85: 228 chars",
        "Module size 1117 lines exceeds maximum 300 lines",
        "Docstring coverage 71.4% below minimum 80.0%",
        "  Functions: 5/7 with docstrings",
        "  Classes: 0/0 with docstrings",
        "Function 'render_task_card' has high complexity (12 decision points)",
        "Function 'main' has high complexity (38 decision points)"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files",
        "Add docstrings to all functions and classes",
        "Use clear, descriptive docstrings following Google or NumPy style",
        "Break complex functions into smaller, focused functions",
        "Extract complex logic into separate methods or classes"
      ],
      "priority": "low"
    },
    {
      "path": "pages/adversary_task_viewer_simple.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/pages/adversary_task_viewer_simple.py",
      "total_lines": 109,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 88,
              "length": 82,
              "content": "            with st.expander(f\"{task.hash_id}: {ta..."
            },
            {
              "line_number": 95,
              "length": 85,
              "content": "                    st.metric(\"Reliability\", f\"{in..."
            },
            {
              "line_number": 97,
              "length": 83,
              "content": "                    st.metric(\"Confidence\", f\"{int..."
            }
          ],
          "issues": [
            "Found 3 lines exceeding 80 characters",
            "  Line 88: 82 chars",
            "  Line 95: 85 chars",
            "  Line 97: 83 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 3
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 26.08695652173913,
          "comment_lines": 24,
          "code_lines": 68,
          "issues": [],
          "recommendations": [],
          "metric": 26.08695652173913
        },
        "module_size": {
          "compliant": true,
          "module_size": 109,
          "issues": [],
          "recommendations": [],
          "metric": 109
        },
        "docstrings": {
          "compliant": false,
          "docstring_coverage": 0.0,
          "functions": 3,
          "functions_with_docstrings": 0,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [
            "Docstring coverage 0.0% below minimum 80.0%",
            "  Functions: 0/3 with docstrings",
            "  Classes: 0/0 with docstrings"
          ],
          "recommendations": [
            "Add docstrings to all functions and classes",
            "Use clear, descriptive docstrings following Google or NumPy style"
          ],
          "metric": 0.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 73.68421052631578,
      "issues": [
        "Found 3 lines exceeding 80 characters",
        "  Line 88: 82 chars",
        "  Line 95: 85 chars",
        "  Line 97: 83 chars",
        "Docstring coverage 0.0% below minimum 80.0%",
        "  Functions: 0/3 with docstrings",
        "  Classes: 0/0 with docstrings"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Add docstrings to all functions and classes",
        "Use clear, descriptive docstrings following Google or NumPy style"
      ],
      "priority": "low"
    },
    {
      "path": "pages/cyberwarfare_tools.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/pages/cyberwarfare_tools.py",
      "total_lines": 1516,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 300,
              "length": 84,
              "content": "def filter_tools(search_term: Optional[str] = None..."
            },
            {
              "line_number": 470,
              "length": 104,
              "content": "        st.markdown(\"Explore and utilize offensive..."
            },
            {
              "line_number": 494,
              "length": 99,
              "content": "                st.caption(f\"Last refreshed: {st.s..."
            },
            {
              "line_number": 530,
              "length": 90,
              "content": "        options=[\"Tools Explorer\", \"Command Center..."
            },
            {
              "line_number": 563,
              "length": 102,
              "content": "    search_term = st.sidebar.text_input(\"Search To..."
            },
            {
              "line_number": 575,
              "length": 92,
              "content": "        filter_tools(search_term, selected_categor..."
            },
            {
              "line_number": 708,
              "length": 102,
              "content": "                st.markdown(f'<span class=\"categor..."
            },
            {
              "line_number": 713,
              "length": 81,
              "content": "                st.markdown(tool.get(\"description\"..."
            },
            {
              "line_number": 724,
              "length": 186,
              "content": "                    st.markdown('<span style=\"back..."
            },
            {
              "line_number": 726,
              "length": 190,
              "content": "                    st.markdown('<span style=\"back..."
            },
            {
              "line_number": 737,
              "length": 84,
              "content": "                    if st.button(\"View Details\", k..."
            },
            {
              "line_number": 749,
              "length": 96,
              "content": "                    is_favorite = tool.get(\"name\")..."
            },
            {
              "line_number": 815,
              "length": 83,
              "content": "        st.info(\"Select a tool from the Tools Expl..."
            },
            {
              "line_number": 844,
              "length": 176,
              "content": "        st.markdown(f'<span style=\"background-colo..."
            },
            {
              "line_number": 849,
              "length": 82,
              "content": "        st.markdown(selected_tool.get(\"description..."
            },
            {
              "line_number": 856,
              "length": 81,
              "content": "            help=f\"Command line arguments to pass ..."
            },
            {
              "line_number": 890,
              "length": 178,
              "content": "            st.markdown('<span style=\"background-c..."
            },
            {
              "line_number": 892,
              "length": 182,
              "content": "            st.markdown('<span style=\"background-c..."
            },
            {
              "line_number": 910,
              "length": 105,
              "content": "                help_text = st.session_state.kali_..."
            },
            {
              "line_number": 963,
              "length": 135,
              "content": "            st.markdown(f\"Return Code: <span style..."
            },
            {
              "line_number": 969,
              "length": 99,
              "content": "            st.markdown(f\"Duration: {command_outpu..."
            },
            {
              "line_number": 975,
              "length": 105,
              "content": "            st.markdown(f\"Time: {command_output.ti..."
            },
            {
              "line_number": 1022,
              "length": 90,
              "content": "    st.write(\"Scan and retrieve information about ..."
            },
            {
              "line_number": 1043,
              "length": 83,
              "content": "            help=\"Limit the number of tools to sca..."
            },
            {
              "line_number": 1067,
              "length": 88,
              "content": "                        scan_result = tool_scraper..."
            },
            {
              "line_number": 1077,
              "length": 115,
              "content": "                        st.success(f\"Scanning comp..."
            },
            {
              "line_number": 1143,
              "length": 94,
              "content": "                            st.error(\"Tool scraper..."
            },
            {
              "line_number": 1152,
              "length": 86,
              "content": "                            st.success(f\"Data expo..."
            },
            {
              "line_number": 1236,
              "length": 83,
              "content": "                with st.expander(f\"{tool.name} - {..."
            },
            {
              "line_number": 1294,
              "length": 81,
              "content": "                            st.markdown(f\"[Documen..."
            },
            {
              "line_number": 1334,
              "length": 91,
              "content": "        st.info(\"No scan has been performed yet. U..."
            },
            {
              "line_number": 1374,
              "length": 85,
              "content": "    column_names: list[str] = [\"Time\", \"Tool\", \"Co..."
            }
          ],
          "issues": [
            "Found 32 lines exceeding 80 characters",
            "  Line 300: 84 chars",
            "  Line 470: 104 chars",
            "  Line 494: 99 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 32
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 59.21745673438675,
          "comment_lines": 787,
          "code_lines": 542,
          "issues": [],
          "recommendations": [],
          "metric": 59.21745673438675
        },
        "module_size": {
          "compliant": false,
          "module_size": 1516,
          "issues": [
            "Module size 1516 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 1516
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 12,
          "functions_with_docstrings": 12,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": false,
          "complexity_issues": [
            "Function 'render_command_center' has high complexity (11 decision points)",
            "Function 'render_tool_scanner' has high complexity (22 decision points)"
          ],
          "issues": [
            "Function 'render_command_center' has high complexity (11 decision points)",
            "Function 'render_tool_scanner' has high complexity (22 decision points)"
          ],
          "recommendations": [
            "Break complex functions into smaller, focused functions",
            "Extract complex logic into separate methods or classes"
          ],
          "metric": 2
        }
      },
      "overall_compliant": false,
      "compliance_score": 65.78947368421052,
      "issues": [
        "Found 32 lines exceeding 80 characters",
        "  Line 300: 84 chars",
        "  Line 470: 104 chars",
        "  Line 494: 99 chars",
        "Module size 1516 lines exceeds maximum 300 lines",
        "Function 'render_command_center' has high complexity (11 decision points)",
        "Function 'render_tool_scanner' has high complexity (22 decision points)"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files",
        "Break complex functions into smaller, focused functions",
        "Extract complex logic into separate methods or classes"
      ],
      "priority": "low"
    },
    {
      "path": "pages/database_integration_demo.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/pages/database_integration_demo.py",
      "total_lines": 256,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 51,
              "length": 81,
              "content": "    This dashboard demonstrates NyxTrace's advance..."
            },
            {
              "line_number": 52,
              "length": 89,
              "content": "    integrating Supabase (PostgreSQL), Neo4j, and ..."
            },
            {
              "line_number": 100,
              "length": 87,
              "content": "        st.warning(\"No databases are connected. Pl..."
            },
            {
              "line_number": 102,
              "length": 85,
              "content": "        To connect to databases, you need to set t..."
            },
            {
              "line_number": 125,
              "length": 83,
              "content": "            \"Person\", \"Location\", \"Organization\", ..."
            },
            {
              "line_number": 130,
              "length": 82,
              "content": "            description = st.text_area(\"Descriptio..."
            },
            {
              "line_number": 132,
              "length": 96,
              "content": "            attributes = st.text_area(\"Custom Attr..."
            },
            {
              "line_number": 154,
              "length": 83,
              "content": "                results = db_manager.store_entity(..."
            },
            {
              "line_number": 174,
              "length": 84,
              "content": "    if 'created_entities' in st.session_state and ..."
            },
            {
              "line_number": 177,
              "length": 96,
              "content": "        entity_options = [f\"{e['name']} ({e['id']}..."
            },
            {
              "line_number": 183,
              "length": 116,
              "content": "            entity_type = next((e['type'] for e in..."
            },
            {
              "line_number": 196,
              "length": 94,
              "content": "                        display_entity = {k: v for..."
            },
            {
              "line_number": 221,
              "length": 82,
              "content": "        NyxTrace uses a multi-database architectur..."
            },
            {
              "line_number": 223,
              "length": 93,
              "content": "        1. **Supabase (PostgreSQL)** - Relational ..."
            },
            {
              "line_number": 224,
              "length": 89,
              "content": "        2. **Neo4j** - Graph database for relation..."
            },
            {
              "line_number": 228,
              "length": 84,
              "content": "        providing specialized capabilities for dif..."
            },
            {
              "line_number": 251,
              "length": 92,
              "content": "        st.image(\"https://via.placeholder.com/800x..."
            }
          ],
          "issues": [
            "Found 17 lines exceeding 80 characters",
            "  Line 51: 81 chars",
            "  Line 52: 89 chars",
            "  Line 100: 87 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 17
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 20.476190476190474,
          "comment_lines": 43,
          "code_lines": 167,
          "issues": [],
          "recommendations": [],
          "metric": 20.476190476190474
        },
        "module_size": {
          "compliant": true,
          "module_size": 256,
          "issues": [],
          "recommendations": [],
          "metric": 256
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 4,
          "functions_with_docstrings": 4,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 91.22807017543859,
      "issues": [
        "Found 17 lines exceeding 80 characters",
        "  Line 51: 81 chars",
        "  Line 52: 89 chars",
        "  Line 100: 87 chars"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation"
      ],
      "priority": "low"
    },
    {
      "path": "pages/download.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/pages/download.py",
      "total_lines": 62,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 23,
              "length": 136,
              "content": "    href = f'<a href=\"data:application/octet-strea..."
            },
            {
              "line_number": 40,
              "length": 118,
              "content": "        st.markdown(f\"Download the entire project ..."
            },
            {
              "line_number": 41,
              "length": 110,
              "content": "        st.markdown(get_binary_file_downloader_htm..."
            },
            {
              "line_number": 59,
              "length": 98,
              "content": "            st.markdown(get_binary_file_downloader..."
            }
          ],
          "issues": [
            "Found 4 lines exceeding 80 characters",
            "  Line 23: 136 chars",
            "  Line 40: 118 chars",
            "  Line 41: 110 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 4
        },
        "comment_density": {
          "compliant": false,
          "comment_density": 13.725490196078432,
          "comment_lines": 7,
          "code_lines": 44,
          "issues": [
            "Comment density 13.7% below minimum 15.0%",
            "  Comment lines: 7, Code lines: 44"
          ],
          "recommendations": [
            "Add more comments to explain complex logic and functions"
          ],
          "metric": 13.725490196078432
        },
        "module_size": {
          "compliant": true,
          "module_size": 62,
          "issues": [],
          "recommendations": [],
          "metric": 62
        },
        "docstrings": {
          "compliant": false,
          "docstring_coverage": 0.0,
          "functions": 2,
          "functions_with_docstrings": 0,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [
            "Docstring coverage 0.0% below minimum 80.0%",
            "  Functions: 0/2 with docstrings",
            "  Classes: 0/0 with docstrings"
          ],
          "recommendations": [
            "Add docstrings to all functions and classes",
            "Use clear, descriptive docstrings following Google or NumPy style"
          ],
          "metric": 0.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 72.19355578488705,
      "issues": [
        "Found 4 lines exceeding 80 characters",
        "  Line 23: 136 chars",
        "  Line 40: 118 chars",
        "  Line 41: 110 chars",
        "Comment density 13.7% below minimum 15.0%",
        "  Comment lines: 7, Code lines: 44",
        "Docstring coverage 0.0% below minimum 80.0%",
        "  Functions: 0/2 with docstrings",
        "  Classes: 0/0 with docstrings"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Add more comments to explain complex logic and functions",
        "Add docstrings to all functions and classes",
        "Use clear, descriptive docstrings following Google or NumPy style"
      ],
      "priority": "low"
    },
    {
      "path": "pages/download_center.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/pages/download_center.py",
      "total_lines": 253,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 19,
              "length": 147,
              "content": "    href = f'<a href=\"data:application/octet-strea..."
            },
            {
              "line_number": 125,
              "length": 130,
              "content": "st.markdown('<h1 style=\"margin-bottom:0.5rem;color..."
            },
            {
              "line_number": 128,
              "length": 107,
              "content": "<p style=\"margin-bottom:1rem;\">This page provides ..."
            },
            {
              "line_number": 133,
              "length": 117,
              "content": "tab1, tab2, tab3, tab4 = st.tabs([\"Complete Packag..."
            },
            {
              "line_number": 137,
              "length": 95,
              "content": "    st.markdown(\"This package contains all compone..."
            },
            {
              "line_number": 148,
              "length": 116,
              "content": "                Contains all component archives, d..."
            },
            {
              "line_number": 150,
              "length": 97,
              "content": "            {get_binary_file_downloader_html(str(c..."
            },
            {
              "line_number": 161,
              "length": 151,
              "content": "        (\"Database Layer\", \"nyxtrace_part1_databas..."
            },
            {
              "line_number": 162,
              "length": 140,
              "content": "        (\"Core Components\", \"nyxtrace_part2_core.z..."
            },
            {
              "line_number": 163,
              "length": 127,
              "content": "        (\"Utilities\", \"nyxtrace_part3_utils.zip\", ..."
            },
            {
              "line_number": 164,
              "length": 115,
              "content": "        (\"Documentation\", \"nyxtrace_part4_docs.zip..."
            },
            {
              "line_number": 165,
              "length": 125,
              "content": "        (\"Streamlit Frontend\", \"nyxtrace_streamlit..."
            },
            {
              "line_number": 166,
              "length": 123,
              "content": "        (\"Streamlit Pages\", \"nyxtrace_streamlit_pa..."
            },
            {
              "line_number": 179,
              "length": 84,
              "content": "                {get_binary_file_downloader_html(s..."
            },
            {
              "line_number": 192,
              "length": 113,
              "content": "            (\"Project Manifest\", \"00_PROJECT_MANIF..."
            },
            {
              "line_number": 193,
              "length": 109,
              "content": "            (\"Refactoring Roadmap\", \"REFACTORING_R..."
            },
            {
              "line_number": 194,
              "length": 114,
              "content": "            (\"React Migration Guide\", \"REACT_MIGRA..."
            },
            {
              "line_number": 195,
              "length": 124,
              "content": "            (\"Dioxus Migration Guide\", \"DIOXUS_MIG..."
            },
            {
              "line_number": 196,
              "length": 110,
              "content": "            (\"Implementation Checklist\", \"IMPLEMEN..."
            },
            {
              "line_number": 197,
              "length": 98,
              "content": "            (\"Handoff Summary\", \"HANDOFF_SUMMARY.m..."
            },
            {
              "line_number": 198,
              "length": 111,
              "content": "            (\"Screenshot Capture Guide\", \"SCREENSH..."
            },
            {
              "line_number": 199,
              "length": 105,
              "content": "            (\"Handoff Instructions\", \"HANDOFF_INST..."
            },
            {
              "line_number": 200,
              "length": 95,
              "content": "            (\"Environment Example\", \".env.example\"..."
            },
            {
              "line_number": 201,
              "length": 94,
              "content": "            (\"README Template\", \"README_TEMPLATE.m..."
            },
            {
              "line_number": 202,
              "length": 100,
              "content": "            (\"Package Contents\", \"PACKAGE_CONTENTS..."
            },
            {
              "line_number": 215,
              "length": 88,
              "content": "                    {get_binary_file_downloader_ht..."
            },
            {
              "line_number": 219,
              "length": 83,
              "content": "                st.error(f\"File {filename} not fou..."
            },
            {
              "line_number": 228,
              "length": 98,
              "content": "        (\"Full Project Backup\", \"nyxtrace_project...."
            },
            {
              "line_number": 229,
              "length": 106,
              "content": "        (\"Database Refactor\", \"nyxtrace_database_r..."
            },
            {
              "line_number": 230,
              "length": 97,
              "content": "        (\"Backup Files\", \"nyxtrace_backup_files.zi..."
            },
            {
              "line_number": 243,
              "length": 84,
              "content": "                {get_binary_file_downloader_html(s..."
            },
            {
              "line_number": 252,
              "length": 92,
              "content": "If you encounter any issues, you can access these ..."
            }
          ],
          "issues": [
            "Found 32 lines exceeding 80 characters",
            "  Line 19: 147 chars",
            "  Line 125: 130 chars",
            "  Line 128: 107 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 32
        },
        "comment_density": {
          "compliant": false,
          "comment_density": 6.912442396313365,
          "comment_lines": 15,
          "code_lines": 202,
          "issues": [
            "Comment density 6.9% below minimum 15.0%",
            "  Comment lines: 15, Code lines: 202"
          ],
          "recommendations": [
            "Add more comments to explain complex logic and functions"
          ],
          "metric": 6.912442396313365
        },
        "module_size": {
          "compliant": true,
          "module_size": 253,
          "issues": [],
          "recommendations": [],
          "metric": 253
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 1,
          "functions_with_docstrings": 1,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 81.76893847522031,
      "issues": [
        "Found 32 lines exceeding 80 characters",
        "  Line 19: 147 chars",
        "  Line 125: 130 chars",
        "  Line 128: 107 chars",
        "Comment density 6.9% below minimum 15.0%",
        "  Comment lines: 15, Code lines: 202"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Add more comments to explain complex logic and functions"
      ],
      "priority": "low"
    },
    {
      "path": "pages/drone_operations/__init__.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/pages/drone_operations/__init__.py",
      "total_lines": 42,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 28,
              "length": 86,
              "content": "from pages.drone_operations.components.squadron_mo..."
            },
            {
              "line_number": 29,
              "length": 82,
              "content": "from pages.drone_operations.components.telemetry_f..."
            },
            {
              "line_number": 30,
              "length": 86,
              "content": "from pages.drone_operations.components.mission_pla..."
            },
            {
              "line_number": 31,
              "length": 87,
              "content": "from pages.drone_operations.components.traffic_cam..."
            },
            {
              "line_number": 32,
              "length": 89,
              "content": "from pages.drone_operations.components.airspace_mo..."
            }
          ],
          "issues": [
            "Found 5 lines exceeding 80 characters",
            "  Line 28: 86 chars",
            "  Line 29: 82 chars",
            "  Line 30: 86 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 5
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 23.684210526315788,
          "comment_lines": 9,
          "code_lines": 29,
          "issues": [],
          "recommendations": [],
          "metric": 23.684210526315788
        },
        "module_size": {
          "compliant": true,
          "module_size": 42,
          "issues": [],
          "recommendations": [],
          "metric": 42
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100,
          "functions": 0,
          "functions_with_docstrings": 0,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 91.22807017543859,
      "issues": [
        "Found 5 lines exceeding 80 characters",
        "  Line 28: 86 chars",
        "  Line 29: 82 chars",
        "  Line 30: 86 chars"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation"
      ],
      "priority": "low"
    },
    {
      "path": "pages/drone_operations/components/__init__.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/pages/drone_operations/components/__init__.py",
      "total_lines": 36,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 22,
              "length": 84,
              "content": "Each component is designed to be modular and reusa..."
            },
            {
              "line_number": 26,
              "length": 86,
              "content": "from pages.drone_operations.components.squadron_mo..."
            },
            {
              "line_number": 27,
              "length": 82,
              "content": "from pages.drone_operations.components.telemetry_f..."
            },
            {
              "line_number": 28,
              "length": 86,
              "content": "from pages.drone_operations.components.mission_pla..."
            },
            {
              "line_number": 29,
              "length": 87,
              "content": "from pages.drone_operations.components.traffic_cam..."
            },
            {
              "line_number": 30,
              "length": 89,
              "content": "from pages.drone_operations.components.airspace_mo..."
            }
          ],
          "issues": [
            "Found 6 lines exceeding 80 characters",
            "  Line 22: 84 chars",
            "  Line 26: 86 chars",
            "  Line 27: 82 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 6
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 24.242424242424242,
          "comment_lines": 8,
          "code_lines": 25,
          "issues": [],
          "recommendations": [],
          "metric": 24.242424242424242
        },
        "module_size": {
          "compliant": true,
          "module_size": 36,
          "issues": [],
          "recommendations": [],
          "metric": 36
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100,
          "functions": 0,
          "functions_with_docstrings": 0,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 91.22807017543859,
      "issues": [
        "Found 6 lines exceeding 80 characters",
        "  Line 22: 84 chars",
        "  Line 26: 86 chars",
        "  Line 27: 82 chars"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation"
      ],
      "priority": "low"
    },
    {
      "path": "pages/drone_operations/components/airspace_monitor.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/pages/drone_operations/components/airspace_monitor.py",
      "total_lines": 134,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 85,
              "length": 84,
              "content": "                    [drone[\"position\"][\"latitude\"]..."
            },
            {
              "line_number": 86,
              "length": 106,
              "content": "                    tooltip=f\"{drone['name']} ({dr..."
            },
            {
              "line_number": 97,
              "length": 83,
              "content": "            aircraft_type = random.choice([\"B737\",..."
            },
            {
              "line_number": 102,
              "length": 103,
              "content": "                tooltip=f\"Flight: {aircraft_id}<br..."
            },
            {
              "line_number": 114,
              "length": 86,
              "content": "        alert_types = [\"Proximity Warning\", \"Restr..."
            },
            {
              "line_number": 117,
              "length": 105,
              "content": "            alert_time = (datetime.now() - timedel..."
            }
          ],
          "issues": [
            "Found 6 lines exceeding 80 characters",
            "  Line 85: 84 chars",
            "  Line 86: 106 chars",
            "  Line 97: 83 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 6
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 21.551724137931032,
          "comment_lines": 25,
          "code_lines": 91,
          "issues": [],
          "recommendations": [],
          "metric": 21.551724137931032
        },
        "module_size": {
          "compliant": true,
          "module_size": 134,
          "issues": [],
          "recommendations": [],
          "metric": 134
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 1,
          "functions_with_docstrings": 1,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 91.22807017543859,
      "issues": [
        "Found 6 lines exceeding 80 characters",
        "  Line 85: 84 chars",
        "  Line 86: 106 chars",
        "  Line 97: 83 chars"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation"
      ],
      "priority": "low"
    },
    {
      "path": "pages/drone_operations/components/mission_planning.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/pages/drone_operations/components/mission_planning.py",
      "total_lines": 393,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 64,
              "length": 96,
              "content": "    target_lat = st.number_input(\"Target Latitude\"..."
            },
            {
              "line_number": 65,
              "length": 98,
              "content": "    target_lon = st.number_input(\"Target Longitude..."
            },
            {
              "line_number": 108,
              "length": 82,
              "content": "        path_type = st.selectbox(\"Path Type\", [\"Li..."
            },
            {
              "line_number": 158,
              "length": 104,
              "content": "    selected_drones = [available_drones[idx][1] fo..."
            },
            {
              "line_number": 192,
              "length": 89,
              "content": "        first_drone = st.session_state.drone_simul..."
            },
            {
              "line_number": 224,
              "length": 106,
              "content": "            st.success(f\"Mission assigned to {st.s..."
            },
            {
              "line_number": 226,
              "length": 112,
              "content": "            st.error(f\"Failed to assign mission to..."
            },
            {
              "line_number": 304,
              "length": 99,
              "content": "                tooltip=f\"{drone['name']} ({drone[..."
            },
            {
              "line_number": 312,
              "length": 81,
              "content": "                    path_points = [(p[\"latitude\"],..."
            },
            {
              "line_number": 329,
              "length": 108,
              "content": "    if mission_type == \"Search Grid\" and \"grid_siz..."
            },
            {
              "line_number": 330,
              "length": 118,
              "content": "        add_search_grid_to_map(m, target_lat, targ..."
            },
            {
              "line_number": 332,
              "length": 118,
              "content": "    elif mission_type == \"Direct Attack\" and \"appr..."
            },
            {
              "line_number": 333,
              "length": 126,
              "content": "        add_direct_attack_to_map(m, target_lat, ta..."
            },
            {
              "line_number": 335,
              "length": 112,
              "content": "    elif mission_type == \"Surveillance\" and \"orbit..."
            },
            {
              "line_number": 336,
              "length": 113,
              "content": "        add_orbit_to_map(m, target_lat, target_lon..."
            },
            {
              "line_number": 338,
              "length": 112,
              "content": "    elif mission_type == \"Reconnaissance\" and \"pat..."
            },
            {
              "line_number": 339,
              "length": 120,
              "content": "        add_reconnaissance_to_map(m, target_lat, t..."
            }
          ],
          "issues": [
            "Found 17 lines exceeding 80 characters",
            "  Line 64: 96 chars",
            "  Line 65: 98 chars",
            "  Line 108: 82 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 17
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 17.484662576687114,
          "comment_lines": 57,
          "code_lines": 269,
          "issues": [],
          "recommendations": [],
          "metric": 17.484662576687114
        },
        "module_size": {
          "compliant": false,
          "module_size": 393,
          "issues": [
            "Module size 393 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 393
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 5,
          "functions_with_docstrings": 5,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": false,
          "complexity_issues": [
            "Function 'render_mission_map' has high complexity (14 decision points)"
          ],
          "issues": [
            "Function 'render_mission_map' has high complexity (14 decision points)"
          ],
          "recommendations": [
            "Break complex functions into smaller, focused functions",
            "Extract complex logic into separate methods or classes"
          ],
          "metric": 1
        }
      },
      "overall_compliant": false,
      "compliance_score": 65.78947368421052,
      "issues": [
        "Found 17 lines exceeding 80 characters",
        "  Line 64: 96 chars",
        "  Line 65: 98 chars",
        "  Line 108: 82 chars",
        "Module size 393 lines exceeds maximum 300 lines",
        "Function 'render_mission_map' has high complexity (14 decision points)"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files",
        "Break complex functions into smaller, focused functions",
        "Extract complex logic into separate methods or classes"
      ],
      "priority": "low"
    },
    {
      "path": "pages/drone_operations/components/squadron_monitor.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/pages/drone_operations/components/squadron_monitor.py",
      "total_lines": 191,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 61,
              "length": 82,
              "content": "            base_lon = st.number_input(\"Longitude\"..."
            },
            {
              "line_number": 69,
              "length": 94,
              "content": "                st.session_state.drone_ids = st.se..."
            },
            {
              "line_number": 79,
              "length": 88,
              "content": "            time_acceleration = st.slider(\"Time Ac..."
            },
            {
              "line_number": 92,
              "length": 90,
              "content": "            if st.session_state.simulator_running ..."
            },
            {
              "line_number": 95,
              "length": 90,
              "content": "                time_delta = (current_time - st.se..."
            },
            {
              "line_number": 109,
              "length": 81,
              "content": "                        drone = st.session_state.d..."
            },
            {
              "line_number": 149,
              "length": 115,
              "content": "                            tooltip=f\"{d['drone_id..."
            },
            {
              "line_number": 150,
              "length": 84,
              "content": "                            icon=folium.Icon(color..."
            },
            {
              "line_number": 178,
              "length": 113,
              "content": "                        \"Position\": f\"{drone['posi..."
            }
          ],
          "issues": [
            "Found 9 lines exceeding 80 characters",
            "  Line 61: 82 chars",
            "  Line 69: 94 chars",
            "  Line 79: 88 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 9
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 19.16167664670659,
          "comment_lines": 32,
          "code_lines": 135,
          "issues": [],
          "recommendations": [],
          "metric": 19.16167664670659
        },
        "module_size": {
          "compliant": true,
          "module_size": 191,
          "issues": [],
          "recommendations": [],
          "metric": 191
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 1,
          "functions_with_docstrings": 1,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": false,
          "complexity_issues": [
            "Function 'render_squadron_monitor' has high complexity (18 decision points)"
          ],
          "issues": [
            "Function 'render_squadron_monitor' has high complexity (18 decision points)"
          ],
          "recommendations": [
            "Break complex functions into smaller, focused functions",
            "Extract complex logic into separate methods or classes"
          ],
          "metric": 1
        }
      },
      "overall_compliant": true,
      "compliance_score": 83.33333333333333,
      "issues": [
        "Found 9 lines exceeding 80 characters",
        "  Line 61: 82 chars",
        "  Line 69: 94 chars",
        "  Line 79: 88 chars",
        "Function 'render_squadron_monitor' has high complexity (18 decision points)"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Break complex functions into smaller, focused functions",
        "Extract complex logic into separate methods or classes"
      ],
      "priority": "low"
    },
    {
      "path": "pages/drone_operations/components/telemetry_feed.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/pages/drone_operations/components/telemetry_feed.py",
      "total_lines": 178,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 53,
              "length": 134,
              "content": "                format_func=lambda i: f\"Drone {i+1..."
            },
            {
              "line_number": 60,
              "length": 82,
              "content": "                drone = st.session_state.drone_sim..."
            },
            {
              "line_number": 63,
              "length": 106,
              "content": "                matching_telemetry = [t for t in t..."
            },
            {
              "line_number": 64,
              "length": 88,
              "content": "                latest_telemetry = matching_teleme..."
            },
            {
              "line_number": 76,
              "length": 89,
              "content": "                    # If we have telemetry, use it..."
            },
            {
              "line_number": 84,
              "length": 87,
              "content": "                            \"Last Update\": latest_..."
            },
            {
              "line_number": 89,
              "length": 82,
              "content": "                            \"Longitude\": f\"{drone[..."
            },
            {
              "line_number": 100,
              "length": 89,
              "content": "                    # If we have telemetry, use it..."
            },
            {
              "line_number": 101,
              "length": 107,
              "content": "                    if latest_telemetry and 'batte..."
            },
            {
              "line_number": 112,
              "length": 83,
              "content": "                            \"Signal\": f\"{drone['st..."
            },
            {
              "line_number": 113,
              "length": 93,
              "content": "                            \"Mission Progress\": f\"..."
            },
            {
              "line_number": 143,
              "length": 99,
              "content": "                if selected_drone_id in telemetry_..."
            },
            {
              "line_number": 156,
              "length": 121,
              "content": "                        cols_to_display = ['timest..."
            },
            {
              "line_number": 157,
              "length": 89,
              "content": "                        cols_to_display = [c for c..."
            }
          ],
          "issues": [
            "Found 14 lines exceeding 80 characters",
            "  Line 53: 134 chars",
            "  Line 60: 82 chars",
            "  Line 63: 106 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 14
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 20.915032679738562,
          "comment_lines": 32,
          "code_lines": 121,
          "issues": [],
          "recommendations": [],
          "metric": 20.915032679738562
        },
        "module_size": {
          "compliant": true,
          "module_size": 178,
          "issues": [],
          "recommendations": [],
          "metric": 178
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 1,
          "functions_with_docstrings": 1,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": false,
          "complexity_issues": [
            "Function 'render_telemetry_feed' has high complexity (11 decision points)"
          ],
          "issues": [
            "Function 'render_telemetry_feed' has high complexity (11 decision points)"
          ],
          "recommendations": [
            "Break complex functions into smaller, focused functions",
            "Extract complex logic into separate methods or classes"
          ],
          "metric": 1
        }
      },
      "overall_compliant": true,
      "compliance_score": 83.33333333333333,
      "issues": [
        "Found 14 lines exceeding 80 characters",
        "  Line 53: 134 chars",
        "  Line 60: 82 chars",
        "  Line 63: 106 chars",
        "Function 'render_telemetry_feed' has high complexity (11 decision points)"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Break complex functions into smaller, focused functions",
        "Extract complex logic into separate methods or classes"
      ],
      "priority": "low"
    },
    {
      "path": "pages/drone_operations/components/traffic_camera.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/pages/drone_operations/components/traffic_camera.py",
      "total_lines": 66,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 55,
              "length": 82,
              "content": "            st.markdown(f\"**Location:** {camera['l..."
            },
            {
              "line_number": 59,
              "length": 96,
              "content": "            st.markdown(\"```\\nSimulated Camera Fee..."
            },
            {
              "line_number": 60,
              "length": 84,
              "content": "            st.text(f\"Last Updated: {datetime.now(..."
            }
          ],
          "issues": [
            "Found 3 lines exceeding 80 characters",
            "  Line 55: 82 chars",
            "  Line 59: 96 chars",
            "  Line 60: 84 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 3
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 29.82456140350877,
          "comment_lines": 17,
          "code_lines": 40,
          "issues": [],
          "recommendations": [],
          "metric": 29.82456140350877
        },
        "module_size": {
          "compliant": true,
          "module_size": 66,
          "issues": [],
          "recommendations": [],
          "metric": 66
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 1,
          "functions_with_docstrings": 1,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 91.22807017543859,
      "issues": [
        "Found 3 lines exceeding 80 characters",
        "  Line 55: 82 chars",
        "  Line 59: 96 chars",
        "  Line 60: 84 chars"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation"
      ],
      "priority": "low"
    },
    {
      "path": "pages/drone_operations/dashboard.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/pages/drone_operations/dashboard.py",
      "total_lines": 94,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 34,
              "length": 86,
              "content": "from pages.drone_operations.components.squadron_mo..."
            },
            {
              "line_number": 35,
              "length": 82,
              "content": "from pages.drone_operations.components.telemetry_f..."
            },
            {
              "line_number": 36,
              "length": 86,
              "content": "from pages.drone_operations.components.mission_pla..."
            },
            {
              "line_number": 37,
              "length": 87,
              "content": "from pages.drone_operations.components.traffic_cam..."
            },
            {
              "line_number": 38,
              "length": 89,
              "content": "from pages.drone_operations.components.airspace_mo..."
            },
            {
              "line_number": 57,
              "length": 82,
              "content": "    # Initialize the telemetry collector data stru..."
            }
          ],
          "issues": [
            "Found 6 lines exceeding 80 characters",
            "  Line 34: 86 chars",
            "  Line 35: 82 chars",
            "  Line 36: 86 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 6
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 26.582278481012654,
          "comment_lines": 21,
          "code_lines": 58,
          "issues": [],
          "recommendations": [],
          "metric": 26.582278481012654
        },
        "module_size": {
          "compliant": true,
          "module_size": 94,
          "issues": [],
          "recommendations": [],
          "metric": 94
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 1,
          "functions_with_docstrings": 1,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 91.22807017543859,
      "issues": [
        "Found 6 lines exceeding 80 characters",
        "  Line 34: 86 chars",
        "  Line 35: 82 chars",
        "  Line 36: 86 chars"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation"
      ],
      "priority": "low"
    },
    {
      "path": "pages/drone_operations/models/__init__.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/pages/drone_operations/models/__init__.py",
      "total_lines": 34,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 27,
              "length": 99,
              "content": "from pages.drone_operations.models.telemetry impor..."
            },
            {
              "line_number": 28,
              "length": 101,
              "content": "from pages.drone_operations.models.mission import ..."
            }
          ],
          "issues": [
            "Found 2 lines exceeding 80 characters",
            "  Line 27: 99 chars",
            "  Line 28: 101 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 2
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 25.806451612903224,
          "comment_lines": 8,
          "code_lines": 23,
          "issues": [],
          "recommendations": [],
          "metric": 25.806451612903224
        },
        "module_size": {
          "compliant": true,
          "module_size": 34,
          "issues": [],
          "recommendations": [],
          "metric": 34
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100,
          "functions": 0,
          "functions_with_docstrings": 0,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 91.22807017543859,
      "issues": [
        "Found 2 lines exceeding 80 characters",
        "  Line 27: 99 chars",
        "  Line 28: 101 chars"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation"
      ],
      "priority": "low"
    },
    {
      "path": "pages/drone_operations/models/mission.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/pages/drone_operations/models/mission.py",
      "total_lines": 149,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 21,
              "length": 83,
              "content": "This module contains data models for drone mission..."
            },
            {
              "line_number": 122,
              "length": 83,
              "content": "        # This is a placeholder that would be impl..."
            }
          ],
          "issues": [
            "Found 2 lines exceeding 80 characters",
            "  Line 21: 83 chars",
            "  Line 122: 83 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 2
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 33.587786259541986,
          "comment_lines": 44,
          "code_lines": 87,
          "issues": [],
          "recommendations": [],
          "metric": 33.587786259541986
        },
        "module_size": {
          "compliant": true,
          "module_size": 149,
          "issues": [],
          "recommendations": [],
          "metric": 149
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 1,
          "functions_with_docstrings": 1,
          "classes": 6,
          "classes_with_docstrings": 6,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 91.22807017543859,
      "issues": [
        "Found 2 lines exceeding 80 characters",
        "  Line 21: 83 chars",
        "  Line 122: 83 chars"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation"
      ],
      "priority": "low"
    },
    {
      "path": "pages/drone_operations/models/telemetry.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/pages/drone_operations/models/telemetry.py",
      "total_lines": 98,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 31.3953488372093,
          "comment_lines": 27,
          "code_lines": 59,
          "issues": [],
          "recommendations": [],
          "metric": 31.3953488372093
        },
        "module_size": {
          "compliant": true,
          "module_size": 98,
          "issues": [],
          "recommendations": [],
          "metric": 98
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 1,
          "functions_with_docstrings": 1,
          "classes": 3,
          "classes_with_docstrings": 3,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 100.0,
      "issues": [],
      "recommendations": [],
      "priority": "low"
    },
    {
      "path": "pages/drone_operations/utils/__init__.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/pages/drone_operations/utils/__init__.py",
      "total_lines": 40,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 26,
              "length": 95,
              "content": "from pages.drone_operations.utils.map_utils import..."
            }
          ],
          "issues": [
            "Found 1 lines exceeding 80 characters",
            "  Line 26: 95 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 1
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 25.0,
          "comment_lines": 9,
          "code_lines": 27,
          "issues": [],
          "recommendations": [],
          "metric": 25.0
        },
        "module_size": {
          "compliant": true,
          "module_size": 40,
          "issues": [],
          "recommendations": [],
          "metric": 40
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100,
          "functions": 0,
          "functions_with_docstrings": 0,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 91.22807017543859,
      "issues": [
        "Found 1 lines exceeding 80 characters",
        "  Line 26: 95 chars"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation"
      ],
      "priority": "low"
    },
    {
      "path": "pages/drone_operations/utils/map_utils.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/pages/drone_operations/utils/map_utils.py",
      "total_lines": 101,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 45,
              "length": 109,
              "content": "            \"attr\": '&copy; <a href=\"https://www.o..."
            },
            {
              "line_number": 48,
              "length": 81,
              "content": "            \"url\": \"https://{s}.basemaps.cartocdn...."
            },
            {
              "line_number": 49,
              "length": 172,
              "content": "            \"attr\": '&copy; <a href=\"https://www.o..."
            },
            {
              "line_number": 53,
              "length": 172,
              "content": "            \"attr\": '&copy; <a href=\"https://www.o..."
            },
            {
              "line_number": 56,
              "length": 115,
              "content": "            \"url\": \"https://server.arcgisonline.co..."
            },
            {
              "line_number": 57,
              "length": 163,
              "content": "            \"attr\": 'Tiles &copy; Esri &mdash; Sou..."
            }
          ],
          "issues": [
            "Found 6 lines exceeding 80 characters",
            "  Line 45: 109 chars",
            "  Line 48: 81 chars",
            "  Line 49: 172 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 6
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 19.767441860465116,
          "comment_lines": 17,
          "code_lines": 69,
          "issues": [],
          "recommendations": [],
          "metric": 19.767441860465116
        },
        "module_size": {
          "compliant": true,
          "module_size": 101,
          "issues": [],
          "recommendations": [],
          "metric": 101
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 2,
          "functions_with_docstrings": 2,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 91.22807017543859,
      "issues": [
        "Found 6 lines exceeding 80 characters",
        "  Line 45: 109 chars",
        "  Line 48: 81 chars",
        "  Line 49: 172 chars"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation"
      ],
      "priority": "low"
    },
    {
      "path": "pages/drone_operations/utils/mission_patterns.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/pages/drone_operations/utils/mission_patterns.py",
      "total_lines": 380,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 107,
              "length": 95,
              "content": "    grid_points = generate_search_grid_pattern(tar..."
            },
            {
              "line_number": 159,
              "length": 88,
              "content": "    # Calculate starting point (distance_km away f..."
            },
            {
              "line_number": 190,
              "length": 103,
              "content": "    attack_points = generate_direct_attack_vector(..."
            },
            {
              "line_number": 341,
              "length": 85,
              "content": "        radius_deg = path_length_deg / (2 * math.p..."
            },
            {
              "line_number": 342,
              "length": 101,
              "content": "        return generate_orbit_pattern(target_lat, ..."
            },
            {
              "line_number": 366,
              "length": 97,
              "content": "    path_points = generate_reconnaissance_path(tar..."
            }
          ],
          "issues": [
            "Found 6 lines exceeding 80 characters",
            "  Line 107: 95 chars",
            "  Line 159: 88 chars",
            "  Line 190: 103 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 6
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 21.712538226299692,
          "comment_lines": 71,
          "code_lines": 256,
          "issues": [],
          "recommendations": [],
          "metric": 21.712538226299692
        },
        "module_size": {
          "compliant": false,
          "module_size": 380,
          "issues": [
            "Module size 380 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 380
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 8,
          "functions_with_docstrings": 8,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 73.68421052631578,
      "issues": [
        "Found 6 lines exceeding 80 characters",
        "  Line 107: 95 chars",
        "  Line 159: 88 chars",
        "  Line 190: 103 chars",
        "Module size 380 lines exceeds maximum 300 lines"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files"
      ],
      "priority": "low"
    },
    {
      "path": "pages/drone_operations.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/pages/drone_operations.py",
      "total_lines": 1000,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 58,
              "length": 109,
              "content": "            \"attr\": '&copy; <a href=\"https://www.o..."
            },
            {
              "line_number": 61,
              "length": 81,
              "content": "            \"url\": \"https://{s}.basemaps.cartocdn...."
            },
            {
              "line_number": 62,
              "length": 172,
              "content": "            \"attr\": '&copy; <a href=\"https://www.o..."
            },
            {
              "line_number": 66,
              "length": 172,
              "content": "            \"attr\": '&copy; <a href=\"https://www.o..."
            },
            {
              "line_number": 69,
              "length": 115,
              "content": "            \"url\": \"https://server.arcgisonline.co..."
            },
            {
              "line_number": 70,
              "length": 163,
              "content": "            \"attr\": 'Tiles &copy; Esri &mdash; Sou..."
            },
            {
              "line_number": 108,
              "length": 82,
              "content": "    # Initialize the telemetry collector data stru..."
            },
            {
              "line_number": 169,
              "length": 82,
              "content": "            base_lon = st.number_input(\"Longitude\"..."
            },
            {
              "line_number": 177,
              "length": 94,
              "content": "                st.session_state.drone_ids = st.se..."
            },
            {
              "line_number": 187,
              "length": 88,
              "content": "            time_acceleration = st.slider(\"Time Ac..."
            },
            {
              "line_number": 200,
              "length": 90,
              "content": "            if st.session_state.simulator_running ..."
            },
            {
              "line_number": 212,
              "length": 81,
              "content": "                        drone = st.session_state.d..."
            },
            {
              "line_number": 252,
              "length": 115,
              "content": "                            tooltip=f\"{d['drone_id..."
            },
            {
              "line_number": 253,
              "length": 84,
              "content": "                            icon=folium.Icon(color..."
            },
            {
              "line_number": 281,
              "length": 113,
              "content": "                        \"Position\": f\"{drone['posi..."
            },
            {
              "line_number": 314,
              "length": 134,
              "content": "                format_func=lambda i: f\"Drone {i+1..."
            },
            {
              "line_number": 321,
              "length": 82,
              "content": "                drone = st.session_state.drone_sim..."
            },
            {
              "line_number": 324,
              "length": 106,
              "content": "                matching_telemetry = [t for t in t..."
            },
            {
              "line_number": 325,
              "length": 88,
              "content": "                latest_telemetry = matching_teleme..."
            },
            {
              "line_number": 337,
              "length": 89,
              "content": "                    # If we have telemetry, use it..."
            },
            {
              "line_number": 345,
              "length": 87,
              "content": "                            \"Last Update\": latest_..."
            },
            {
              "line_number": 350,
              "length": 82,
              "content": "                            \"Longitude\": f\"{drone[..."
            },
            {
              "line_number": 361,
              "length": 89,
              "content": "                    # If we have telemetry, use it..."
            },
            {
              "line_number": 362,
              "length": 107,
              "content": "                    if latest_telemetry and 'batte..."
            },
            {
              "line_number": 373,
              "length": 83,
              "content": "                            \"Signal\": f\"{drone['st..."
            },
            {
              "line_number": 374,
              "length": 93,
              "content": "                            \"Mission Progress\": f\"..."
            },
            {
              "line_number": 404,
              "length": 99,
              "content": "                if selected_drone_id in telemetry_..."
            },
            {
              "line_number": 417,
              "length": 121,
              "content": "                        cols_to_display = ['timest..."
            },
            {
              "line_number": 418,
              "length": 89,
              "content": "                        cols_to_display = [c for c..."
            },
            {
              "line_number": 467,
              "length": 100,
              "content": "        target_lat = st.number_input(\"Target Latit..."
            },
            {
              "line_number": 468,
              "length": 102,
              "content": "        target_lon = st.number_input(\"Target Longi..."
            },
            {
              "line_number": 475,
              "length": 81,
              "content": "            altitude = st.number_input(\"Mission Al..."
            },
            {
              "line_number": 485,
              "length": 83,
              "content": "            approach_vector = st.slider(\"Approach ..."
            },
            {
              "line_number": 499,
              "length": 82,
              "content": "            altitude = st.number_input(\"Mission Al..."
            },
            {
              "line_number": 509,
              "length": 86,
              "content": "            path_type = st.selectbox(\"Path Type\", ..."
            },
            {
              "line_number": 511,
              "length": 83,
              "content": "            altitude = st.number_input(\"Mission Al..."
            },
            {
              "line_number": 533,
              "length": 85,
              "content": "            options = [f\"Drone {idx+1}: {name}\" fo..."
            },
            {
              "line_number": 543,
              "length": 112,
              "content": "            selected_drones = [available_drones[id..."
            },
            {
              "line_number": 551,
              "length": 97,
              "content": "                first_drone = st.session_state.dro..."
            },
            {
              "line_number": 581,
              "length": 118,
              "content": "                        st.success(f\"Mission assig..."
            },
            {
              "line_number": 583,
              "length": 124,
              "content": "                        st.error(f\"Failed to assig..."
            },
            {
              "line_number": 643,
              "length": 88,
              "content": "                        [drone[\"position\"][\"latitu..."
            },
            {
              "line_number": 644,
              "length": 107,
              "content": "                        tooltip=f\"{drone['name']} ..."
            },
            {
              "line_number": 650,
              "length": 88,
              "content": "                        path = st.session_state.dr..."
            },
            {
              "line_number": 652,
              "length": 89,
              "content": "                            path_points = [(p[\"lat..."
            },
            {
              "line_number": 671,
              "length": 105,
              "content": "                grid_size_deg = mission_params[\"gr..."
            },
            {
              "line_number": 692,
              "length": 85,
              "content": "                    while (x_step > 0 and x <= x_e..."
            },
            {
              "line_number": 720,
              "length": 89,
              "content": "            elif mission_type == \"Direct Attack\" a..."
            },
            {
              "line_number": 725,
              "length": 93,
              "content": "                # Calculate starting point (10km a..."
            },
            {
              "line_number": 749,
              "length": 85,
              "content": "            elif mission_type == \"Surveillance\" an..."
            },
            {
              "line_number": 751,
              "length": 105,
              "content": "                radius_deg = mission_params[\"orbit..."
            },
            {
              "line_number": 756,
              "length": 86,
              "content": "                    radius=mission_params[\"orbit_r..."
            },
            {
              "line_number": 783,
              "length": 84,
              "content": "            elif mission_type == \"Reconnaissance\" ..."
            },
            {
              "line_number": 785,
              "length": 109,
              "content": "                path_length_deg = mission_params[\"..."
            },
            {
              "line_number": 806,
              "length": 86,
              "content": "                        (target_lat - path_length_..."
            },
            {
              "line_number": 808,
              "length": 86,
              "content": "                        (target_lat + path_length_..."
            },
            {
              "line_number": 821,
              "length": 97,
              "content": "                    radius_deg = path_length_deg /..."
            },
            {
              "line_number": 826,
              "length": 81,
              "content": "                        point_lat = target_lat + r..."
            },
            {
              "line_number": 827,
              "length": 81,
              "content": "                        point_lon = target_lon + r..."
            },
            {
              "line_number": 854,
              "length": 89,
              "content": "        m = folium.Map(location=[39.8283, -98.5795..."
            },
            {
              "line_number": 860,
              "length": 120,
              "content": "        mission_type = st.selectbox(\"Mission Type\"..."
            },
            {
              "line_number": 893,
              "length": 82,
              "content": "            st.markdown(f\"**Location:** {camera['l..."
            },
            {
              "line_number": 897,
              "length": 96,
              "content": "            st.markdown(\"```\\nSimulated Camera Fee..."
            },
            {
              "line_number": 898,
              "length": 84,
              "content": "            st.text(f\"Last Updated: {datetime.now(..."
            },
            {
              "line_number": 953,
              "length": 84,
              "content": "                    [drone[\"position\"][\"latitude\"]..."
            },
            {
              "line_number": 954,
              "length": 106,
              "content": "                    tooltip=f\"{drone['name']} ({dr..."
            },
            {
              "line_number": 965,
              "length": 83,
              "content": "            aircraft_type = random.choice([\"B737\",..."
            },
            {
              "line_number": 970,
              "length": 103,
              "content": "                tooltip=f\"Flight: {aircraft_id}<br..."
            },
            {
              "line_number": 982,
              "length": 86,
              "content": "        alert_types = [\"Proximity Warning\", \"Restr..."
            },
            {
              "line_number": 985,
              "length": 105,
              "content": "            alert_time = (datetime.now() - timedel..."
            }
          ],
          "issues": [
            "Found 70 lines exceeding 80 characters",
            "  Line 58: 109 chars",
            "  Line 61: 81 chars",
            "  Line 62: 172 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 70
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 20.235294117647058,
          "comment_lines": 172,
          "code_lines": 678,
          "issues": [],
          "recommendations": [],
          "metric": 20.235294117647058
        },
        "module_size": {
          "compliant": false,
          "module_size": 1000,
          "issues": [
            "Module size 1000 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 1000
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 7,
          "functions_with_docstrings": 7,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": false,
          "complexity_issues": [
            "Function 'render_squadron_monitor' has high complexity (18 decision points)",
            "Function 'render_telemetry_feed' has high complexity (11 decision points)",
            "Function 'render_mission_planning' has high complexity (41 decision points)"
          ],
          "issues": [
            "Function 'render_squadron_monitor' has high complexity (18 decision points)",
            "Function 'render_telemetry_feed' has high complexity (11 decision points)",
            "Function 'render_mission_planning' has high complexity (41 decision points)"
          ],
          "recommendations": [
            "Break complex functions into smaller, focused functions",
            "Extract complex logic into separate methods or classes"
          ],
          "metric": 3
        }
      },
      "overall_compliant": false,
      "compliance_score": 65.78947368421052,
      "issues": [
        "Found 70 lines exceeding 80 characters",
        "  Line 58: 109 chars",
        "  Line 61: 81 chars",
        "  Line 62: 172 chars",
        "Module size 1000 lines exceeds maximum 300 lines",
        "Function 'render_squadron_monitor' has high complexity (18 decision points)",
        "Function 'render_telemetry_feed' has high complexity (11 decision points)",
        "Function 'render_mission_planning' has high complexity (41 decision points)"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files",
        "Break complex functions into smaller, focused functions",
        "Extract complex logic into separate methods or classes"
      ],
      "priority": "low"
    },
    {
      "path": "pages/drone_operations_refactored.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/pages/drone_operations_refactored.py",
      "total_lines": 40,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 25.71428571428571,
          "comment_lines": 9,
          "code_lines": 26,
          "issues": [],
          "recommendations": [],
          "metric": 25.71428571428571
        },
        "module_size": {
          "compliant": true,
          "module_size": 40,
          "issues": [],
          "recommendations": [],
          "metric": 40
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100,
          "functions": 0,
          "functions_with_docstrings": 0,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 100.0,
      "issues": [],
      "recommendations": [],
      "priority": "low"
    },
    {
      "path": "pages/enhanced_workflow_storyteller.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/pages/enhanced_workflow_storyteller.py",
      "total_lines": 491,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 108,
              "length": 93,
              "content": "def create_enhanced_demo_timeline(storyteller: Wor..."
            },
            {
              "line_number": 125,
              "length": 125,
              "content": "        description=\"Multi-domain intelligence ope..."
            },
            {
              "line_number": 136,
              "length": 106,
              "content": "        description=\"Initial planning, intelligenc..."
            },
            {
              "line_number": 145,
              "length": 103,
              "content": "        description=\"Comprehensive analysis of thr..."
            },
            {
              "line_number": 154,
              "length": 106,
              "content": "        description=\"Decision on resource allocati..."
            },
            {
              "line_number": 174,
              "length": 83,
              "content": "        description=\"Detailed reconnaissance and m..."
            },
            {
              "line_number": 183,
              "length": 93,
              "content": "        description=\"Analysis of target's digital ..."
            },
            {
              "line_number": 202,
              "length": 87,
              "content": "        description=\"Analysis of satellite imagery..."
            },
            {
              "line_number": 213,
              "length": 86,
              "content": "        description=\"Comprehensive vulnerability a..."
            },
            {
              "line_number": 222,
              "length": 92,
              "content": "        description=\"Detailed scan of network vuln..."
            },
            {
              "line_number": 231,
              "length": 92,
              "content": "        description=\"Discovery of advanced encrypt..."
            },
            {
              "line_number": 250,
              "length": 83,
              "content": "        description=\"Assessment of physical securi..."
            },
            {
              "line_number": 279,
              "length": 94,
              "content": "        description=\"Discovery of novel data exfil..."
            },
            {
              "line_number": 288,
              "length": 82,
              "content": "        description=\"Collection of geospatial inte..."
            },
            {
              "line_number": 297,
              "length": 96,
              "content": "        description=\"Challenge in allocating suffi..."
            },
            {
              "line_number": 309,
              "length": 85,
              "content": "        description=\"Comprehensive analysis of col..."
            },
            {
              "line_number": 327,
              "length": 105,
              "content": "        description=\"Preparation of comprehensive ..."
            },
            {
              "line_number": 368,
              "length": 81,
              "content": "        '<p>Track, visualize, and analyze operatio..."
            },
            {
              "line_number": 378,
              "length": 104,
              "content": "        description=\"Interactive visualization and..."
            },
            {
              "line_number": 391,
              "length": 114,
              "content": "    with st.expander(\"About the Enhanced Workflow ..."
            },
            {
              "line_number": 395,
              "length": 113,
              "content": "        This advanced tool provides a real-time vi..."
            },
            {
              "line_number": 404,
              "length": 117,
              "content": "        Use the dashboard to create new timelines,..."
            },
            {
              "line_number": 409,
              "length": 100,
              "content": "            if not st.session_state.load_enhanced_..."
            },
            {
              "line_number": 427,
              "length": 91,
              "content": "        st.info(\"No timelines available. Create a ..."
            },
            {
              "line_number": 449,
              "length": 96,
              "content": "            st.info(\"No timeline loaded. Create or..."
            }
          ],
          "issues": [
            "Found 25 lines exceeding 80 characters",
            "  Line 108: 93 chars",
            "  Line 125: 125 chars",
            "  Line 136: 106 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 25
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 17.36111111111111,
          "comment_lines": 75,
          "code_lines": 357,
          "issues": [],
          "recommendations": [],
          "metric": 17.36111111111111
        },
        "module_size": {
          "compliant": false,
          "module_size": 491,
          "issues": [
            "Module size 491 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 491
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 3,
          "functions_with_docstrings": 3,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 73.68421052631578,
      "issues": [
        "Found 25 lines exceeding 80 characters",
        "  Line 108: 93 chars",
        "  Line 125: 125 chars",
        "  Line 136: 106 chars",
        "Module size 491 lines exceeds maximum 300 lines"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files"
      ],
      "priority": "low"
    },
    {
      "path": "pages/geospatial_heatmap.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/pages/geospatial_heatmap.py",
      "total_lines": 171,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 41,
              "length": 85,
              "content": "from visualizers.map_builders.infrastructure_map i..."
            },
            {
              "line_number": 47,
              "length": 89,
              "content": "from visualizers.sample_data_generators import cre..."
            },
            {
              "line_number": 70,
              "length": 82,
              "content": "    This interactive geospatial heatmap visualizat..."
            },
            {
              "line_number": 71,
              "length": 84,
              "content": "    analysis of density patterns, intensity distri..."
            },
            {
              "line_number": 72,
              "length": 88,
              "content": "    across geographic locations. Supports multiple..."
            },
            {
              "line_number": 133,
              "length": 93,
              "content": "            st.info(\"Please select a data source i..."
            },
            {
              "line_number": 138,
              "length": 104,
              "content": "            map_tabs = st.tabs([\"Trafficking Route..."
            }
          ],
          "issues": [
            "Found 7 lines exceeding 80 characters",
            "  Line 41: 85 chars",
            "  Line 47: 89 chars",
            "  Line 70: 82 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 7
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 55.62913907284768,
          "comment_lines": 84,
          "code_lines": 67,
          "issues": [],
          "recommendations": [],
          "metric": 55.62913907284768
        },
        "module_size": {
          "compliant": true,
          "module_size": 171,
          "issues": [],
          "recommendations": [],
          "metric": 171
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 1,
          "functions_with_docstrings": 1,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 91.22807017543859,
      "issues": [
        "Found 7 lines exceeding 80 characters",
        "  Line 41: 85 chars",
        "  Line 47: 89 chars",
        "  Line 70: 82 chars"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation"
      ],
      "priority": "low"
    },
    {
      "path": "pages/geospatial_intelligence.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/pages/geospatial_intelligence.py",
      "total_lines": 3372,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 65,
              "length": 83,
              "content": "                    DistanceCalculator, HexagonalG..."
            },
            {
              "line_number": 68,
              "length": 89,
              "content": "                    from core.integrations.graph_d..."
            },
            {
              "line_number": 70,
              "length": 107,
              "content": "                        from core.integrations.sat..."
            },
            {
              "line_number": 73,
              "length": 87,
              "content": "                        plugin_error = f\"Failed to..."
            },
            {
              "line_number": 77,
              "length": 82,
              "content": "                plugin_error = f\"Failed to import ..."
            },
            {
              "line_number": 259,
              "length": 92,
              "content": "        return False, \"Plugin infrastructure not a..."
            },
            {
              "line_number": 307,
              "length": 86,
              "content": "                    description=\"Advanced geograph..."
            },
            {
              "line_number": 323,
              "length": 93,
              "content": "                    description=\"Hierarchical hexa..."
            },
            {
              "line_number": 339,
              "length": 91,
              "content": "                    description=\"Advanced spatial ..."
            },
            {
              "line_number": 355,
              "length": 88,
              "content": "                    description=\"Advanced hotspot ..."
            },
            {
              "line_number": 388,
              "length": 93,
              "content": "                    description=\"Neo4j graph datab..."
            },
            {
              "line_number": 404,
              "length": 91,
              "content": "                    description=\"Google Earth KML/..."
            },
            {
              "line_number": 444,
              "length": 83,
              "content": "def create_base_map(center=[37.7749, -122.4194], z..."
            },
            {
              "line_number": 560,
              "length": 94,
              "content": "        raise ValueError(f\"Data must contain coord..."
            },
            {
              "line_number": 609,
              "length": 102,
              "content": "    st.markdown('<p class=\"main-header\">Geospatial..."
            },
            {
              "line_number": 610,
              "length": 168,
              "content": "    st.markdown('<p class=\"info-text\">Advanced geo..."
            },
            {
              "line_number": 646,
              "length": 81,
              "content": "        with st.status(\"Initializing plugin system..."
            },
            {
              "line_number": 689,
              "length": 93,
              "content": "        st.markdown('<p class=\"section-header\">Hot..."
            },
            {
              "line_number": 697,
              "length": 89,
              "content": "        <p>Identify spatial clusters and patterns ..."
            },
            {
              "line_number": 698,
              "length": 117,
              "content": "        The hotspot analysis uses rigorous spatial..."
            },
            {
              "line_number": 701,
              "length": 104,
              "content": "            <li><strong>Getis-Ord Gi*</strong> - I..."
            },
            {
              "line_number": 702,
              "length": 100,
              "content": "            <li><strong>Local Moran's I</strong> -..."
            },
            {
              "line_number": 703,
              "length": 101,
              "content": "            <li><strong>Kernel Density Estimation<..."
            },
            {
              "line_number": 704,
              "length": 90,
              "content": "            <li><strong>DBSCAN Clustering</strong>..."
            },
            {
              "line_number": 724,
              "length": 105,
              "content": "            uploaded_file = st.file_uploader(\"Uplo..."
            },
            {
              "line_number": 838,
              "length": 91,
              "content": "                [\"Getis-Ord Gi*\", \"Local Moran's I..."
            },
            {
              "line_number": 845,
              "length": 82,
              "content": "            significance = st.slider(\"Significance..."
            },
            {
              "line_number": 922,
              "length": 83,
              "content": "                        analyzer = HotspotAnalysis..."
            },
            {
              "line_number": 928,
              "length": 97,
              "content": "                        points = [(row['latitude']..."
            },
            {
              "line_number": 958,
              "length": 88,
              "content": "                            hotspots = result_df[r..."
            },
            {
              "line_number": 964,
              "length": 90,
              "content": "                            coldspots = result_df[..."
            },
            {
              "line_number": 978,
              "length": 105,
              "content": "                                    popup=f\"Z-scor..."
            },
            {
              "line_number": 993,
              "length": 105,
              "content": "                                    popup=f\"Z-scor..."
            },
            {
              "line_number": 1000,
              "length": 83,
              "content": "                            nonsig = result_df[res..."
            },
            {
              "line_number": 1027,
              "length": 123,
              "content": "                            <div style=\"position: ..."
            },
            {
              "line_number": 1028,
              "length": 98,
              "content": "                                       padding: 10..."
            },
            {
              "line_number": 1030,
              "length": 103,
              "content": "                            <p><i class=\"fa fa-cir..."
            },
            {
              "line_number": 1031,
              "length": 105,
              "content": "                            <p><i class=\"fa fa-cir..."
            },
            {
              "line_number": 1032,
              "length": 98,
              "content": "                            <p><i class=\"fa fa-cir..."
            },
            {
              "line_number": 1040,
              "length": 84,
              "content": "                            m.get_root().html.add_..."
            },
            {
              "line_number": 1055,
              "length": 128,
              "content": "                            <p><strong>Interpretat..."
            },
            {
              "line_number": 1056,
              "length": 123,
              "content": "                            spatial clusters of hi..."
            },
            {
              "line_number": 1057,
              "length": 124,
              "content": "                            hot spots where high v..."
            },
            {
              "line_number": 1058,
              "length": 103,
              "content": "                            values cluster togethe..."
            },
            {
              "line_number": 1103,
              "length": 93,
              "content": "                                subset = result_df..."
            },
            {
              "line_number": 1119,
              "length": 93,
              "content": "                                        radius=8 i..."
            },
            {
              "line_number": 1123,
              "length": 103,
              "content": "                                        fill_opaci..."
            },
            {
              "line_number": 1124,
              "length": 125,
              "content": "                                        popup=f\"I:..."
            },
            {
              "line_number": 1132,
              "length": 123,
              "content": "                            <div style=\"position: ..."
            },
            {
              "line_number": 1133,
              "length": 98,
              "content": "                                       padding: 10..."
            },
            {
              "line_number": 1135,
              "length": 99,
              "content": "                            <p><i class=\"fa fa-cir..."
            },
            {
              "line_number": 1136,
              "length": 98,
              "content": "                            <p><i class=\"fa fa-cir..."
            },
            {
              "line_number": 1137,
              "length": 101,
              "content": "                            <p><i class=\"fa fa-cir..."
            },
            {
              "line_number": 1138,
              "length": 100,
              "content": "                            <p><i class=\"fa fa-cir..."
            },
            {
              "line_number": 1139,
              "length": 98,
              "content": "                            <p><i class=\"fa fa-cir..."
            },
            {
              "line_number": 1147,
              "length": 84,
              "content": "                            m.get_root().html.add_..."
            },
            {
              "line_number": 1162,
              "length": 121,
              "content": "                            <p><strong>Interpretat..."
            },
            {
              "line_number": 1163,
              "length": 112,
              "content": "                            High-High clusters sho..."
            },
            {
              "line_number": 1164,
              "length": 108,
              "content": "                            Low-Low clusters show ..."
            },
            {
              "line_number": 1165,
              "length": 87,
              "content": "                            High-Low outliers are ..."
            },
            {
              "line_number": 1166,
              "length": 91,
              "content": "                            Low-High outliers are ..."
            },
            {
              "line_number": 1181,
              "length": 93,
              "content": "                            results = analyzer.ker..."
            },
            {
              "line_number": 1199,
              "length": 82,
              "content": "                            heat_data = [[row['lat..."
            },
            {
              "line_number": 1232,
              "length": 116,
              "content": "                            <p><strong>Interpretat..."
            },
            {
              "line_number": 1233,
              "length": 102,
              "content": "                            representing the conce..."
            },
            {
              "line_number": 1234,
              "length": 103,
              "content": "                            while blue areas indic..."
            },
            {
              "line_number": 1244,
              "length": 102,
              "content": "                            results = analyzer.dbs..."
            },
            {
              "line_number": 1270,
              "length": 81,
              "content": "                                'darkred', 'darkbl..."
            },
            {
              "line_number": 1292,
              "length": 94,
              "content": "                                cluster_points = r..."
            },
            {
              "line_number": 1305,
              "length": 86,
              "content": "                                        fill_opaci..."
            },
            {
              "line_number": 1313,
              "length": 96,
              "content": "                            st.subheader(f\"DBSCAN ..."
            },
            {
              "line_number": 1322,
              "length": 107,
              "content": "                            <p><strong>Interpretat..."
            },
            {
              "line_number": 1323,
              "length": 108,
              "content": "                            separated by regions o..."
            },
            {
              "line_number": 1324,
              "length": 105,
              "content": "                            while gray points are ..."
            },
            {
              "line_number": 1337,
              "length": 97,
              "content": "        st.markdown('<p class=\"section-header\">Net..."
            },
            {
              "line_number": 1345,
              "length": 102,
              "content": "        <p>Analyze network relationships and conne..."
            },
            {
              "line_number": 1346,
              "length": 115,
              "content": "        The network intelligence module integrates..."
            },
            {
              "line_number": 1349,
              "length": 119,
              "content": "            <li><strong>Graph Visualization</stron..."
            },
            {
              "line_number": 1350,
              "length": 112,
              "content": "            <li><strong>Centrality Analysis</stron..."
            },
            {
              "line_number": 1351,
              "length": 107,
              "content": "            <li><strong>Community Detection</stron..."
            },
            {
              "line_number": 1352,
              "length": 97,
              "content": "            <li><strong>Path Analysis</strong> - F..."
            },
            {
              "line_number": 1383,
              "length": 124,
              "content": "                neo4j_uri = st.text_input(\"Neo4j U..."
            },
            {
              "line_number": 1389,
              "length": 90,
              "content": "                neo4j_user = st.text_input(\"Userna..."
            },
            {
              "line_number": 1401,
              "length": 99,
              "content": "                neo4j_database = st.text_input(\"Da..."
            },
            {
              "line_number": 1454,
              "length": 114,
              "content": "                        st.info(\"This is a simulat..."
            },
            {
              "line_number": 1465,
              "length": 93,
              "content": "                            connector_class = feat..."
            },
            {
              "line_number": 1471,
              "length": 81,
              "content": "                            st.success(\"Retrieved ..."
            },
            {
              "line_number": 1482,
              "length": 91,
              "content": "                                    \"password\": \"*..."
            },
            {
              "line_number": 1490,
              "length": 87,
              "content": "                            st.error(f\"Failed to i..."
            },
            {
              "line_number": 1558,
              "length": 86,
              "content": "                                'name': ['Node1', ..."
            },
            {
              "line_number": 1559,
              "length": 98,
              "content": "                                'type': ['Person',..."
            },
            {
              "line_number": 1565,
              "length": 81,
              "content": "                                    {'date': '2025..."
            },
            {
              "line_number": 1586,
              "length": 87,
              "content": "                        [\"Network Graph\", \"Hierarc..."
            },
            {
              "line_number": 1663,
              "length": 89,
              "content": "                            node_degrees = [len(li..."
            },
            {
              "line_number": 1686,
              "length": 110,
              "content": "                                text=[f\"Node {i}<b..."
            },
            {
              "line_number": 1699,
              "length": 97,
              "content": "                                xaxis=dict(showgri..."
            },
            {
              "line_number": 1700,
              "length": 97,
              "content": "                                yaxis=dict(showgri..."
            },
            {
              "line_number": 1721,
              "length": 81,
              "content": "                            metric_col1, metric_co..."
            },
            {
              "line_number": 1757,
              "length": 87,
              "content": "                        [\"Centrality Measures\", \"C..."
            },
            {
              "line_number": 1800,
              "length": 87,
              "content": "                                eigen_cent = nx.ei..."
            },
            {
              "line_number": 1808,
              "length": 82,
              "content": "                                    'Degree': [deg..."
            },
            {
              "line_number": 1809,
              "length": 88,
              "content": "                                    'Betweenness':..."
            },
            {
              "line_number": 1810,
              "length": 84,
              "content": "                                    'Closeness': [..."
            },
            {
              "line_number": 1811,
              "length": 85,
              "content": "                                    'Eigenvector':..."
            },
            {
              "line_number": 1883,
              "length": 144,
              "content": "                                <li><strong>Degree..."
            },
            {
              "line_number": 1884,
              "length": 162,
              "content": "                                <li><strong>Betwee..."
            },
            {
              "line_number": 1885,
              "length": 190,
              "content": "                                <li><strong>Closen..."
            },
            {
              "line_number": 1886,
              "length": 209,
              "content": "                                <li><strong>Eigenv..."
            },
            {
              "line_number": 1913,
              "length": 91,
              "content": "                                communities = nx.c..."
            },
            {
              "line_number": 1970,
              "length": 88,
              "content": "                                node_communities =..."
            },
            {
              "line_number": 1993,
              "length": 118,
              "content": "                                    text=[f\"Node {..."
            },
            {
              "line_number": 2006,
              "length": 101,
              "content": "                                    xaxis=dict(sho..."
            },
            {
              "line_number": 2007,
              "length": 101,
              "content": "                                    yaxis=dict(sho..."
            },
            {
              "line_number": 2028,
              "length": 85,
              "content": "                                metric_col1, metri..."
            },
            {
              "line_number": 2042,
              "length": 88,
              "content": "                                    modularity = n..."
            },
            {
              "line_number": 2050,
              "length": 98,
              "content": "                                    avg_size = sum..."
            },
            {
              "line_number": 2051,
              "length": 86,
              "content": "                                    st.metric(\"Avg..."
            },
            {
              "line_number": 2058,
              "length": 88,
              "content": "                                    'Community': [..."
            },
            {
              "line_number": 2060,
              "length": 96,
              "content": "                                    'Nodes': [\", \"..."
            },
            {
              "line_number": 2111,
              "length": 111,
              "content": "                                    source = st.nu..."
            },
            {
              "line_number": 2118,
              "length": 111,
              "content": "                                    target = st.nu..."
            },
            {
              "line_number": 2129,
              "length": 101,
              "content": "                                    shortest_path ..."
            },
            {
              "line_number": 2135,
              "length": 106,
              "content": "                                    path_length = ..."
            },
            {
              "line_number": 2141,
              "length": 100,
              "content": "                                    st.success(f\"F..."
            },
            {
              "line_number": 2179,
              "length": 103,
              "content": "                                            if (sh..."
            },
            {
              "line_number": 2180,
              "length": 99,
              "content": "                                               (sh..."
            },
            {
              "line_number": 2188,
              "length": 85,
              "content": "                                        color = '#..."
            },
            {
              "line_number": 2276,
              "length": 99,
              "content": "                                        title=f'Sh..."
            },
            {
              "line_number": 2281,
              "length": 105,
              "content": "                                        xaxis=dict..."
            },
            {
              "line_number": 2282,
              "length": 105,
              "content": "                                        yaxis=dict..."
            },
            {
              "line_number": 2298,
              "length": 103,
              "content": "                                    st.error(f\"No ..."
            },
            {
              "line_number": 2304,
              "length": 140,
              "content": "                st.markdown('<div class=\"info-text..."
            },
            {
              "line_number": 2315,
              "length": 100,
              "content": "        st.markdown('<p class=\"section-header\">Hex..."
            },
            {
              "line_number": 2323,
              "length": 113,
              "content": "        <p>Analyze geospatial data using hierarchi..."
            },
            {
              "line_number": 2324,
              "length": 124,
              "content": "        Hexagonal grids provide optimal tessellati..."
            },
            {
              "line_number": 2327,
              "length": 110,
              "content": "            <li><strong>Multi-Resolution Analysis<..."
            },
            {
              "line_number": 2328,
              "length": 113,
              "content": "            <li><strong>Spatial Aggregation</stron..."
            },
            {
              "line_number": 2329,
              "length": 97,
              "content": "            <li><strong>Coverage Analysis</strong>..."
            },
            {
              "line_number": 2330,
              "length": 105,
              "content": "            <li><strong>Neighborhood Operations</s..."
            },
            {
              "line_number": 2359,
              "length": 83,
              "content": "                format_func=lambda x: f\"Level {x} ..."
            },
            {
              "line_number": 2380,
              "length": 93,
              "content": "                center_lat = st.number_input(\"Cent..."
            },
            {
              "line_number": 2387,
              "length": 96,
              "content": "                center_lon = st.number_input(\"Cent..."
            },
            {
              "line_number": 2444,
              "length": 84,
              "content": "                    cells = grid.get_neighbors(cen..."
            },
            {
              "line_number": 2450,
              "length": 81,
              "content": "                    m = create_base_map(center=[ce..."
            },
            {
              "line_number": 2518,
              "length": 117,
              "content": "                    grid_count_placeholder.info(f\"..."
            },
            {
              "line_number": 2618,
              "length": 90,
              "content": "                st.info(\"Configure and generate a ..."
            },
            {
              "line_number": 2629,
              "length": 101,
              "content": "        st.markdown('<p class=\"section-header\">Goo..."
            },
            {
              "line_number": 2637,
              "length": 100,
              "content": "        <p>Seamlessly integrate with Google Earth ..."
            },
            {
              "line_number": 2638,
              "length": 90,
              "content": "        Import and export KML/KMZ files with custo..."
            },
            {
              "line_number": 2641,
              "length": 99,
              "content": "            <li><strong>KML/KMZ Import</strong> - ..."
            },
            {
              "line_number": 2642,
              "length": 112,
              "content": "            <li><strong>KML/KMZ Export</strong> - ..."
            },
            {
              "line_number": 2643,
              "length": 104,
              "content": "            <li><strong>Custom Styling</strong> - ..."
            },
            {
              "line_number": 2644,
              "length": 90,
              "content": "            <li><strong>Temporal Data</strong> - S..."
            },
            {
              "line_number": 2670,
              "length": 87,
              "content": "            uploaded_kml = st.file_uploader(\"Uploa..."
            },
            {
              "line_number": 2710,
              "length": 92,
              "content": "                        manager_class = feature_re..."
            },
            {
              "line_number": 2716,
              "length": 82,
              "content": "                        st.success(\"Retrieved Goog..."
            },
            {
              "line_number": 2730,
              "length": 92,
              "content": "                            'name': ['Point A', 'P..."
            },
            {
              "line_number": 2732,
              "length": 87,
              "content": "                            'longitude': [-122.41,..."
            },
            {
              "line_number": 2740,
              "length": 88,
              "content": "                            'category': ['Target',..."
            },
            {
              "line_number": 2842,
              "length": 91,
              "content": "                    st.error(\"No data available fo..."
            },
            {
              "line_number": 2859,
              "length": 96,
              "content": "                        filename = f\"nyxtrace_expo..."
            },
            {
              "line_number": 2873,
              "length": 86,
              "content": "    <description>Exported from NyxTrace Geospatial..."
            },
            {
              "line_number": 2877,
              "length": 82,
              "content": "          <href>http://maps.google.com/mapfiles/km..."
            },
            {
              "line_number": 2884,
              "length": 82,
              "content": "          <href>http://maps.google.com/mapfiles/km..."
            },
            {
              "line_number": 2891,
              "length": 83,
              "content": "          <href>http://maps.google.com/mapfiles/km..."
            },
            {
              "line_number": 2898,
              "length": 82,
              "content": "          <href>http://maps.google.com/mapfiles/km..."
            },
            {
              "line_number": 2921,
              "length": 135,
              "content": "                            mime=\"application/vnd...."
            },
            {
              "line_number": 2980,
              "length": 93,
              "content": "                <p><strong>How It Works:</strong> ..."
            },
            {
              "line_number": 2982,
              "length": 95,
              "content": "                <li>Import complex KML/KMZ files w..."
            },
            {
              "line_number": 2984,
              "length": 84,
              "content": "                <li>Analyze the spatial relationsh..."
            },
            {
              "line_number": 2985,
              "length": 106,
              "content": "                <li>Export your analysis results b..."
            },
            {
              "line_number": 3006,
              "length": 93,
              "content": "        st.markdown('<p class=\"section-header\">Adv..."
            },
            {
              "line_number": 3014,
              "length": 85,
              "content": "        <p>Explore and manage the advanced plugin ..."
            },
            {
              "line_number": 3015,
              "length": 104,
              "content": "        The plugin architecture enables extensibil..."
            },
            {
              "line_number": 3018,
              "length": 98,
              "content": "            <li><strong>Dynamic Discovery</strong>..."
            },
            {
              "line_number": 3019,
              "length": 103,
              "content": "            <li><strong>Lifecycle Management</stro..."
            },
            {
              "line_number": 3020,
              "length": 105,
              "content": "            <li><strong>Dependency Resolution</str..."
            },
            {
              "line_number": 3021,
              "length": 95,
              "content": "            <li><strong>Capability Reporting</stro..."
            },
            {
              "line_number": 3086,
              "length": 93,
              "content": "                    st.dataframe(plugins_df[['name..."
            },
            {
              "line_number": 3095,
              "length": 97,
              "content": "                        format_func=lambda x: plug..."
            },
            {
              "line_number": 3126,
              "length": 86,
              "content": "                            st.markdown(f\"**Descri..."
            },
            {
              "line_number": 3141,
              "length": 92,
              "content": "                            is_active = selected_p..."
            },
            {
              "line_number": 3155,
              "length": 91,
              "content": "                                        success = ..."
            },
            {
              "line_number": 3162,
              "length": 95,
              "content": "                                            st.suc..."
            },
            {
              "line_number": 3164,
              "length": 102,
              "content": "                                            st.err..."
            },
            {
              "line_number": 3178,
              "length": 93,
              "content": "                                        success = ..."
            },
            {
              "line_number": 3185,
              "length": 97,
              "content": "                                            st.suc..."
            },
            {
              "line_number": 3187,
              "length": 104,
              "content": "                                            st.err..."
            },
            {
              "line_number": 3201,
              "length": 85,
              "content": "                                    get_capabiliti..."
            },
            {
              "line_number": 3207,
              "length": 93,
              "content": "                                        plugin = r..."
            },
            {
              "line_number": 3214,
              "length": 85,
              "content": "                                            # Func..."
            },
            {
              "line_number": 3219,
              "length": 88,
              "content": "                                                ca..."
            },
            {
              "line_number": 3221,
              "length": 88,
              "content": "                                                # ..."
            },
            {
              "line_number": 3227,
              "length": 81,
              "content": "                                                # ..."
            },
            {
              "line_number": 3231,
              "length": 97,
              "content": "                                                st..."
            },
            {
              "line_number": 3237,
              "length": 90,
              "content": "                                            st.err..."
            },
            {
              "line_number": 3243,
              "length": 108,
              "content": "                    st.info(\"No plugins discovered..."
            },
            {
              "line_number": 3303,
              "length": 82,
              "content": "                    features_df = pd.DataFrame.fro..."
            },
            {
              "line_number": 3314,
              "length": 82,
              "content": "                        st.dataframe(features_df[[..."
            },
            {
              "line_number": 3320,
              "length": 118,
              "content": "                    st.info(\"No features registere..."
            },
            {
              "line_number": 3343,
              "length": 82,
              "content": "                    services_df = pd.DataFrame.fro..."
            },
            {
              "line_number": 3354,
              "length": 85,
              "content": "                        st.dataframe(services_df[[..."
            },
            {
              "line_number": 3366,
              "length": 110,
              "content": "            st.error(\"Plugin infrastructure not av..."
            }
          ],
          "issues": [
            "Found 203 lines exceeding 80 characters",
            "  Line 65: 83 chars",
            "  Line 68: 89 chars",
            "  Line 70: 107 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 203
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 55.742574257425744,
          "comment_lines": 1689,
          "code_lines": 1341,
          "issues": [],
          "recommendations": [],
          "metric": 55.742574257425744
        },
        "module_size": {
          "compliant": false,
          "module_size": 3372,
          "issues": [
            "Module size 3372 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 3372
        },
        "docstrings": {
          "compliant": false,
          "docstring_coverage": 14.814814814814813,
          "functions": 21,
          "functions_with_docstrings": 4,
          "classes": 6,
          "classes_with_docstrings": 0,
          "issues": [
            "Docstring coverage 14.8% below minimum 80.0%",
            "  Functions: 4/21 with docstrings",
            "  Classes: 0/6 with docstrings"
          ],
          "recommendations": [
            "Add docstrings to all functions and classes",
            "Use clear, descriptive docstrings following Google or NumPy style"
          ],
          "metric": 14.814814814814813
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": false,
          "complexity_issues": [
            "Function 'show_geospatial_analysis' has high complexity (90 decision points)"
          ],
          "issues": [
            "Function 'show_geospatial_analysis' has high complexity (90 decision points)"
          ],
          "recommendations": [
            "Break complex functions into smaller, focused functions",
            "Extract complex logic into separate methods or classes"
          ],
          "metric": 1
        }
      },
      "overall_compliant": false,
      "compliance_score": 42.722547108512025,
      "issues": [
        "Found 203 lines exceeding 80 characters",
        "  Line 65: 83 chars",
        "  Line 68: 89 chars",
        "  Line 70: 107 chars",
        "Module size 3372 lines exceeds maximum 300 lines",
        "Docstring coverage 14.8% below minimum 80.0%",
        "  Functions: 4/21 with docstrings",
        "  Classes: 0/6 with docstrings",
        "Function 'show_geospatial_analysis' has high complexity (90 decision points)"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files",
        "Add docstrings to all functions and classes",
        "Use clear, descriptive docstrings following Google or NumPy style",
        "Break complex functions into smaller, focused functions",
        "Extract complex logic into separate methods or classes"
      ],
      "priority": "medium"
    },
    {
      "path": "pages/kali_tools_explorer.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/pages/kali_tools_explorer.py",
      "total_lines": 414,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 71,
              "length": 89,
              "content": "    <div style=\"background-color:#1E1E1E; padding:..."
            },
            {
              "line_number": 75,
              "length": 143,
              "content": "            <span style=\"background-color:#333333;..."
            },
            {
              "line_number": 76,
              "length": 140,
              "content": "            <span style=\"background-color:#333333;..."
            },
            {
              "line_number": 97,
              "length": 99,
              "content": "    st.markdown(f\"**URL:** [{tool_data.get('Tool U..."
            },
            {
              "line_number": 147,
              "length": 87,
              "content": "def load_basic_tools_data(_collector: KaliToolsCol..."
            },
            {
              "line_number": 182,
              "length": 87,
              "content": "    detailed_cache_file = os.path.join(_collector...."
            },
            {
              "line_number": 211,
              "length": 88,
              "content": "    sorted_data = sorted(zip(categories, tool_coun..."
            },
            {
              "line_number": 212,
              "length": 85,
              "content": "    sorted_categories, sorted_counts = zip(*sorted..."
            },
            {
              "line_number": 268,
              "length": 81,
              "content": "    search_query = st.sidebar.text_input(\"Search b..."
            },
            {
              "line_number": 286,
              "length": 86,
              "content": "            with st.spinner(\"Fetching detailed inf..."
            },
            {
              "line_number": 287,
              "length": 83,
              "content": "                collector.collect_all_tool_details..."
            },
            {
              "line_number": 296,
              "length": 108,
              "content": "            filtered_df = basic_tools_df[basic_too..."
            },
            {
              "line_number": 313,
              "length": 95,
              "content": "            selected_tool_row = filtered_df[filter..."
            },
            {
              "line_number": 318,
              "length": 98,
              "content": "                detailed_row = detailed_tools_df[d..."
            },
            {
              "line_number": 324,
              "length": 83,
              "content": "                    st.warning(\"Detailed informati..."
            },
            {
              "line_number": 328,
              "length": 90,
              "content": "                            details = collector.ge..."
            },
            {
              "line_number": 329,
              "length": 81,
              "content": "                            details[\"Tool Name\"] =..."
            },
            {
              "line_number": 336,
              "length": 86,
              "content": "                        details = collector.get_to..."
            },
            {
              "line_number": 377,
              "length": 96,
              "content": "                st.info(\"Category information not ..."
            },
            {
              "line_number": 379,
              "length": 92,
              "content": "            st.info(\"Category information not avai..."
            },
            {
              "line_number": 390,
              "length": 102,
              "content": "            has_description = detailed_tools_df[\"D..."
            },
            {
              "line_number": 391,
              "length": 100,
              "content": "            description_percentage = (has_descript..."
            },
            {
              "line_number": 394,
              "length": 95,
              "content": "            has_commands = detailed_tools_df[\"Comm..."
            },
            {
              "line_number": 395,
              "length": 94,
              "content": "            commands_percentage = (has_commands / ..."
            },
            {
              "line_number": 404,
              "length": 106,
              "content": "                st.metric(\"Tools with Descriptions..."
            },
            {
              "line_number": 407,
              "length": 96,
              "content": "                st.metric(\"Tools with Commands\", f..."
            },
            {
              "line_number": 409,
              "length": 87,
              "content": "            # Potentially create other analytics v..."
            },
            {
              "line_number": 411,
              "length": 81,
              "content": "            st.info(\"Analytics not available. Plea..."
            }
          ],
          "issues": [
            "Found 28 lines exceeding 80 characters",
            "  Line 71: 89 chars",
            "  Line 75: 143 chars",
            "  Line 76: 140 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 28
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 28.07017543859649,
          "comment_lines": 96,
          "code_lines": 246,
          "issues": [],
          "recommendations": [],
          "metric": 28.07017543859649
        },
        "module_size": {
          "compliant": false,
          "module_size": 414,
          "issues": [
            "Module size 414 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 414
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 7,
          "functions_with_docstrings": 7,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": false,
          "complexity_issues": [
            "Function 'main' has high complexity (14 decision points)"
          ],
          "issues": [
            "Function 'main' has high complexity (14 decision points)"
          ],
          "recommendations": [
            "Break complex functions into smaller, focused functions",
            "Extract complex logic into separate methods or classes"
          ],
          "metric": 1
        }
      },
      "overall_compliant": false,
      "compliance_score": 65.78947368421052,
      "issues": [
        "Found 28 lines exceeding 80 characters",
        "  Line 71: 89 chars",
        "  Line 75: 143 chars",
        "  Line 76: 140 chars",
        "Module size 414 lines exceeds maximum 300 lines",
        "Function 'main' has high complexity (14 decision points)"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files",
        "Break complex functions into smaller, focused functions",
        "Extract complex logic into separate methods or classes"
      ],
      "priority": "low"
    },
    {
      "path": "pages/main.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/pages/main.py",
      "total_lines": 996,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 198,
              "length": 91,
              "content": "            \"<h1 style='font-size: 1.5rem; margin-..."
            },
            {
              "line_number": 206,
              "length": 82,
              "content": "            <span style=\"font-size: 0.9rem; color:..."
            },
            {
              "line_number": 251,
              "length": 81,
              "content": "            <div style=\"font-size: 0.9rem; font-we..."
            },
            {
              "line_number": 263,
              "length": 85,
              "content": "    <div style=\"display: flex; justify-content: sp..."
            },
            {
              "line_number": 264,
              "length": 122,
              "content": "        <div style=\"background-color: #1A1C24; bor..."
            },
            {
              "line_number": 265,
              "length": 82,
              "content": "            <div style=\"font-size: 0.8rem; color: ..."
            },
            {
              "line_number": 266,
              "length": 86,
              "content": "            <div style=\"font-size: 1.8rem; font-we..."
            },
            {
              "line_number": 267,
              "length": 83,
              "content": "            <div style=\"font-size: 0.8rem; color: ..."
            },
            {
              "line_number": 269,
              "length": 122,
              "content": "        <div style=\"background-color: #1A1C24; bor..."
            },
            {
              "line_number": 270,
              "length": 86,
              "content": "            <div style=\"font-size: 0.8rem; color: ..."
            },
            {
              "line_number": 271,
              "length": 86,
              "content": "            <div style=\"font-size: 1.8rem; font-we..."
            },
            {
              "line_number": 272,
              "length": 81,
              "content": "            <div style=\"font-size: 0.8rem; color: ..."
            },
            {
              "line_number": 274,
              "length": 122,
              "content": "        <div style=\"background-color: #1A1C24; bor..."
            },
            {
              "line_number": 276,
              "length": 92,
              "content": "            <div style=\"font-size: 1.8rem; font-we..."
            },
            {
              "line_number": 277,
              "length": 93,
              "content": "            <div style=\"font-size: 0.8rem; color: ..."
            },
            {
              "line_number": 279,
              "length": 122,
              "content": "        <div style=\"background-color: #1A1C24; bor..."
            },
            {
              "line_number": 281,
              "length": 95,
              "content": "            <div style=\"font-size: 1.8rem; font-we..."
            },
            {
              "line_number": 282,
              "length": 85,
              "content": "            <div style=\"font-size: 0.8rem; color: ..."
            },
            {
              "line_number": 461,
              "length": 154,
              "content": "        hovertemplate=\"<b>%{customdata[0]}</b><br>..."
            },
            {
              "line_number": 523,
              "length": 109,
              "content": "            \"details\": \"Multiple failed authentica..."
            },
            {
              "line_number": 534,
              "length": 83,
              "content": "            \"details\": \"Unauthorized access to sec..."
            },
            {
              "line_number": 545,
              "length": 86,
              "content": "            \"details\": \"Large outbound data transf..."
            },
            {
              "line_number": 556,
              "length": 94,
              "content": "            \"details\": \"Unusual connection pattern..."
            },
            {
              "line_number": 567,
              "length": 90,
              "content": "            \"details\": \"Badge reader detected inva..."
            },
            {
              "line_number": 578,
              "length": 96,
              "content": "            \"details\": \"Phone call to help desk re..."
            },
            {
              "line_number": 612,
              "length": 172,
              "content": "            severity_badge = \"<span style='backgro..."
            },
            {
              "line_number": 614,
              "length": 176,
              "content": "            severity_badge = \"<span style='backgro..."
            },
            {
              "line_number": 616,
              "length": 171,
              "content": "            severity_badge = \"<span style='backgro..."
            },
            {
              "line_number": 619,
              "length": 195,
              "content": "        status_badge = f\"<span style='background-c..."
            },
            {
              "line_number": 625,
              "length": 173,
              "content": "            <div style=\"position: absolute; left: ..."
            },
            {
              "line_number": 626,
              "length": 119,
              "content": "            <div style=\"background-color: #1A1C24;..."
            },
            {
              "line_number": 627,
              "length": 117,
              "content": "                <div style=\"display: flex; justify..."
            },
            {
              "line_number": 628,
              "length": 123,
              "content": "                    <div style=\"font-size: 0.8rem;..."
            },
            {
              "line_number": 631,
              "length": 113,
              "content": "                <div style=\"font-size: 1rem; font-..."
            },
            {
              "line_number": 632,
              "length": 125,
              "content": "                <div style=\"font-size: 0.8rem; col..."
            },
            {
              "line_number": 633,
              "length": 146,
              "content": "                <div style=\"display: flex; justify..."
            },
            {
              "line_number": 714,
              "length": 90,
              "content": "    # Sample data for cyber attack trend - use 'ME..."
            },
            {
              "line_number": 761,
              "length": 87,
              "content": "            hovertemplate=\"<b>%{x|%b %Y}</b><br>Se..."
            },
            {
              "line_number": 884,
              "length": 85,
              "content": "                <h4 style=\"margin-top: 0; font-siz..."
            },
            {
              "line_number": 901,
              "length": 81,
              "content": "                <h4 style=\"margin-top: 0; font-siz..."
            },
            {
              "line_number": 917,
              "length": 99,
              "content": "                <div style=\"display: flex; justify..."
            },
            {
              "line_number": 921,
              "length": 99,
              "content": "                <div style=\"display: flex; justify..."
            },
            {
              "line_number": 940,
              "length": 89,
              "content": "            <p>Detailed analysis of physical secur..."
            },
            {
              "line_number": 953,
              "length": 94,
              "content": "            <p>Detailed analysis of cartel activit..."
            }
          ],
          "issues": [
            "Found 44 lines exceeding 80 characters",
            "  Line 198: 91 chars",
            "  Line 206: 82 chars",
            "  Line 251: 81 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 44
        },
        "comment_density": {
          "compliant": false,
          "comment_density": 7.6158940397351,
          "comment_lines": 69,
          "code_lines": 837,
          "issues": [
            "Comment density 7.6% below minimum 15.0%",
            "  Comment lines: 69, Code lines: 837"
          ],
          "recommendations": [
            "Add more comments to explain complex logic and functions"
          ],
          "metric": 7.6158940397351
        },
        "module_size": {
          "compliant": false,
          "module_size": 996,
          "issues": [
            "Module size 996 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 996
        },
        "docstrings": {
          "compliant": false,
          "docstring_coverage": 77.77777777777779,
          "functions": 9,
          "functions_with_docstrings": 7,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [
            "Docstring coverage 77.8% below minimum 80.0%",
            "  Functions: 7/9 with docstrings",
            "  Classes: 0/0 with docstrings"
          ],
          "recommendations": [
            "Add docstrings to all functions and classes",
            "Use clear, descriptive docstrings following Google or NumPy style"
          ],
          "metric": 77.77777777777779
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 64.56049985154203,
      "issues": [
        "Found 44 lines exceeding 80 characters",
        "  Line 198: 91 chars",
        "  Line 206: 82 chars",
        "  Line 251: 81 chars",
        "Comment density 7.6% below minimum 15.0%",
        "  Comment lines: 69, Code lines: 837",
        "Module size 996 lines exceeds maximum 300 lines",
        "Docstring coverage 77.8% below minimum 80.0%",
        "  Functions: 7/9 with docstrings",
        "  Classes: 0/0 with docstrings"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Add more comments to explain complex logic and functions",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files",
        "Add docstrings to all functions and classes",
        "Use clear, descriptive docstrings following Google or NumPy style"
      ],
      "priority": "low"
    },
    {
      "path": "pages/media_outlets_monitoring.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/pages/media_outlets_monitoring.py",
      "total_lines": 1414,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 155,
              "length": 109,
              "content": "        st.markdown(\"Advanced monitoring system fo..."
            },
            {
              "line_number": 159,
              "length": 88,
              "content": "        st.markdown(f\"**Current Time**: {datetime...."
            },
            {
              "line_number": 163,
              "length": 83,
              "content": "            outlets_count = len(st.session_state.m..."
            },
            {
              "line_number": 164,
              "length": 92,
              "content": "            keywords_count = len(st.session_state...."
            },
            {
              "line_number": 229,
              "length": 102,
              "content": "            if outlet.last_checked and (datetime.n..."
            },
            {
              "line_number": 253,
              "length": 82,
              "content": "        df_keywords = df_keywords.sort_values('Mat..."
            },
            {
              "line_number": 278,
              "length": 95,
              "content": "        st.dataframe(df_matches.style.format({'Dat..."
            },
            {
              "line_number": 325,
              "length": 104,
              "content": "                categories = ['All Categories'] + ..."
            },
            {
              "line_number": 326,
              "length": 82,
              "content": "                selected_category = st.selectbox(\"..."
            },
            {
              "line_number": 330,
              "length": 100,
              "content": "                countries = ['All Countries'] + li..."
            },
            {
              "line_number": 336,
              "length": 82,
              "content": "                selected_status = st.selectbox(\"Fi..."
            },
            {
              "line_number": 342,
              "length": 99,
              "content": "                filtered_outlets = [o for o in fil..."
            },
            {
              "line_number": 345,
              "length": 97,
              "content": "                filtered_outlets = [o for o in fil..."
            },
            {
              "line_number": 371,
              "length": 129,
              "content": "                st.dataframe(df_outlets.style.form..."
            },
            {
              "line_number": 379,
              "length": 84,
              "content": "                                     help=\"Whether..."
            },
            {
              "line_number": 391,
              "length": 104,
              "content": "                        format_func=lambda x: next..."
            },
            {
              "line_number": 404,
              "length": 85,
              "content": "                                st.markdown(f\"**UR..."
            },
            {
              "line_number": 405,
              "length": 98,
              "content": "                                st.markdown(f\"**Ca..."
            },
            {
              "line_number": 406,
              "length": 96,
              "content": "                                st.markdown(f\"**Co..."
            },
            {
              "line_number": 407,
              "length": 98,
              "content": "                                st.markdown(f\"**La..."
            },
            {
              "line_number": 410,
              "length": 94,
              "content": "                                st.markdown(f\"**Ac..."
            },
            {
              "line_number": 411,
              "length": 112,
              "content": "                                st.markdown(f\"**Re..."
            },
            {
              "line_number": 412,
              "length": 100,
              "content": "                                st.markdown(f\"**Bi..."
            },
            {
              "line_number": 413,
              "length": 150,
              "content": "                                st.markdown(f\"**La..."
            },
            {
              "line_number": 414,
              "length": 120,
              "content": "                                st.markdown(f\"**Di..."
            },
            {
              "line_number": 427,
              "length": 98,
              "content": "                                    keywords_html ..."
            },
            {
              "line_number": 428,
              "length": 82,
              "content": "                                st.markdown(keywor..."
            },
            {
              "line_number": 437,
              "length": 108,
              "content": "                                    if st.button(\"..."
            },
            {
              "line_number": 442,
              "length": 104,
              "content": "                                    if st.button(\"..."
            },
            {
              "line_number": 449,
              "length": 95,
              "content": "                                if st.button(\"Moni..."
            },
            {
              "line_number": 451,
              "length": 91,
              "content": "                                        results = ..."
            },
            {
              "line_number": 452,
              "length": 118,
              "content": "                                        st.success..."
            },
            {
              "line_number": 456,
              "length": 101,
              "content": "                                if st.button(\"Disc..."
            },
            {
              "line_number": 457,
              "length": 86,
              "content": "                                    with st.spinne..."
            },
            {
              "line_number": 458,
              "length": 106,
              "content": "                                        related = ..."
            },
            {
              "line_number": 459,
              "length": 97,
              "content": "                                        st.success..."
            },
            {
              "line_number": 474,
              "length": 85,
              "content": "                name = st.text_input(\"Outlet Name*..."
            },
            {
              "line_number": 475,
              "length": 96,
              "content": "                domain = st.text_input(\"Domain*\", ..."
            },
            {
              "line_number": 477,
              "length": 104,
              "content": "                category = st.text_input(\"Category..."
            },
            {
              "line_number": 481,
              "length": 91,
              "content": "                language = st.text_input(\"Language..."
            },
            {
              "line_number": 482,
              "length": 88,
              "content": "                reliability_score = st.slider(\"Rel..."
            },
            {
              "line_number": 483,
              "length": 81,
              "content": "                                            help=\"..."
            },
            {
              "line_number": 485,
              "length": 104,
              "content": "                                         [\"\", \"lef..."
            },
            {
              "line_number": 505,
              "length": 94,
              "content": "                    outlet_id = processor.hashlib...."
            },
            {
              "line_number": 516,
              "length": 95,
              "content": "                        reliability_score=reliabil..."
            },
            {
              "line_number": 524,
              "length": 107,
              "content": "                        outlet.rss_feeds = [feed.s..."
            },
            {
              "line_number": 528,
              "length": 98,
              "content": "                        outlet.keywords = [kw.stri..."
            },
            {
              "line_number": 541,
              "length": 83,
              "content": "        uploaded_file = st.file_uploader(\"Upload E..."
            },
            {
              "line_number": 553,
              "length": 100,
              "content": "                missing_columns = [col for col in ..."
            },
            {
              "line_number": 556,
              "length": 87,
              "content": "                    st.error(f\"Missing required co..."
            },
            {
              "line_number": 583,
              "length": 97,
              "content": "                            temp_file = os.path.jo..."
            },
            {
              "line_number": 588,
              "length": 91,
              "content": "                            imported_count = proce..."
            },
            {
              "line_number": 593,
              "length": 90,
              "content": "                            st.success(f\"Successfu..."
            },
            {
              "line_number": 624,
              "length": 104,
              "content": "        search_query = st.text_input(\"Search Query..."
            },
            {
              "line_number": 647,
              "length": 87,
              "content": "                    st.dataframe(df_results, hide_..."
            },
            {
              "line_number": 666,
              "length": 99,
              "content": "                            st.markdown(f\"**URL**:..."
            },
            {
              "line_number": 667,
              "length": 103,
              "content": "                            st.markdown(f\"**Catego..."
            },
            {
              "line_number": 668,
              "length": 101,
              "content": "                            st.markdown(f\"**Countr..."
            },
            {
              "line_number": 671,
              "length": 103,
              "content": "                            st.markdown(f\"**Langua..."
            },
            {
              "line_number": 672,
              "length": 99,
              "content": "                            st.markdown(f\"**Active..."
            },
            {
              "line_number": 673,
              "length": 117,
              "content": "                            st.markdown(f\"**Reliab..."
            },
            {
              "line_number": 674,
              "length": 105,
              "content": "                            st.markdown(f\"**Bias R..."
            },
            {
              "line_number": 675,
              "length": 164,
              "content": "                            st.markdown(f\"**Last C..."
            },
            {
              "line_number": 683,
              "length": 107,
              "content": "                            if st.button(\"Monitor ..."
            },
            {
              "line_number": 685,
              "length": 96,
              "content": "                                    results = proc..."
            },
            {
              "line_number": 686,
              "length": 114,
              "content": "                                    st.success(f\"M..."
            },
            {
              "line_number": 690,
              "length": 113,
              "content": "                            if st.button(\"Discover..."
            },
            {
              "line_number": 691,
              "length": 82,
              "content": "                                with st.spinner(\"D..."
            },
            {
              "line_number": 692,
              "length": 111,
              "content": "                                    related = proc..."
            },
            {
              "line_number": 693,
              "length": 93,
              "content": "                                    st.success(f\"D..."
            },
            {
              "line_number": 698,
              "length": 113,
              "content": "                                if st.button(\"Deac..."
            },
            {
              "line_number": 703,
              "length": 109,
              "content": "                                if st.button(\"Acti..."
            },
            {
              "line_number": 750,
              "length": 105,
              "content": "                categories = ['All Categories'] + ..."
            },
            {
              "line_number": 751,
              "length": 82,
              "content": "                selected_category = st.selectbox(\"..."
            },
            {
              "line_number": 755,
              "length": 81,
              "content": "                status_options = ['All Keywords', ..."
            },
            {
              "line_number": 756,
              "length": 82,
              "content": "                selected_status = st.selectbox(\"Fi..."
            },
            {
              "line_number": 762,
              "length": 101,
              "content": "                filtered_keywords = [k for k in fi..."
            },
            {
              "line_number": 768,
              "length": 82,
              "content": "                filtered_keywords = [k for k in fi..."
            },
            {
              "line_number": 786,
              "length": 108,
              "content": "                df_keywords = df_keywords.sort_val..."
            },
            {
              "line_number": 789,
              "length": 130,
              "content": "                st.dataframe(df_keywords.style.for..."
            },
            {
              "line_number": 821,
              "length": 113,
              "content": "                                next((k.priority f..."
            },
            {
              "line_number": 828,
              "length": 84,
              "content": "                                        # Create a..."
            },
            {
              "line_number": 829,
              "length": 109,
              "content": "                                        processor...."
            },
            {
              "line_number": 830,
              "length": 96,
              "content": "                                        st.success..."
            },
            {
              "line_number": 836,
              "length": 122,
              "content": "                            is_active = next((k.ac..."
            },
            {
              "line_number": 843,
              "length": 84,
              "content": "                                            # Crea..."
            },
            {
              "line_number": 844,
              "length": 112,
              "content": "                                            # Note..."
            },
            {
              "line_number": 845,
              "length": 101,
              "content": "                                            # so w..."
            },
            {
              "line_number": 846,
              "length": 100,
              "content": "                                            st.err..."
            },
            {
              "line_number": 852,
              "length": 83,
              "content": "                                            # Crea..."
            },
            {
              "line_number": 853,
              "length": 98,
              "content": "                                            st.err..."
            },
            {
              "line_number": 864,
              "length": 104,
              "content": "                                    st.success(f\"F..."
            },
            {
              "line_number": 877,
              "length": 123,
              "content": "                                    st.dataframe(d..."
            },
            {
              "line_number": 878,
              "length": 101,
              "content": "                                                co..."
            },
            {
              "line_number": 882,
              "length": 89,
              "content": "                                    st.info(f\"No m..."
            },
            {
              "line_number": 921,
              "length": 96,
              "content": "                    keywords_list = [k.strip() for..."
            },
            {
              "line_number": 926,
              "length": 89,
              "content": "                        if processor.add_monitorin..."
            },
            {
              "line_number": 930,
              "length": 82,
              "content": "                        st.success(f\"Added {added_..."
            },
            {
              "line_number": 971,
              "length": 97,
              "content": "                            temp_file = os.path.jo..."
            },
            {
              "line_number": 986,
              "length": 104,
              "content": "                                    category = row..."
            },
            {
              "line_number": 987,
              "length": 109,
              "content": "                                    priority = int..."
            },
            {
              "line_number": 990,
              "length": 101,
              "content": "                                    if processor.a..."
            },
            {
              "line_number": 999,
              "length": 88,
              "content": "                            st.success(f\"Successfu..."
            },
            {
              "line_number": 1035,
              "length": 103,
              "content": "            keywords_list = ['All Keywords'] + [k...."
            },
            {
              "line_number": 1040,
              "length": 87,
              "content": "            time_options = ['Last 24 hours', 'Last..."
            },
            {
              "line_number": 1098,
              "length": 99,
              "content": "            st.dataframe(df_matches.style.format({..."
            },
            {
              "line_number": 1117,
              "length": 98,
              "content": "                    format_func=lambda x: next((f\"..."
            },
            {
              "line_number": 1118,
              "length": 88,
              "content": "                                              for ..."
            },
            {
              "line_number": 1123,
              "length": 106,
              "content": "                    selected_match = next((m for m..."
            },
            {
              "line_number": 1129,
              "length": 87,
              "content": "                        st.markdown(f\"**Title**: {..."
            },
            {
              "line_number": 1130,
              "length": 93,
              "content": "                        st.markdown(f\"**URL**: [{s..."
            },
            {
              "line_number": 1131,
              "length": 110,
              "content": "                        st.markdown(f\"**Match Date..."
            },
            {
              "line_number": 1142,
              "length": 92,
              "content": "                                f\"<span style='bac..."
            },
            {
              "line_number": 1146,
              "length": 103,
              "content": "                            <div style=\"background..."
            },
            {
              "line_number": 1157,
              "length": 98,
              "content": "                            if st.button(\"Mark as ..."
            },
            {
              "line_number": 1158,
              "length": 91,
              "content": "                                # Note: This would..."
            },
            {
              "line_number": 1162,
              "length": 101,
              "content": "                            if st.button(\"Extract ..."
            },
            {
              "line_number": 1165,
              "length": 100,
              "content": "                                    content = proc..."
            },
            {
              "line_number": 1171,
              "length": 83,
              "content": "                                        st.error(\"..."
            },
            {
              "line_number": 1193,
              "length": 89,
              "content": "                            b64 = base64.b64encode..."
            },
            {
              "line_number": 1194,
              "length": 127,
              "content": "                            href = f'<a href=\"data..."
            },
            {
              "line_number": 1202,
              "length": 130,
              "content": "                            href = f'<a href=\"data..."
            },
            {
              "line_number": 1232,
              "length": 88,
              "content": "                              help=\"Maximum number..."
            },
            {
              "line_number": 1237,
              "length": 96,
              "content": "        categories = ['All Categories'] + list(set..."
            },
            {
              "line_number": 1239,
              "length": 89,
              "content": "                                     help=\"Limit m..."
            },
            {
              "line_number": 1245,
              "length": 88,
              "content": "        selected_keyword = st.selectbox(\"Monitor f..."
            },
            {
              "line_number": 1246,
              "length": 84,
              "content": "                                      help=\"Focus ..."
            },
            {
              "line_number": 1254,
              "length": 90,
              "content": "                filtered_outlets = [o for o in out..."
            },
            {
              "line_number": 1293,
              "length": 87,
              "content": "                st.warning(f\"Encountered {results[..."
            },
            {
              "line_number": 1320,
              "length": 106,
              "content": "                        <p><strong>URL:</strong> <..."
            },
            {
              "line_number": 1321,
              "length": 100,
              "content": "                        <p><strong>Found:</strong>..."
            },
            {
              "line_number": 1322,
              "length": 110,
              "content": "                        <p><strong>Context:</stron..."
            },
            {
              "line_number": 1333,
              "length": 96,
              "content": "        Configure automated monitoring schedules t..."
            },
            {
              "line_number": 1335,
              "length": 90,
              "content": "        > Note: Scheduling is a placeholder in thi..."
            },
            {
              "line_number": 1344,
              "length": 84,
              "content": "                [\"Every hour\", \"Every 6 hours\", \"E..."
            }
          ],
          "issues": [
            "Found 135 lines exceeding 80 characters",
            "  Line 155: 109 chars",
            "  Line 159: 88 chars",
            "  Line 163: 83 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 135
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 21.899059024807528,
          "comment_lines": 256,
          "code_lines": 913,
          "issues": [],
          "recommendations": [],
          "metric": 21.899059024807528
        },
        "module_size": {
          "compliant": false,
          "module_size": 1414,
          "issues": [
            "Module size 1414 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 1414
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 8,
          "functions_with_docstrings": 8,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": false,
          "complexity_issues": [
            "Function 'render_outlets_management' has high complexity (36 decision points)",
            "Function 'render_keywords_monitoring' has high complexity (49 decision points)"
          ],
          "issues": [
            "Function 'render_outlets_management' has high complexity (36 decision points)",
            "Function 'render_keywords_monitoring' has high complexity (49 decision points)"
          ],
          "recommendations": [
            "Break complex functions into smaller, focused functions",
            "Extract complex logic into separate methods or classes"
          ],
          "metric": 2
        }
      },
      "overall_compliant": false,
      "compliance_score": 57.01754385964912,
      "issues": [
        "Found 135 lines exceeding 80 characters",
        "  Line 155: 109 chars",
        "  Line 159: 88 chars",
        "  Line 163: 83 chars",
        "Module size 1414 lines exceeds maximum 300 lines",
        "Function 'render_outlets_management' has high complexity (36 decision points)",
        "Function 'render_keywords_monitoring' has high complexity (49 decision points)"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files",
        "Break complex functions into smaller, focused functions",
        "Extract complex logic into separate methods or classes"
      ],
      "priority": "medium"
    },
    {
      "path": "pages/node_card_viewer.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/pages/node_card_viewer.py",
      "total_lines": 855,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 40,
              "length": 89,
              "content": "from core.periodic_table.group import Group, Perio..."
            },
            {
              "line_number": 271,
              "length": 85,
              "content": "        # Create one element for each period-group..."
            },
            {
              "line_number": 289,
              "length": 81,
              "content": "                        group_id=str(group.id) if ..."
            },
            {
              "line_number": 290,
              "length": 84,
              "content": "                        period_id=str(period.id) i..."
            },
            {
              "line_number": 291,
              "length": 89,
              "content": "                        category_id=str(category.i..."
            },
            {
              "line_number": 295,
              "length": 95,
              "content": "                    element.set_property(ElementPr..."
            },
            {
              "line_number": 296,
              "length": 94,
              "content": "                    element.set_property(ElementPr..."
            },
            {
              "line_number": 297,
              "length": 97,
              "content": "                    element.set_property(ElementPr..."
            },
            {
              "line_number": 298,
              "length": 92,
              "content": "                    element.set_property(ElementPr..."
            },
            {
              "line_number": 299,
              "length": 91,
              "content": "                    element.set_property(ElementPr..."
            },
            {
              "line_number": 300,
              "length": 89,
              "content": "                    element.set_property(ElementPr..."
            },
            {
              "line_number": 301,
              "length": 89,
              "content": "                    element.set_property(ElementPr..."
            },
            {
              "line_number": 302,
              "length": 97,
              "content": "                    element.set_property(ElementPr..."
            },
            {
              "line_number": 303,
              "length": 93,
              "content": "                    element.set_property(ElementPr..."
            },
            {
              "line_number": 305,
              "length": 109,
              "content": "                                        f\"This is ..."
            },
            {
              "line_number": 308,
              "length": 92,
              "content": "                    discovery_date = datetime.now(..."
            },
            {
              "line_number": 309,
              "length": 100,
              "content": "                    element.set_property(ElementPr..."
            },
            {
              "line_number": 310,
              "length": 98,
              "content": "                    element.set_property(ElementPr..."
            },
            {
              "line_number": 311,
              "length": 86,
              "content": "                    element.set_property(ElementPr..."
            },
            {
              "line_number": 348,
              "length": 86,
              "content": "                    bidirectional=random.random() ..."
            },
            {
              "line_number": 356,
              "length": 110,
              "content": "        relationships = registry.get_all_relations..."
            },
            {
              "line_number": 357,
              "length": 105,
              "content": "        print(f\"Created {len(all_elements)} elemen..."
            },
            {
              "line_number": 378,
              "length": 99,
              "content": "                st.error(\"Failed to initialize the..."
            },
            {
              "line_number": 381,
              "length": 104,
              "content": "            print(f\"Registry initialized successfu..."
            },
            {
              "line_number": 438,
              "length": 88,
              "content": "        category = next((c for c in categories if ..."
            },
            {
              "line_number": 492,
              "length": 104,
              "content": "def render_property_comparison(elements, property_..."
            },
            {
              "line_number": 529,
              "length": 85,
              "content": "    # Ensure initialized - this needs to happen BE..."
            },
            {
              "line_number": 549,
              "length": 94,
              "content": "    st.markdown('<div class=\"main-title\">CTAS Node..."
            },
            {
              "line_number": 553,
              "length": 95,
              "content": "    This page allows you to view and compare node ..."
            },
            {
              "line_number": 554,
              "length": 97,
              "content": "    Each node represents an intelligence entity wi..."
            },
            {
              "line_number": 561,
              "length": 98,
              "content": "        st.markdown('<div class=\"section-title\">No..."
            },
            {
              "line_number": 571,
              "length": 97,
              "content": "            selected_category = st.selectbox(\"Cate..."
            },
            {
              "line_number": 578,
              "length": 88,
              "content": "            selected_group = st.selectbox(\"Group\",..."
            },
            {
              "line_number": 585,
              "length": 91,
              "content": "            selected_period = st.selectbox(\"Period..."
            },
            {
              "line_number": 597,
              "length": 98,
              "content": "                filtered_elements = [e for e in fi..."
            },
            {
              "line_number": 599,
              "length": 109,
              "content": "                filtered_elements = [e for e in fi..."
            },
            {
              "line_number": 605,
              "length": 92,
              "content": "                filtered_elements = [e for e in fi..."
            },
            {
              "line_number": 607,
              "length": 103,
              "content": "                filtered_elements = [e for e in fi..."
            },
            {
              "line_number": 613,
              "length": 94,
              "content": "                filtered_elements = [e for e in fi..."
            },
            {
              "line_number": 615,
              "length": 105,
              "content": "                filtered_elements = [e for e in fi..."
            },
            {
              "line_number": 637,
              "length": 89,
              "content": "                    # Checkbox for comparison - ha..."
            },
            {
              "line_number": 645,
              "length": 94,
              "content": "                        element_symbol = element.g..."
            },
            {
              "line_number": 647,
              "length": 100,
              "content": "                    selected = st.checkbox(f\"Compa..."
            },
            {
              "line_number": 648,
              "length": 89,
              "content": "                    if selected and element_id not..."
            },
            {
              "line_number": 650,
              "length": 91,
              "content": "                    elif not selected and element_..."
            },
            {
              "line_number": 654,
              "length": 82,
              "content": "                    st.markdown(render_node_card(e..."
            },
            {
              "line_number": 658,
              "length": 88,
              "content": "                        # Get element properties -..."
            },
            {
              "line_number": 668,
              "length": 112,
              "content": "                            category_name = next((..."
            },
            {
              "line_number": 669,
              "length": 102,
              "content": "                            group_name = next((g.n..."
            },
            {
              "line_number": 670,
              "length": 105,
              "content": "                            period_name = next((p...."
            },
            {
              "line_number": 680,
              "length": 81,
              "content": "                            # Get category, group,..."
            },
            {
              "line_number": 681,
              "length": 126,
              "content": "                            category_name = next((..."
            },
            {
              "line_number": 682,
              "length": 116,
              "content": "                            group_name = next((g.g..."
            },
            {
              "line_number": 683,
              "length": 119,
              "content": "                            period_name = next((p...."
            },
            {
              "line_number": 700,
              "length": 83,
              "content": "                            from core.periodic_tab..."
            },
            {
              "line_number": 702,
              "length": 104,
              "content": "                                (\"Reliability\", el..."
            },
            {
              "line_number": 703,
              "length": 102,
              "content": "                                (\"Confidence\", ele..."
            },
            {
              "line_number": 704,
              "length": 108,
              "content": "                                (\"Accessibility\", ..."
            },
            {
              "line_number": 705,
              "length": 96,
              "content": "                                (\"Maturity\", eleme..."
            },
            {
              "line_number": 706,
              "length": 100,
              "content": "                                (\"Complexity\", ele..."
            },
            {
              "line_number": 707,
              "length": 96,
              "content": "                                (\"Priority\", eleme..."
            },
            {
              "line_number": 708,
              "length": 99,
              "content": "                                (\"Stability\", elem..."
            },
            {
              "line_number": 714,
              "length": 84,
              "content": "                                (\"Reliability\", pr..."
            },
            {
              "line_number": 715,
              "length": 82,
              "content": "                                (\"Confidence\", pro..."
            },
            {
              "line_number": 716,
              "length": 88,
              "content": "                                (\"Accessibility\", ..."
            },
            {
              "line_number": 724,
              "length": 99,
              "content": "                            if name in [\"Reliabili..."
            },
            {
              "line_number": 731,
              "length": 103,
              "content": "                if st.button(f\"Compare Selected El..."
            },
            {
              "line_number": 734,
              "length": 108,
              "content": "                    st.session_state.selected_elem..."
            },
            {
              "line_number": 735,
              "length": 98,
              "content": "                    # No need to use experimental_..."
            },
            {
              "line_number": 740,
              "length": 95,
              "content": "        st.markdown('<div class=\"section-title\">No..."
            },
            {
              "line_number": 746,
              "length": 84,
              "content": "                               for element_id in s..."
            },
            {
              "line_number": 756,
              "length": 130,
              "content": "                    st.markdown(f\"**{element.get('..."
            },
            {
              "line_number": 757,
              "length": 82,
              "content": "                    st.markdown(render_node_card(e..."
            },
            {
              "line_number": 834,
              "length": 82,
              "content": "                rel_count = sum(len(connections) f..."
            },
            {
              "line_number": 836,
              "length": 97,
              "content": "                st.markdown(f\"**{element.name} ({e..."
            },
            {
              "line_number": 842,
              "length": 92,
              "content": "                            st.markdown(f\"* **{rel..."
            },
            {
              "line_number": 851,
              "length": 87,
              "content": "            st.info(\"Select at least two elements ..."
            }
          ],
          "issues": [
            "Found 77 lines exceeding 80 characters",
            "  Line 40: 89 chars",
            "  Line 271: 85 chars",
            "  Line 289: 81 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 77
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 15.205479452054796,
          "comment_lines": 111,
          "code_lines": 619,
          "issues": [],
          "recommendations": [],
          "metric": 15.205479452054796
        },
        "module_size": {
          "compliant": false,
          "module_size": 855,
          "issues": [
            "Module size 855 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 855
        },
        "docstrings": {
          "compliant": false,
          "docstring_coverage": 60.0,
          "functions": 5,
          "functions_with_docstrings": 3,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [
            "Docstring coverage 60.0% below minimum 80.0%",
            "  Functions: 3/5 with docstrings",
            "  Classes: 0/0 with docstrings"
          ],
          "recommendations": [
            "Add docstrings to all functions and classes",
            "Use clear, descriptive docstrings following Google or NumPy style"
          ],
          "metric": 60.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": false,
          "complexity_issues": [
            "Function 'main' has high complexity (28 decision points)"
          ],
          "issues": [
            "Function 'main' has high complexity (28 decision points)"
          ],
          "recommendations": [
            "Break complex functions into smaller, focused functions",
            "Extract complex logic into separate methods or classes"
          ],
          "metric": 1
        }
      },
      "overall_compliant": false,
      "compliance_score": 61.40350877192982,
      "issues": [
        "Found 77 lines exceeding 80 characters",
        "  Line 40: 89 chars",
        "  Line 271: 85 chars",
        "  Line 289: 81 chars",
        "Module size 855 lines exceeds maximum 300 lines",
        "Docstring coverage 60.0% below minimum 80.0%",
        "  Functions: 3/5 with docstrings",
        "  Classes: 0/0 with docstrings",
        "Function 'main' has high complexity (28 decision points)"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files",
        "Add docstrings to all functions and classes",
        "Use clear, descriptive docstrings following Google or NumPy style",
        "Break complex functions into smaller, focused functions",
        "Extract complex logic into separate methods or classes"
      ],
      "priority": "low"
    },
    {
      "path": "pages/optimization_demo.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/pages/optimization_demo.py",
      "total_lines": 2657,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 151,
              "length": 81,
              "content": "    This interactive dashboard allows you to explo..."
            },
            {
              "line_number": 175,
              "length": 124,
              "content": "            The Rosenbrock function is a non-conve..."
            },
            {
              "line_number": 176,
              "length": 128,
              "content": "            It has a narrow, curved valley which c..."
            },
            {
              "line_number": 188,
              "length": 98,
              "content": "            The Rastrigin function is a highly mul..."
            },
            {
              "line_number": 189,
              "length": 120,
              "content": "            arranged in a regular lattice, making ..."
            },
            {
              "line_number": 200,
              "length": 110,
              "content": "            The Ackley function is characterized b..."
            },
            {
              "line_number": 201,
              "length": 95,
              "content": "            It tests an algorithm's ability to esc..."
            },
            {
              "line_number": 203,
              "length": 97,
              "content": "            Defined as: f(x,y) = -20exp(-0.2\u221a(0.5(..."
            },
            {
              "line_number": 310,
              "length": 99,
              "content": "                \"z\": {\"show\": True, \"start\": Z.min..."
            },
            {
              "line_number": 388,
              "length": 82,
              "content": "    Simulated Annealing is a probabilistic optimiz..."
            },
            {
              "line_number": 389,
              "length": 85,
              "content": "    physical process of annealing in metallurgy. I..."
            },
            {
              "line_number": 399,
              "length": 138,
              "content": "        st.warning(\"Simulated Annealing module not..."
            },
            {
              "line_number": 495,
              "length": 87,
              "content": "                        bound_range = problem[\"bou..."
            },
            {
              "line_number": 497,
              "length": 108,
              "content": "                        neighbor[i] = np.clip(neig..."
            },
            {
              "line_number": 504,
              "length": 82,
              "content": "                    rng.uniform(problem[\"bounds\"][..."
            },
            {
              "line_number": 505,
              "length": 81,
              "content": "                    rng.uniform(problem[\"bounds\"][..."
            },
            {
              "line_number": 563,
              "length": 84,
              "content": "                    delta=f\"{-abs(result.initial_e..."
            },
            {
              "line_number": 571,
              "length": 93,
              "content": "                    delta=f\"{abs(result.best_energ..."
            },
            {
              "line_number": 655,
              "length": 117,
              "content": "            **Distance to Global Minimum**: {eucli..."
            },
            {
              "line_number": 681,
              "length": 91,
              "content": "    Genetic Algorithm is an evolutionary optimizat..."
            },
            {
              "line_number": 682,
              "length": 83,
              "content": "    It evolves a population of candidate solutions..."
            },
            {
              "line_number": 693,
              "length": 136,
              "content": "        st.warning(\"Genetic Algorithm module not f..."
            },
            {
              "line_number": 795,
              "length": 98,
              "content": "                            genome[i] = random_sta..."
            },
            {
              "line_number": 810,
              "length": 83,
              "content": "                                bound_range = self..."
            },
            {
              "line_number": 811,
              "length": 81,
              "content": "                                delta = random_sta..."
            },
            {
              "line_number": 813,
              "length": 102,
              "content": "                                mutated[i] = np.cl..."
            },
            {
              "line_number": 838,
              "length": 95,
              "content": "                                dist_sum += np.sqr..."
            },
            {
              "line_number": 897,
              "length": 91,
              "content": "                    delta=f\"{-abs(result.initial_b..."
            },
            {
              "line_number": 905,
              "length": 95,
              "content": "                    delta=f\"{abs(-result.best_fitn..."
            },
            {
              "line_number": 990,
              "length": 115,
              "content": "            **Distance to Global Minimum**: {eucli..."
            },
            {
              "line_number": 1016,
              "length": 93,
              "content": "    Particle Swarm Optimization (PSO) is a populat..."
            },
            {
              "line_number": 1017,
              "length": 94,
              "content": "    inspired by social behavior of bird flocking o..."
            },
            {
              "line_number": 1022,
              "length": 89,
              "content": "    - Balances exploration and exploitation throug..."
            },
            {
              "line_number": 1028,
              "length": 146,
              "content": "        st.warning(\"Particle Swarm Optimization mo..."
            },
            {
              "line_number": 1124,
              "length": 82,
              "content": "                fitness_fn = lambda x: -objective_..."
            },
            {
              "line_number": 1179,
              "length": 91,
              "content": "                    delta=f\"{-abs(result.initial_b..."
            },
            {
              "line_number": 1187,
              "length": 95,
              "content": "                    delta=f\"{abs(-result.best_fitn..."
            },
            {
              "line_number": 1272,
              "length": 117,
              "content": "            **Distance to Global Minimum**: {eucli..."
            },
            {
              "line_number": 1298,
              "length": 87,
              "content": "    Monte Carlo methods use repeated random sampli..."
            },
            {
              "line_number": 1299,
              "length": 93,
              "content": "    methods are particularly useful for estimating..."
            },
            {
              "line_number": 1310,
              "length": 129,
              "content": "        st.warning(\"Monte Carlo module not found. ..."
            },
            {
              "line_number": 1397,
              "length": 85,
              "content": "                                price *= np.exp((d..."
            },
            {
              "line_number": 1398,
              "length": 81,
              "content": "                                               dai..."
            },
            {
              "line_number": 1467,
              "length": 95,
              "content": "                            durations = random_sta..."
            },
            {
              "line_number": 1469,
              "length": 88,
              "content": "                            # Generate random depe..."
            },
            {
              "line_number": 1473,
              "length": 81,
              "content": "                                    if random_stat..."
            },
            {
              "line_number": 1482,
              "length": 85,
              "content": "                                    # Task starts ..."
            },
            {
              "line_number": 1483,
              "length": 100,
              "content": "                                    completion_tim..."
            },
            {
              "line_number": 1565,
              "length": 87,
              "content": "                            returns = avg_return +..."
            },
            {
              "line_number": 1566,
              "length": 96,
              "content": "                            volatilities = avg_vol..."
            },
            {
              "line_number": 1567,
              "length": 95,
              "content": "                            volatilities = np.abs(..."
            },
            {
              "line_number": 1570,
              "length": 91,
              "content": "                            correlations = random_..."
            },
            {
              "line_number": 1588,
              "length": 108,
              "content": "                                    cov_matrix[i, ..."
            },
            {
              "line_number": 1590,
              "length": 95,
              "content": "                            portfolio_variance = n..."
            },
            {
              "line_number": 1596,
              "length": 107,
              "content": "                                annual_return = ra..."
            },
            {
              "line_number": 1637,
              "length": 83,
              "content": "                    subplot_titles=[\"Histogram of ..."
            },
            {
              "line_number": 1672,
              "length": 85,
              "content": "                percentile_vals = [percentiles[5],..."
            },
            {
              "line_number": 1809,
              "length": 100,
              "content": "                    - Task Duration Range: {params..."
            },
            {
              "line_number": 1810,
              "length": 89,
              "content": "                    - Task Dependency Probability:..."
            },
            {
              "line_number": 1828,
              "length": 83,
              "content": "                **Execution Time**: {result.metada..."
            },
            {
              "line_number": 1838,
              "length": 88,
              "content": "        Monte Carlo integration uses random sampli..."
            },
            {
              "line_number": 1839,
              "length": 86,
              "content": "        particularly useful for high-dimensional p..."
            },
            {
              "line_number": 1851,
              "length": 98,
              "content": "                options=[\"Circle Area (\u03c0 estimatio..."
            },
            {
              "line_number": 1898,
              "length": 90,
              "content": "                                samples_per_stratu..."
            },
            {
              "line_number": 1923,
              "length": 90,
              "content": "                                samples_per_stratu..."
            },
            {
              "line_number": 1948,
              "length": 90,
              "content": "                                samples_per_stratu..."
            },
            {
              "line_number": 2057,
              "length": 118,
              "content": "                        title=f\"Monte Carlo Estima..."
            },
            {
              "line_number": 2070,
              "length": 116,
              "content": "                        text=f\"\u03c0 estimate: 4 \u00d7 ({i..."
            },
            {
              "line_number": 2082,
              "length": 98,
              "content": "                    samples_sequence = np.logspace..."
            },
            {
              "line_number": 2109,
              "length": 82,
              "content": "                        title=f\"Monte Carlo Integr..."
            },
            {
              "line_number": 2149,
              "length": 106,
              "content": "                **Relative Error**: {abs(result.in..."
            },
            {
              "line_number": 2153,
              "length": 108,
              "content": "                **Confidence Interval (95%)**: [{r..."
            },
            {
              "line_number": 2172,
              "length": 83,
              "content": "    Las Vegas algorithms are randomized algorithms..."
            },
            {
              "line_number": 2173,
              "length": 83,
              "content": "    result but have non-deterministic running time..."
            },
            {
              "line_number": 2174,
              "length": 84,
              "content": "    which may produce incorrect results, Las Vegas..."
            },
            {
              "line_number": 2185,
              "length": 135,
              "content": "        st.warning(\"Las Vegas Algorithm module not..."
            },
            {
              "line_number": 2197,
              "length": 88,
              "content": "            options=[\"Find Password Hash\", \"Graph ..."
            },
            {
              "line_number": 2246,
              "length": 113,
              "content": "                    def find_hash_match(random_sta..."
            },
            {
              "line_number": 2249,
              "length": 101,
              "content": "                        password = ''.join(random_..."
            },
            {
              "line_number": 2340,
              "length": 83,
              "content": "                            node_colors[node] = ra..."
            },
            {
              "line_number": 2431,
              "length": 82,
              "content": "                    avg_time = result.average_atte..."
            },
            {
              "line_number": 2432,
              "length": 85,
              "content": "                    success_rate = result.success_..."
            },
            {
              "line_number": 2441,
              "length": 91,
              "content": "                    **Expected Iterations**: {1.0 ..."
            },
            {
              "line_number": 2445,
              "length": 81,
              "content": "                    # This is a simplified visuali..."
            },
            {
              "line_number": 2449,
              "length": 112,
              "content": "                    attempt_times = [t * 1000 for ..."
            },
            {
              "line_number": 2550,
              "length": 113,
              "content": "                    **Edge Density**: {G.number_of..."
            },
            {
              "line_number": 2556,
              "length": 82,
              "content": "                    avg_time = result.average_atte..."
            },
            {
              "line_number": 2557,
              "length": 85,
              "content": "                    success_rate = result.success_..."
            },
            {
              "line_number": 2566,
              "length": 91,
              "content": "                    **Expected Iterations**: {1.0 ..."
            }
          ],
          "issues": [
            "Found 89 lines exceeding 80 characters",
            "  Line 151: 81 chars",
            "  Line 175: 124 chars",
            "  Line 176: 128 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 89
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 15.732368896925857,
          "comment_lines": 348,
          "code_lines": 1864,
          "issues": [],
          "recommendations": [],
          "metric": 15.732368896925857
        },
        "module_size": {
          "compliant": false,
          "module_size": 2657,
          "issues": [
            "Module size 2657 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 2657
        },
        "docstrings": {
          "compliant": false,
          "docstring_coverage": 48.38709677419355,
          "functions": 30,
          "functions_with_docstrings": 15,
          "classes": 1,
          "classes_with_docstrings": 0,
          "issues": [
            "Docstring coverage 48.4% below minimum 80.0%",
            "  Functions: 15/30 with docstrings",
            "  Classes: 0/1 with docstrings"
          ],
          "recommendations": [
            "Add docstrings to all functions and classes",
            "Use clear, descriptive docstrings following Google or NumPy style"
          ],
          "metric": 48.38709677419355
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": false,
          "complexity_issues": [
            "Function 'genetic_algorithm_page' has high complexity (11 decision points)",
            "Function 'monte_carlo_page' has high complexity (32 decision points)",
            "Function 'las_vegas_page' has high complexity (16 decision points)"
          ],
          "issues": [
            "Function 'genetic_algorithm_page' has high complexity (11 decision points)",
            "Function 'monte_carlo_page' has high complexity (32 decision points)",
            "Function 'las_vegas_page' has high complexity (16 decision points)"
          ],
          "recommendations": [
            "Break complex functions into smaller, focused functions",
            "Extract complex logic into separate methods or classes"
          ],
          "metric": 3
        }
      },
      "overall_compliant": false,
      "compliance_score": 64.4708545557442,
      "issues": [
        "Found 89 lines exceeding 80 characters",
        "  Line 151: 81 chars",
        "  Line 175: 124 chars",
        "  Line 176: 128 chars",
        "Module size 2657 lines exceeds maximum 300 lines",
        "Docstring coverage 48.4% below minimum 80.0%",
        "  Functions: 15/30 with docstrings",
        "  Classes: 0/1 with docstrings",
        "Function 'genetic_algorithm_page' has high complexity (11 decision points)",
        "Function 'monte_carlo_page' has high complexity (32 decision points)",
        "Function 'las_vegas_page' has high complexity (16 decision points)"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files",
        "Add docstrings to all functions and classes",
        "Use clear, descriptive docstrings following Google or NumPy style",
        "Break complex functions into smaller, focused functions",
        "Extract complex logic into separate methods or classes"
      ],
      "priority": "low"
    },
    {
      "path": "pages/periodic_table_demo.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/pages/periodic_table_demo.py",
      "total_lines": 640,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 39,
              "length": 89,
              "content": "from core.periodic_table.group import Group, Perio..."
            },
            {
              "line_number": 109,
              "length": 97,
              "content": "st.markdown('<div class=\"main-title\">CTAS Periodic..."
            },
            {
              "line_number": 113,
              "length": 103,
              "content": "The CTAS Periodic Table of Nodes provides a struct..."
            },
            {
              "line_number": 114,
              "length": 103,
              "content": "enabling organized traversal and relationship mapp..."
            },
            {
              "line_number": 115,
              "length": 82,
              "content": "visualization allows exploration of elements, thei..."
            },
            {
              "line_number": 122,
              "length": 82,
              "content": "        # Create registry with in-memory database ..."
            },
            {
              "line_number": 173,
              "length": 85,
              "content": "        # Create one element for each period-group..."
            },
            {
              "line_number": 197,
              "length": 95,
              "content": "                    element.set_property(ElementPr..."
            },
            {
              "line_number": 198,
              "length": 94,
              "content": "                    element.set_property(ElementPr..."
            },
            {
              "line_number": 199,
              "length": 97,
              "content": "                    element.set_property(ElementPr..."
            },
            {
              "line_number": 200,
              "length": 92,
              "content": "                    element.set_property(ElementPr..."
            },
            {
              "line_number": 201,
              "length": 91,
              "content": "                    element.set_property(ElementPr..."
            },
            {
              "line_number": 202,
              "length": 89,
              "content": "                    element.set_property(ElementPr..."
            },
            {
              "line_number": 203,
              "length": 89,
              "content": "                    element.set_property(ElementPr..."
            },
            {
              "line_number": 204,
              "length": 97,
              "content": "                    element.set_property(ElementPr..."
            },
            {
              "line_number": 205,
              "length": 93,
              "content": "                    element.set_property(ElementPr..."
            },
            {
              "line_number": 207,
              "length": 109,
              "content": "                                        f\"This is ..."
            },
            {
              "line_number": 210,
              "length": 92,
              "content": "                    discovery_date = datetime.now(..."
            },
            {
              "line_number": 211,
              "length": 100,
              "content": "                    element.set_property(ElementPr..."
            },
            {
              "line_number": 212,
              "length": 98,
              "content": "                    element.set_property(ElementPr..."
            },
            {
              "line_number": 213,
              "length": 86,
              "content": "                    element.set_property(ElementPr..."
            },
            {
              "line_number": 236,
              "length": 96,
              "content": "        for i in range(min(100, len(elements) * 3)..."
            },
            {
              "line_number": 250,
              "length": 86,
              "content": "                    bidirectional=random.random() ..."
            },
            {
              "line_number": 258,
              "length": 135,
              "content": "        print(f\"Created {len(all_elements)} elemen..."
            },
            {
              "line_number": 279,
              "length": 99,
              "content": "                st.error(\"Failed to initialize the..."
            },
            {
              "line_number": 282,
              "length": 104,
              "content": "            print(f\"Registry initialized successfu..."
            },
            {
              "line_number": 292,
              "length": 85,
              "content": "    # Ensure initialized - this needs to happen BE..."
            },
            {
              "line_number": 306,
              "length": 91,
              "content": "    if 'periodic_table' not in st.session_state or..."
            },
            {
              "line_number": 317,
              "length": 90,
              "content": "                def create_plotly_table(self, widt..."
            },
            {
              "line_number": 390,
              "length": 93,
              "content": "    tab1, tab2, tab3 = st.tabs([\"Periodic Table\", ..."
            },
            {
              "line_number": 394,
              "length": 106,
              "content": "        st.markdown('<div class=\"section-title\">In..."
            },
            {
              "line_number": 408,
              "length": 84,
              "content": "            color_by = st.selectbox(\"Color element..."
            },
            {
              "line_number": 413,
              "length": 86,
              "content": "            relationships = list(registry.relation..."
            },
            {
              "line_number": 415,
              "length": 94,
              "content": "            st.markdown('<div class=\"section-title..."
            },
            {
              "line_number": 436,
              "length": 91,
              "content": "            st.markdown('<div class=\"section-title..."
            },
            {
              "line_number": 440,
              "length": 102,
              "content": "            selected_categories = st.multiselect(\"..."
            },
            {
              "line_number": 459,
              "length": 82,
              "content": "            selected_points = st.session_state.get..."
            },
            {
              "line_number": 468,
              "length": 91,
              "content": "                    st.markdown(f\"**Selected Eleme..."
            },
            {
              "line_number": 472,
              "length": 95,
              "content": "        st.markdown('<div class=\"section-title\">El..."
            },
            {
              "line_number": 477,
              "length": 157,
              "content": "            element_options = {f\"{e.get('name', 'U..."
            },
            {
              "line_number": 485,
              "length": 93,
              "content": "                st.session_state.selected_element_..."
            },
            {
              "line_number": 496,
              "length": 86,
              "content": "                    # Display element card - handl..."
            },
            {
              "line_number": 508,
              "length": 86,
              "content": "                        symbol = element.get('shor..."
            },
            {
              "line_number": 516,
              "length": 116,
              "content": "                    # Display basic info - handle ..."
            },
            {
              "line_number": 524,
              "length": 108,
              "content": "                        category_name = next((c.na..."
            },
            {
              "line_number": 525,
              "length": 98,
              "content": "                        group_name = next((g.name ..."
            },
            {
              "line_number": 526,
              "length": 101,
              "content": "                        period_name = next((p.name..."
            },
            {
              "line_number": 529,
              "length": 137,
              "content": "                        category_name = next((c.ge..."
            },
            {
              "line_number": 530,
              "length": 127,
              "content": "                        group_name = next((g.get('..."
            },
            {
              "line_number": 531,
              "length": 130,
              "content": "                        period_name = next((p.get(..."
            },
            {
              "line_number": 551,
              "length": 92,
              "content": "                            f\"{element.get_propert..."
            },
            {
              "line_number": 552,
              "length": 91,
              "content": "                            f\"{element.get_propert..."
            },
            {
              "line_number": 553,
              "length": 94,
              "content": "                            f\"{element.get_propert..."
            },
            {
              "line_number": 554,
              "length": 86,
              "content": "                            f\"{element.get_propert..."
            },
            {
              "line_number": 555,
              "length": 88,
              "content": "                            f\"{element.get_propert..."
            },
            {
              "line_number": 556,
              "length": 86,
              "content": "                            f\"{element.get_propert..."
            },
            {
              "line_number": 557,
              "length": 90,
              "content": "                            f\"{element.get_propert..."
            },
            {
              "line_number": 558,
              "length": 93,
              "content": "                            f\"{element.get_propert..."
            },
            {
              "line_number": 566,
              "length": 102,
              "content": "                    fig = periodic_table.create_el..."
            },
            {
              "line_number": 582,
              "length": 86,
              "content": "                                connected_element ..."
            },
            {
              "line_number": 585,
              "length": 108,
              "content": "                                        \"Element\":..."
            },
            {
              "line_number": 587,
              "length": 87,
              "content": "                                        \"Confidenc..."
            },
            {
              "line_number": 588,
              "length": 102,
              "content": "                                        \"Bidirecti..."
            },
            {
              "line_number": 598,
              "length": 100,
              "content": "        st.markdown('<div class=\"section-title\">Re..."
            },
            {
              "line_number": 623,
              "length": 103,
              "content": "            selected_rel_types = st.multiselect(\"R..."
            },
            {
              "line_number": 636,
              "length": 87,
              "content": "                st.info(\"Select a root element to ..."
            }
          ],
          "issues": [
            "Found 66 lines exceeding 80 characters",
            "  Line 39: 89 chars",
            "  Line 109: 97 chars",
            "  Line 113: 103 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 66
        },
        "comment_density": {
          "compliant": false,
          "comment_density": 14.754098360655737,
          "comment_lines": 81,
          "code_lines": 468,
          "issues": [
            "Comment density 14.8% below minimum 15.0%",
            "  Comment lines: 81, Code lines: 468"
          ],
          "recommendations": [
            "Add more comments to explain complex logic and functions"
          ],
          "metric": 14.754098360655737
        },
        "module_size": {
          "compliant": false,
          "module_size": 640,
          "issues": [
            "Module size 640 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 640
        },
        "docstrings": {
          "compliant": false,
          "docstring_coverage": 16.666666666666664,
          "functions": 5,
          "functions_with_docstrings": 1,
          "classes": 1,
          "classes_with_docstrings": 0,
          "issues": [
            "Docstring coverage 16.7% below minimum 80.0%",
            "  Functions: 1/5 with docstrings",
            "  Classes: 0/1 with docstrings"
          ],
          "recommendations": [
            "Add docstrings to all functions and classes",
            "Use clear, descriptive docstrings following Google or NumPy style"
          ],
          "metric": 16.666666666666664
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": false,
          "complexity_issues": [
            "Function 'main' has high complexity (21 decision points)"
          ],
          "issues": [
            "Function 'main' has high complexity (21 decision points)"
          ],
          "recommendations": [
            "Break complex functions into smaller, focused functions",
            "Extract complex logic into separate methods or classes"
          ],
          "metric": 1
        }
      },
      "overall_compliant": false,
      "compliance_score": 51.612980538778636,
      "issues": [
        "Found 66 lines exceeding 80 characters",
        "  Line 39: 89 chars",
        "  Line 109: 97 chars",
        "  Line 113: 103 chars",
        "Comment density 14.8% below minimum 15.0%",
        "  Comment lines: 81, Code lines: 468",
        "Module size 640 lines exceeds maximum 300 lines",
        "Docstring coverage 16.7% below minimum 80.0%",
        "  Functions: 1/5 with docstrings",
        "  Classes: 0/1 with docstrings",
        "Function 'main' has high complexity (21 decision points)"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Add more comments to explain complex logic and functions",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files",
        "Add docstrings to all functions and classes",
        "Use clear, descriptive docstrings following Google or NumPy style",
        "Break complex functions into smaller, focused functions",
        "Extract complex logic into separate methods or classes"
      ],
      "priority": "medium"
    },
    {
      "path": "pages/simple_node_viewer.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/pages/simple_node_viewer.py",
      "total_lines": 581,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 157,
              "length": 83,
              "content": "                \"description\": f\"Sample {category...."
            },
            {
              "line_number": 242,
              "length": 98,
              "content": "        <div class=\"property-fill\" style=\"width: {..."
            }
          ],
          "issues": [
            "Found 2 lines exceeding 80 characters",
            "  Line 157: 83 chars",
            "  Line 242: 98 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 2
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 16.27906976744186,
          "comment_lines": 77,
          "code_lines": 396,
          "issues": [],
          "recommendations": [],
          "metric": 16.27906976744186
        },
        "module_size": {
          "compliant": false,
          "module_size": 581,
          "issues": [
            "Module size 581 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 581
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 15,
          "functions_with_docstrings": 15,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 73.68421052631578,
      "issues": [
        "Found 2 lines exceeding 80 characters",
        "  Line 157: 83 chars",
        "  Line 242: 98 chars",
        "Module size 581 lines exceeds maximum 300 lines"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files"
      ],
      "priority": "low"
    },
    {
      "path": "pages/simple_node_viewer_refactored.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/pages/simple_node_viewer_refactored.py",
      "total_lines": 581,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 157,
              "length": 83,
              "content": "                \"description\": f\"Sample {category...."
            },
            {
              "line_number": 242,
              "length": 98,
              "content": "        <div class=\"property-fill\" style=\"width: {..."
            }
          ],
          "issues": [
            "Found 2 lines exceeding 80 characters",
            "  Line 157: 83 chars",
            "  Line 242: 98 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 2
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 16.27906976744186,
          "comment_lines": 77,
          "code_lines": 396,
          "issues": [],
          "recommendations": [],
          "metric": 16.27906976744186
        },
        "module_size": {
          "compliant": false,
          "module_size": 581,
          "issues": [
            "Module size 581 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 581
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 15,
          "functions_with_docstrings": 15,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 73.68421052631578,
      "issues": [
        "Found 2 lines exceeding 80 characters",
        "  Line 157: 83 chars",
        "  Line 242: 98 chars",
        "Module size 581 lines exceeds maximum 300 lines"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files"
      ],
      "priority": "low"
    },
    {
      "path": "pages/threat_intel.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/pages/threat_intel.py",
      "total_lines": 239,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 42,
              "length": 84,
              "content": "    otx_api_key = st.text_input(\"AlienVault OTX AP..."
            },
            {
              "line_number": 50,
              "length": 91,
              "content": "    This dashboard displays threat intelligence da..."
            },
            {
              "line_number": 51,
              "length": 99,
              "content": "    Monitor threat actor activities, review indica..."
            },
            {
              "line_number": 57,
              "length": 123,
              "content": "            from data.sample_threat_intel import g..."
            },
            {
              "line_number": 61,
              "length": 115,
              "content": "            st.info(\"Using sample data for demonst..."
            },
            {
              "line_number": 124,
              "length": 88,
              "content": "                recent_df[['date', 'source', 'targ..."
            },
            {
              "line_number": 175,
              "length": 101,
              "content": "                    avg_confidence = sum(confidenc..."
            },
            {
              "line_number": 226,
              "length": 109,
              "content": "                with st.expander(f\"{bulletin.get('..."
            },
            {
              "line_number": 227,
              "length": 87,
              "content": "                    st.markdown(f\"**Severity:** {b..."
            },
            {
              "line_number": 228,
              "length": 93,
              "content": "                    st.markdown(f\"**Category:** {b..."
            },
            {
              "line_number": 229,
              "length": 89,
              "content": "                    st.markdown(bulletin.get('desc..."
            },
            {
              "line_number": 231,
              "length": 85,
              "content": "                    if 'recommendations' in bullet..."
            }
          ],
          "issues": [
            "Found 12 lines exceeding 80 characters",
            "  Line 42: 84 chars",
            "  Line 50: 91 chars",
            "  Line 51: 99 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 12
        },
        "comment_density": {
          "compliant": false,
          "comment_density": 13.06532663316583,
          "comment_lines": 26,
          "code_lines": 173,
          "issues": [
            "Comment density 13.1% below minimum 15.0%",
            "  Comment lines: 26, Code lines: 173"
          ],
          "recommendations": [
            "Add more comments to explain complex logic and functions"
          ],
          "metric": 13.06532663316583
        },
        "module_size": {
          "compliant": true,
          "module_size": 239,
          "issues": [],
          "recommendations": [],
          "metric": 239
        },
        "docstrings": {
          "compliant": false,
          "docstring_coverage": 0.0,
          "functions": 1,
          "functions_with_docstrings": 0,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [
            "Docstring coverage 0.0% below minimum 80.0%",
            "  Functions: 0/1 with docstrings",
            "  Classes: 0/0 with docstrings"
          ],
          "recommendations": [
            "Add docstrings to all functions and classes",
            "Use clear, descriptive docstrings following Google or NumPy style"
          ],
          "metric": 0.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": false,
          "complexity_issues": [
            "Function 'main' has high complexity (19 decision points)"
          ],
          "issues": [
            "Function 'main' has high complexity (19 decision points)"
          ],
          "recommendations": [
            "Break complex functions into smaller, focused functions",
            "Extract complex logic into separate methods or classes"
          ],
          "metric": 1
        }
      },
      "overall_compliant": false,
      "compliance_score": 63.52669781656822,
      "issues": [
        "Found 12 lines exceeding 80 characters",
        "  Line 42: 84 chars",
        "  Line 50: 91 chars",
        "  Line 51: 99 chars",
        "Comment density 13.1% below minimum 15.0%",
        "  Comment lines: 26, Code lines: 173",
        "Docstring coverage 0.0% below minimum 80.0%",
        "  Functions: 0/1 with docstrings",
        "  Classes: 0/0 with docstrings",
        "Function 'main' has high complexity (19 decision points)"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Add more comments to explain complex logic and functions",
        "Add docstrings to all functions and classes",
        "Use clear, descriptive docstrings following Google or NumPy style",
        "Break complex functions into smaller, focused functions",
        "Extract complex logic into separate methods or classes"
      ],
      "priority": "low"
    },
    {
      "path": "pages/threat_intelligence.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/pages/threat_intelligence.py",
      "total_lines": 542,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 5,
              "length": 81,
              "content": "visualization and analysis, with a focus on AlienV..."
            },
            {
              "line_number": 115,
              "length": 101,
              "content": "    st.markdown('<div class=\"threat-header\">CYBER ..."
            },
            {
              "line_number": 131,
              "length": 84,
              "content": "            <span style=\"font-size: 16px; color: #..."
            },
            {
              "line_number": 132,
              "length": 93,
              "content": "            <span style=\"font-size: 18px; color: #..."
            },
            {
              "line_number": 139,
              "length": 84,
              "content": "            <div><span class=\"status-indicator sta..."
            },
            {
              "line_number": 140,
              "length": 87,
              "content": "            <div><span class=\"status-indicator sta..."
            },
            {
              "line_number": 172,
              "length": 96,
              "content": "    st.markdown('<div class=\"threat-subheader\">API..."
            },
            {
              "line_number": 178,
              "length": 87,
              "content": "        st.warning(\"AlienVault OTX API key not con..."
            },
            {
              "line_number": 186,
              "length": 94,
              "content": "                                  help=\"Get your A..."
            },
            {
              "line_number": 191,
              "length": 84,
              "content": "                    # In a real production applica..."
            },
            {
              "line_number": 236,
              "length": 98,
              "content": "                'United States', 'United States', ..."
            },
            {
              "line_number": 260,
              "length": 92,
              "content": "                'attack', 'reconnaissance', 'data_..."
            },
            {
              "line_number": 261,
              "length": 98,
              "content": "                'lateral_movement', 'attack', 'att..."
            },
            {
              "line_number": 295,
              "length": 99,
              "content": "    st.markdown('<div class=\"threat-subheader\">Int..."
            },
            {
              "line_number": 318,
              "length": 93,
              "content": "        location_filter = None if selected_locatio..."
            },
            {
              "line_number": 323,
              "length": 107,
              "content": "        start_date = st.date_input(\"Start Date\", t..."
            },
            {
              "line_number": 335,
              "length": 99,
              "content": "        fetch_data = st.button(\"Fetch Intelligence..."
            },
            {
              "line_number": 344,
              "length": 121,
              "content": "    if fetch_data or (st.session_state.last_otx_qu..."
            },
            {
              "line_number": 359,
              "length": 112,
              "content": "                    st.warning(\"No threat intellig..."
            },
            {
              "line_number": 370,
              "length": 108,
              "content": "            st.markdown(f\"*Last updated: {st.sessi..."
            },
            {
              "line_number": 387,
              "length": 110,
              "content": "    st.markdown('<div class=\"threat-subheader\">Ind..."
            },
            {
              "line_number": 469,
              "length": 95,
              "content": "    st.markdown('<div class=\"threat-subheader\">Thr..."
            },
            {
              "line_number": 472,
              "length": 88,
              "content": "    if not hasattr(st.session_state, 'bulletins') ..."
            },
            {
              "line_number": 484,
              "length": 149,
              "content": "                    \"summary\": \"New spear-phishing..."
            },
            {
              "line_number": 488,
              "length": 82,
              "content": "                    \"title\": \"Ransomware Activity ..."
            },
            {
              "line_number": 490,
              "length": 159,
              "content": "                    \"summary\": \"Multiple financial..."
            },
            {
              "line_number": 496,
              "length": 137,
              "content": "                    \"summary\": \"Vulnerability allo..."
            },
            {
              "line_number": 524,
              "length": 98,
              "content": "    if api_configured or 'flow_data' in st.session..."
            }
          ],
          "issues": [
            "Found 28 lines exceeding 80 characters",
            "  Line 5: 81 chars",
            "  Line 115: 101 chars",
            "  Line 131: 84 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 28
        },
        "comment_density": {
          "compliant": false,
          "comment_density": 14.03118040089087,
          "comment_lines": 63,
          "code_lines": 386,
          "issues": [
            "Comment density 14.0% below minimum 15.0%",
            "  Comment lines: 63, Code lines: 386"
          ],
          "recommendations": [
            "Add more comments to explain complex logic and functions"
          ],
          "metric": 14.03118040089087
        },
        "module_size": {
          "compliant": false,
          "module_size": 542,
          "issues": [
            "Module size 542 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 542
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 90.0,
          "functions": 10,
          "functions_with_docstrings": 9,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 90.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 72.55108818817645,
      "issues": [
        "Found 28 lines exceeding 80 characters",
        "  Line 5: 81 chars",
        "  Line 115: 101 chars",
        "  Line 131: 84 chars",
        "Comment density 14.0% below minimum 15.0%",
        "  Comment lines: 63, Code lines: 386",
        "Module size 542 lines exceeds maximum 300 lines"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Add more comments to explain complex logic and functions",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files"
      ],
      "priority": "low"
    },
    {
      "path": "pages/url_health.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/pages/url_health.py",
      "total_lines": 639,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 81,
              "length": 89,
              "content": "    Check the health of a URL by sending a request..."
            },
            {
              "line_number": 108,
              "length": 81,
              "content": "        result[\"response_time\"] = (end_time - star..."
            },
            {
              "line_number": 149,
              "length": 85,
              "content": "def save_url_health_history(results_df, history_fi..."
            },
            {
              "line_number": 232,
              "length": 83,
              "content": "            return (\"Healthy\", f\"Fast response ({r..."
            },
            {
              "line_number": 238,
              "length": 90,
              "content": "            return (\"Very Slow\", f\"Very slow respo..."
            },
            {
              "line_number": 241,
              "length": 89,
              "content": "        return (\"Redirect\", f\"Redirects to another..."
            },
            {
              "line_number": 244,
              "length": 86,
              "content": "        return (\"Client Error\", f\"Client-side erro..."
            },
            {
              "line_number": 247,
              "length": 86,
              "content": "        return (\"Server Error\", f\"Server-side erro..."
            },
            {
              "line_number": 256,
              "length": 81,
              "content": "    Monitor the health and accessibility of import..."
            },
            {
              "line_number": 257,
              "length": 89,
              "content": "    Track response times, status codes, and identi..."
            },
            {
              "line_number": 276,
              "length": 81,
              "content": "    tab1, tab2, tab3 = st.tabs([\"URL Monitor\", \"He..."
            },
            {
              "line_number": 286,
              "length": 86,
              "content": "            if st.button(\"Check All URLs\", key=\"ch..."
            },
            {
              "line_number": 297,
              "length": 86,
              "content": "                    st.warning(\"No URLs to check. ..."
            },
            {
              "line_number": 300,
              "length": 89,
              "content": "            if st.button(\"Clear Results\", key=\"cle..."
            },
            {
              "line_number": 311,
              "length": 102,
              "content": "            healthy_urls = sum((results_df[\"status..."
            },
            {
              "line_number": 312,
              "length": 101,
              "content": "            error_urls = sum((results_df[\"status_c..."
            },
            {
              "line_number": 313,
              "length": 106,
              "content": "            avg_response_time = results_df[\"respon..."
            },
            {
              "line_number": 329,
              "length": 90,
              "content": "                    <div class=\"metric-value\" styl..."
            },
            {
              "line_number": 337,
              "length": 88,
              "content": "                    <div class=\"metric-value\" styl..."
            },
            {
              "line_number": 345,
              "length": 102,
              "content": "                    <div class=\"metric-value\" styl..."
            },
            {
              "line_number": 362,
              "length": 101,
              "content": "                status, description, color = get_u..."
            },
            {
              "line_number": 368,
              "length": 97,
              "content": "                    <div style=\"color: {color}; fo..."
            },
            {
              "line_number": 369,
              "length": 83,
              "content": "                    <div>Status Code: {status_code..."
            },
            {
              "line_number": 370,
              "length": 86,
              "content": "                    <div>Content Type: {content_ty..."
            },
            {
              "line_number": 371,
              "length": 109,
              "content": "                    <div>Content Size: {(f\"{conten..."
            },
            {
              "line_number": 372,
              "length": 91,
              "content": "                    <div>Last Check: {row['timesta..."
            },
            {
              "line_number": 376,
              "length": 92,
              "content": "            st.info(\"Click 'Check All URLs' to see..."
            },
            {
              "line_number": 383,
              "length": 91,
              "content": "            st.info(\"No historical data available...."
            },
            {
              "line_number": 393,
              "length": 89,
              "content": "                default=available_urls[:3] if len(..."
            },
            {
              "line_number": 408,
              "length": 88,
              "content": "                    \"is_accessible\": \"mean\"  # Wil..."
            },
            {
              "line_number": 417,
              "length": 88,
              "content": "                    labels={\"response_time\": \"Resp..."
            },
            {
              "line_number": 445,
              "length": 86,
              "content": "                    labels={\"is_accessible\": \"Avai..."
            },
            {
              "line_number": 459,
              "length": 94,
              "content": "                    yaxis=dict(showgrid=True, grid..."
            },
            {
              "line_number": 468,
              "length": 108,
              "content": "                status_counts = filtered_df.groupb..."
            },
            {
              "line_number": 477,
              "length": 87,
              "content": "                    labels={\"status_code\": \"HTTP S..."
            },
            {
              "line_number": 524,
              "length": 107,
              "content": "                for col in [\"Avg Response (ms)\", \"..."
            },
            {
              "line_number": 530,
              "length": 96,
              "content": "                    stats_df[\"Availability (%)\"] =..."
            },
            {
              "line_number": 544,
              "length": 85,
              "content": "            new_url = st.text_input(\"Add New URL\",..."
            },
            {
              "line_number": 548,
              "length": 90,
              "content": "                submit_button = st.form_submit_but..."
            },
            {
              "line_number": 574,
              "length": 88,
              "content": "                    if st.button(\"Remove\", key=f\"r..."
            },
            {
              "line_number": 600,
              "length": 82,
              "content": "            uploaded_file = st.file_uploader(\"Impo..."
            },
            {
              "line_number": 616,
              "length": 83,
              "content": "                        st.success(f\"Imported {len..."
            },
            {
              "line_number": 630,
              "length": 106,
              "content": "                timeout = st.number_input(\"Request..."
            },
            {
              "line_number": 633,
              "length": 87,
              "content": "                check_interval = st.number_input(\"..."
            },
            {
              "line_number": 634,
              "length": 84,
              "content": "                                              min_..."
            },
            {
              "line_number": 636,
              "length": 95,
              "content": "            # These settings would be used in a pr..."
            }
          ],
          "issues": [
            "Found 46 lines exceeding 80 characters",
            "  Line 81: 89 chars",
            "  Line 108: 81 chars",
            "  Line 149: 85 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 46
        },
        "comment_density": {
          "compliant": false,
          "comment_density": 14.91395793499044,
          "comment_lines": 78,
          "code_lines": 445,
          "issues": [
            "Comment density 14.9% below minimum 15.0%",
            "  Comment lines: 78, Code lines: 445"
          ],
          "recommendations": [
            "Add more comments to explain complex logic and functions"
          ],
          "metric": 14.91395793499044
        },
        "module_size": {
          "compliant": false,
          "module_size": 639,
          "issues": [
            "Module size 639 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 639
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 6,
          "functions_with_docstrings": 6,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": false,
          "complexity_issues": [
            "Function 'main' has high complexity (25 decision points)"
          ],
          "issues": [
            "Function 'main' has high complexity (25 decision points)"
          ],
          "recommendations": [
            "Break complex functions into smaller, focused functions",
            "Extract complex logic into separate methods or classes"
          ],
          "metric": 1
        }
      },
      "overall_compliant": false,
      "compliance_score": 65.68883969004729,
      "issues": [
        "Found 46 lines exceeding 80 characters",
        "  Line 81: 89 chars",
        "  Line 108: 81 chars",
        "  Line 149: 85 chars",
        "Comment density 14.9% below minimum 15.0%",
        "  Comment lines: 78, Code lines: 445",
        "Module size 639 lines exceeds maximum 300 lines",
        "Function 'main' has high complexity (25 decision points)"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Add more comments to explain complex logic and functions",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files",
        "Break complex functions into smaller, focused functions",
        "Extract complex logic into separate methods or classes"
      ],
      "priority": "low"
    },
    {
      "path": "pages/url_health_dashboard.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/pages/url_health_dashboard.py",
      "total_lines": 219,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 4,
              "length": 86,
              "content": "Real-time link reliability and accessibility metri..."
            },
            {
              "line_number": 6,
              "length": 82,
              "content": "This dashboard provides insights into the health a..."
            },
            {
              "line_number": 7,
              "length": 86,
              "content": "with a focus on monitoring web scraping endpoints ..."
            },
            {
              "line_number": 34,
              "length": 105,
              "content": "        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9]..."
            },
            {
              "line_number": 75,
              "length": 82,
              "content": "        st.warning(\"No URLs to check. Add custom U..."
            },
            {
              "line_number": 79,
              "length": 82,
              "content": "st.write(\"Monitor the health and accessibility of ..."
            },
            {
              "line_number": 110,
              "length": 96,
              "content": "            st.session_state.next_refresh = dateti..."
            },
            {
              "line_number": 116,
              "length": 85,
              "content": "            st.session_state.next_refresh = now + ..."
            },
            {
              "line_number": 119,
              "length": 94,
              "content": "        st.write(f\"Next refresh in: {int(time_rema..."
            },
            {
              "line_number": 125,
              "length": 84,
              "content": "tabs = st.tabs([\"Health Status\", \"Response Times\",..."
            },
            {
              "line_number": 132,
              "length": 99,
              "content": "        st.write(f\"Last checked: {st.session_state..."
            },
            {
              "line_number": 151,
              "length": 83,
              "content": "        st.info(\"No URL health data available. Run..."
            },
            {
              "line_number": 160,
              "length": 131,
              "content": "        selected_urls = st.multiselect(\"Select URL..."
            },
            {
              "line_number": 168,
              "length": 86,
              "content": "        st.info(\"No response time data available. ..."
            },
            {
              "line_number": 178,
              "length": 85,
              "content": "        st.info(\"No availability data available. R..."
            },
            {
              "line_number": 190,
              "length": 100,
              "content": "            df['last_checked'] = pd.to_datetime(df..."
            },
            {
              "line_number": 193,
              "length": 110,
              "content": "            df['response_time'] = df['response_tim..."
            },
            {
              "line_number": 198,
              "length": 89,
              "content": "                    URLHealthStatus.STATUS_OK: 'ba..."
            },
            {
              "line_number": 199,
              "length": 91,
              "content": "                    URLHealthStatus.STATUS_SLOW: '..."
            },
            {
              "line_number": 200,
              "length": 92,
              "content": "                    URLHealthStatus.STATUS_ERROR: ..."
            },
            {
              "line_number": 201,
              "length": 94,
              "content": "                    URLHealthStatus.STATUS_TIMEOUT..."
            },
            {
              "line_number": 202,
              "length": 93,
              "content": "                    URLHealthStatus.STATUS_INVALID..."
            },
            {
              "line_number": 218,
              "length": 125,
              "content": "    ('data_source_urls' in st.session_state and st..."
            }
          ],
          "issues": [
            "Found 23 lines exceeding 80 characters",
            "  Line 4: 86 chars",
            "  Line 6: 82 chars",
            "  Line 7: 86 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 23
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 18.435754189944134,
          "comment_lines": 33,
          "code_lines": 146,
          "issues": [],
          "recommendations": [],
          "metric": 18.435754189944134
        },
        "module_size": {
          "compliant": true,
          "module_size": 219,
          "issues": [],
          "recommendations": [],
          "metric": 219
        },
        "docstrings": {
          "compliant": false,
          "docstring_coverage": 25.0,
          "functions": 4,
          "functions_with_docstrings": 1,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [
            "Docstring coverage 25.0% below minimum 80.0%",
            "  Functions: 1/4 with docstrings",
            "  Classes: 0/0 with docstrings"
          ],
          "recommendations": [
            "Add docstrings to all functions and classes",
            "Use clear, descriptive docstrings following Google or NumPy style"
          ],
          "metric": 25.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 79.16666666666666,
      "issues": [
        "Found 23 lines exceeding 80 characters",
        "  Line 4: 86 chars",
        "  Line 6: 82 chars",
        "  Line 7: 86 chars",
        "Docstring coverage 25.0% below minimum 80.0%",
        "  Functions: 1/4 with docstrings",
        "  Classes: 0/0 with docstrings"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Add docstrings to all functions and classes",
        "Use clear, descriptive docstrings following Google or NumPy style"
      ],
      "priority": "low"
    },
    {
      "path": "pages/url_health_monitoring.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/pages/url_health_monitoring.py",
      "total_lines": 444,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 20,
              "length": 125,
              "content": "Real-time link reliability and accessibility metri..."
            },
            {
              "line_number": 70,
              "length": 105,
              "content": "        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9]..."
            },
            {
              "line_number": 118,
              "length": 82,
              "content": "        st.warning(\"No URLs to check. Add custom U..."
            },
            {
              "line_number": 122,
              "length": 122,
              "content": "st.write(\"Monitor the health and accessibility of ..."
            },
            {
              "line_number": 135,
              "length": 92,
              "content": "                           help=\"Paste article tex..."
            },
            {
              "line_number": 139,
              "length": 97,
              "content": "            extracted_urls = st.session_state.url_..."
            },
            {
              "line_number": 170,
              "length": 96,
              "content": "            st.session_state.next_refresh = dateti..."
            },
            {
              "line_number": 176,
              "length": 85,
              "content": "            st.session_state.next_refresh = now + ..."
            },
            {
              "line_number": 179,
              "length": 94,
              "content": "        st.write(f\"Next refresh in: {int(time_rema..."
            },
            {
              "line_number": 185,
              "length": 128,
              "content": "tabs = st.tabs([\"Health Status\", \"Response Times\",..."
            },
            {
              "line_number": 192,
              "length": 99,
              "content": "        st.write(f\"Last checked: {st.session_state..."
            },
            {
              "line_number": 211,
              "length": 83,
              "content": "        st.info(\"No URL health data available. Run..."
            },
            {
              "line_number": 220,
              "length": 131,
              "content": "        selected_urls = st.multiselect(\"Select URL..."
            },
            {
              "line_number": 228,
              "length": 86,
              "content": "        st.info(\"No response time data available. ..."
            },
            {
              "line_number": 238,
              "length": 85,
              "content": "        st.info(\"No availability data available. R..."
            },
            {
              "line_number": 252,
              "length": 85,
              "content": "        domain_counts = {domain: len(urls) for dom..."
            },
            {
              "line_number": 262,
              "length": 99,
              "content": "        cols[1].metric(\"Top Domain\", domain_df['Do..."
            },
            {
              "line_number": 263,
              "length": 106,
              "content": "        cols[2].metric(\"URLs in Top Domain\", domai..."
            },
            {
              "line_number": 308,
              "length": 83,
              "content": "        health_df = pd.DataFrame(health_data).sort..."
            },
            {
              "line_number": 330,
              "length": 119,
              "content": "                    st.markdown(f\"* <span style='c..."
            },
            {
              "line_number": 332,
              "length": 96,
              "content": "        st.info(\"No URL data available for domain ..."
            },
            {
              "line_number": 352,
              "length": 86,
              "content": "                                 help=\"Larger valu..."
            },
            {
              "line_number": 358,
              "length": 123,
              "content": "            st.info(f\"Showing network visualizatio..."
            },
            {
              "line_number": 362,
              "length": 108,
              "content": "            network_fig = monitor.create_url_netwo..."
            },
            {
              "line_number": 369,
              "length": 141,
              "content": "                               help=\"Enter a singl..."
            },
            {
              "line_number": 381,
              "length": 85,
              "content": "                    st.success(f\"Found {len(extrac..."
            },
            {
              "line_number": 384,
              "length": 86,
              "content": "                    with st.spinner(\"Generating vi..."
            },
            {
              "line_number": 385,
              "length": 110,
              "content": "                        extracted_fig = monitor.cr..."
            },
            {
              "line_number": 398,
              "length": 85,
              "content": "                        st.success(f\"Added {len(ex..."
            },
            {
              "line_number": 403,
              "length": 102,
              "content": "        st.info(\"No URL data available for network..."
            },
            {
              "line_number": 415,
              "length": 100,
              "content": "            df['last_checked'] = pd.to_datetime(df..."
            },
            {
              "line_number": 418,
              "length": 110,
              "content": "            df['response_time'] = df['response_tim..."
            },
            {
              "line_number": 423,
              "length": 89,
              "content": "                    URLHealthStatus.STATUS_OK: 'ba..."
            },
            {
              "line_number": 424,
              "length": 91,
              "content": "                    URLHealthStatus.STATUS_SLOW: '..."
            },
            {
              "line_number": 425,
              "length": 92,
              "content": "                    URLHealthStatus.STATUS_ERROR: ..."
            },
            {
              "line_number": 426,
              "length": 94,
              "content": "                    URLHealthStatus.STATUS_TIMEOUT..."
            },
            {
              "line_number": 427,
              "length": 93,
              "content": "                    URLHealthStatus.STATUS_INVALID..."
            },
            {
              "line_number": 443,
              "length": 125,
              "content": "    ('data_source_urls' in st.session_state and st..."
            }
          ],
          "issues": [
            "Found 38 lines exceeding 80 characters",
            "  Line 20: 125 chars",
            "  Line 70: 105 chars",
            "  Line 118: 82 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 38
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 17.66304347826087,
          "comment_lines": 65,
          "code_lines": 303,
          "issues": [],
          "recommendations": [],
          "metric": 17.66304347826087
        },
        "module_size": {
          "compliant": false,
          "module_size": 444,
          "issues": [
            "Module size 444 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 444
        },
        "docstrings": {
          "compliant": false,
          "docstring_coverage": 50.0,
          "functions": 4,
          "functions_with_docstrings": 2,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [
            "Docstring coverage 50.0% below minimum 80.0%",
            "  Functions: 2/4 with docstrings",
            "  Classes: 0/0 with docstrings"
          ],
          "recommendations": [
            "Add docstrings to all functions and classes",
            "Use clear, descriptive docstrings following Google or NumPy style"
          ],
          "metric": 50.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 67.10526315789474,
      "issues": [
        "Found 38 lines exceeding 80 characters",
        "  Line 20: 125 chars",
        "  Line 70: 105 chars",
        "  Line 118: 82 chars",
        "Module size 444 lines exceeds maximum 300 lines",
        "Docstring coverage 50.0% below minimum 80.0%",
        "  Functions: 2/4 with docstrings",
        "  Classes: 0/0 with docstrings"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files",
        "Add docstrings to all functions and classes",
        "Use clear, descriptive docstrings following Google or NumPy style"
      ],
      "priority": "low"
    },
    {
      "path": "pages/url_intelligence.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/pages/url_intelligence.py",
      "total_lines": 494,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 56,
              "length": 112,
              "content": "    Analyze websites and online resources with ins..."
            },
            {
              "line_number": 84,
              "length": 104,
              "content": "    Enter a URL to get an instant snapshot with in..."
            },
            {
              "line_number": 100,
              "length": 82,
              "content": "                    url_data = asyncio.run(collect..."
            },
            {
              "line_number": 116,
              "length": 108,
              "content": "                        st.error(\"Failed to collec..."
            },
            {
              "line_number": 138,
              "length": 89,
              "content": "                    url_data = asyncio.run(collect..."
            },
            {
              "line_number": 154,
              "length": 96,
              "content": "                        st.error(f\"Failed to colle..."
            },
            {
              "line_number": 161,
              "length": 82,
              "content": "    Extract location information from URLs and vis..."
            },
            {
              "line_number": 165,
              "length": 82,
              "content": "    if not hasattr(st.session_state, 'url_data') o..."
            },
            {
              "line_number": 181,
              "length": 83,
              "content": "    st.subheader(f\"Locations mentioned in {url_dat..."
            },
            {
              "line_number": 212,
              "length": 84,
              "content": "            st.markdown(f\"**Region {i+1}: {region...."
            },
            {
              "line_number": 218,
              "length": 115,
              "content": "                st.markdown(f\"- Center: Lat {cente..."
            },
            {
              "line_number": 229,
              "length": 82,
              "content": "    if not hasattr(st.session_state, 'url_data') o..."
            },
            {
              "line_number": 246,
              "length": 84,
              "content": "        Upload an OSINT dataset (Excel or CSV) to ..."
            },
            {
              "line_number": 249,
              "length": 83,
              "content": "        osint_file = st.file_uploader(\"Upload OSIN..."
            },
            {
              "line_number": 263,
              "length": 100,
              "content": "                st.success(f\"OSINT dataset loaded ..."
            },
            {
              "line_number": 269,
              "length": 91,
              "content": "                    st.success(f\"Found {len(osint_..."
            },
            {
              "line_number": 271,
              "length": 84,
              "content": "                    st.info(\"No connections found ..."
            },
            {
              "line_number": 306,
              "length": 130,
              "content": "            st.markdown(f\"- **{os.path.basename(da..."
            },
            {
              "line_number": 317,
              "length": 82,
              "content": "    if not hasattr(st.session_state, 'url_data') o..."
            },
            {
              "line_number": 351,
              "length": 95,
              "content": "async def collect_url_data(url: str, take_screensh..."
            },
            {
              "line_number": 491,
              "length": 82,
              "content": "        return {\"related_entities\": [], \"related_d..."
            }
          ],
          "issues": [
            "Found 21 lines exceeding 80 characters",
            "  Line 56: 112 chars",
            "  Line 84: 104 chars",
            "  Line 100: 82 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 21
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 20.671834625322997,
          "comment_lines": 80,
          "code_lines": 307,
          "issues": [],
          "recommendations": [],
          "metric": 20.671834625322997
        },
        "module_size": {
          "compliant": false,
          "module_size": 494,
          "issues": [
            "Module size 494 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 494
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 5,
          "functions_with_docstrings": 5,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 73.68421052631578,
      "issues": [
        "Found 21 lines exceeding 80 characters",
        "  Line 56: 112 chars",
        "  Line 84: 104 chars",
        "  Line 100: 82 chars",
        "Module size 494 lines exceeds maximum 300 lines"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files"
      ],
      "priority": "low"
    },
    {
      "path": "pages/workflow_storyteller.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/pages/workflow_storyteller.py",
      "total_lines": 407,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 91,
              "length": 84,
              "content": "def create_demo_timeline(storyteller: WorkflowProg..."
            },
            {
              "line_number": 109,
              "length": 81,
              "content": "        description=\"Cyber threat hunting operatio..."
            },
            {
              "line_number": 120,
              "length": 98,
              "content": "        description=\"Initial planning and resource..."
            },
            {
              "line_number": 136,
              "length": 81,
              "content": "        description=\"Complete analysis of attack v..."
            },
            {
              "line_number": 144,
              "length": 85,
              "content": "        description=\"Implementation of countermeas..."
            },
            {
              "line_number": 198,
              "length": 90,
              "content": "        description=\"Collection of domain informat..."
            },
            {
              "line_number": 246,
              "length": 101,
              "content": "        description=\"Correlation of tactics, techn..."
            },
            {
              "line_number": 255,
              "length": 89,
              "content": "        description=\"Discovered heavily encrypted ..."
            },
            {
              "line_number": 285,
              "length": 86,
              "content": "        description=\"Updates to network defense sy..."
            },
            {
              "line_number": 294,
              "length": 93,
              "content": "        description=\"Insufficient resources for co..."
            },
            {
              "line_number": 304,
              "length": 85,
              "content": "        description=\"Comprehensive report on opera..."
            },
            {
              "line_number": 313,
              "length": 90,
              "content": "        description=\"Sharing of sanitized threat i..."
            },
            {
              "line_number": 348,
              "length": 92,
              "content": "        '<p>Create, visualize, and analyze narrati..."
            },
            {
              "line_number": 359,
              "length": 81,
              "content": "        description=\"Interactive visualization of ..."
            },
            {
              "line_number": 374,
              "length": 81,
              "content": "    with st.expander(\"About this Tool\", expanded=n..."
            },
            {
              "line_number": 378,
              "length": 88,
              "content": "        This tool enables you to create visual nar..."
            },
            {
              "line_number": 381,
              "length": 84,
              "content": "        - **Track progress** through visualization..."
            },
            {
              "line_number": 387,
              "length": 83,
              "content": "        Use the dashboard to create new timelines,..."
            },
            {
              "line_number": 393,
              "length": 82,
              "content": "            if not st.session_state.load_demo and ..."
            }
          ],
          "issues": [
            "Found 19 lines exceeding 80 characters",
            "  Line 91: 84 chars",
            "  Line 109: 81 chars",
            "  Line 120: 98 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 19
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 19.220055710306408,
          "comment_lines": 69,
          "code_lines": 290,
          "issues": [],
          "recommendations": [],
          "metric": 19.220055710306408
        },
        "module_size": {
          "compliant": false,
          "module_size": 407,
          "issues": [
            "Module size 407 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 407
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 3,
          "functions_with_docstrings": 3,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 73.68421052631578,
      "issues": [
        "Found 19 lines exceeding 80 characters",
        "  Line 91: 84 chars",
        "  Line 109: 81 chars",
        "  Line 120: 98 chars",
        "Module size 407 lines exceeds maximum 300 lines"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files"
      ],
      "priority": "low"
    },
    {
      "path": "run_all_fixes.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/run_all_fixes.py",
      "total_lines": 55,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 16,
              "length": 91,
              "content": "        (\"Team A\", \"team_packages/team_a_critical_..."
            },
            {
              "line_number": 43,
              "length": 82,
              "content": "    print(f\"\\n\ud83c\udfaf Final Summary: {successful}/{total..."
            }
          ],
          "issues": [
            "Found 2 lines exceeding 80 characters",
            "  Line 16: 91 chars",
            "  Line 43: 82 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 2
        },
        "comment_density": {
          "compliant": false,
          "comment_density": 11.363636363636363,
          "comment_lines": 5,
          "code_lines": 39,
          "issues": [
            "Comment density 11.4% below minimum 15.0%",
            "  Comment lines: 5, Code lines: 39"
          ],
          "recommendations": [
            "Add more comments to explain complex logic and functions"
          ],
          "metric": 11.363636363636363
        },
        "module_size": {
          "compliant": true,
          "module_size": 55,
          "issues": [],
          "recommendations": [],
          "metric": 55
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 1,
          "functions_with_docstrings": 1,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 86.97501329080276,
      "issues": [
        "Found 2 lines exceeding 80 characters",
        "  Line 16: 91 chars",
        "  Line 43: 82 chars",
        "Comment density 11.4% below minimum 15.0%",
        "  Comment lines: 5, Code lines: 39"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Add more comments to explain complex logic and functions"
      ],
      "priority": "low"
    },
    {
      "path": "run_all_teams.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/run_all_teams.py",
      "total_lines": 409,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 69,
              "length": 90,
              "content": "            logger.error(f\"\u274c Team A verification f..."
            },
            {
              "line_number": 76,
              "length": 94,
              "content": "                ['python3', '-c', 'import main; pr..."
            },
            {
              "line_number": 83,
              "length": 93,
              "content": "                logger.info(\"\u2705 Team A verification..."
            },
            {
              "line_number": 110,
              "length": 82,
              "content": "                logger.info(f\"   Found {len(result..."
            },
            {
              "line_number": 111,
              "length": 87,
              "content": "                logger.info(f\"   Total size: {resu..."
            },
            {
              "line_number": 119,
              "length": 91,
              "content": "                        logger.warning(f\"   {file_..."
            },
            {
              "line_number": 124,
              "length": 87,
              "content": "                logger.info(\"\u2705 Team B: No large fi..."
            },
            {
              "line_number": 144,
              "length": 138,
              "content": "                \"CREATE TABLE IF NOT EXISTS team_c..."
            },
            {
              "line_number": 150,
              "length": 91,
              "content": "            results = db_manager.execute_query(\"SE..."
            },
            {
              "line_number": 194,
              "length": 84,
              "content": "            from team_d_organization.organization_..."
            },
            {
              "line_number": 199,
              "length": 96,
              "content": "            org_manager.define_role(\"team_lead\", [..."
            },
            {
              "line_number": 200,
              "length": 92,
              "content": "            org_manager.define_role(\"developer\", [..."
            },
            {
              "line_number": 201,
              "length": 101,
              "content": "            org_manager.define_role(\"analyst\", [\"a..."
            },
            {
              "line_number": 211,
              "length": 92,
              "content": "            logger.info(f\"   Created {len(roles)} ..."
            },
            {
              "line_number": 215,
              "length": 85,
              "content": "            from team_d_organization.enhanced_code..."
            },
            {
              "line_number": 220,
              "length": 135,
              "content": "            logger.info(f\"   Code standards: {anal..."
            },
            {
              "line_number": 222,
              "length": 112,
              "content": "            logger.info(f\"   High priority files: ..."
            },
            {
              "line_number": 247,
              "length": 86,
              "content": "                ['python3', '-c', 'import main; pr..."
            },
            {
              "line_number": 260,
              "length": 124,
              "content": "                ['python3', '-c', 'from core.datab..."
            },
            {
              "line_number": 273,
              "length": 133,
              "content": "                ['python3', '-c', 'from utils.enha..."
            },
            {
              "line_number": 294,
              "length": 88,
              "content": "                    ['python3', '-c', f'import {mo..."
            },
            {
              "line_number": 301,
              "length": 83,
              "content": "                    logger.error(f\"\u274c Core module {..."
            },
            {
              "line_number": 320,
              "length": 98,
              "content": "                'start_time': time.strftime('%Y-%m..."
            },
            {
              "line_number": 321,
              "length": 89,
              "content": "                'end_time': time.strftime('%Y-%m-%..."
            },
            {
              "line_number": 324,
              "length": 84,
              "content": "                'overall_status': 'SUCCESS' if len..."
            },
            {
              "line_number": 360,
              "length": 85,
              "content": "        logger.info(\"\u2705 Team A verification passed ..."
            },
            {
              "line_number": 361,
              "length": 82,
              "content": "        self.results['team_a'] = {'status': 'verif..."
            },
            {
              "line_number": 388,
              "length": 95,
              "content": "        logger.info(f\"\ud83d\udcca Execution time: {report['e..."
            }
          ],
          "issues": [
            "Found 28 lines exceeding 80 characters",
            "  Line 69: 90 chars",
            "  Line 76: 94 chars",
            "  Line 83: 93 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 28
        },
        "comment_density": {
          "compliant": false,
          "comment_density": 11.044776119402986,
          "comment_lines": 37,
          "code_lines": 298,
          "issues": [
            "Comment density 11.0% below minimum 15.0%",
            "  Comment lines: 37, Code lines: 298"
          ],
          "recommendations": [
            "Add more comments to explain complex logic and functions"
          ],
          "metric": 11.044776119402986
        },
        "module_size": {
          "compliant": false,
          "module_size": 409,
          "issues": [
            "Module size 409 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 409
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 81.81818181818183,
          "functions": 10,
          "functions_with_docstrings": 8,
          "classes": 1,
          "classes_with_docstrings": 1,
          "issues": [],
          "recommendations": [],
          "metric": 81.81818181818183
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 69.05821768351227,
      "issues": [
        "Found 28 lines exceeding 80 characters",
        "  Line 69: 90 chars",
        "  Line 76: 94 chars",
        "  Line 83: 93 chars",
        "Comment density 11.0% below minimum 15.0%",
        "  Comment lines: 37, Code lines: 298",
        "Module size 409 lines exceeds maximum 300 lines"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Add more comments to explain complex logic and functions",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files"
      ],
      "priority": "low"
    },
    {
      "path": "team_packages/__init__.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/team_packages/__init__.py",
      "total_lines": 1,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 100.0,
          "comment_lines": 1,
          "code_lines": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "module_size": {
          "compliant": true,
          "module_size": 1,
          "issues": [],
          "recommendations": [],
          "metric": 1
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100,
          "functions": 0,
          "functions_with_docstrings": 0,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 100.0,
      "issues": [],
      "recommendations": [],
      "priority": "low"
    },
    {
      "path": "team_packages/run_teams_b_c_d.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/team_packages/run_teams_b_c_d.py",
      "total_lines": 139,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 26,
              "length": 91,
              "content": "logging.basicConfig(level=logging.INFO, format='%(..."
            },
            {
              "line_number": 40,
              "length": 83,
              "content": "            logger.info(f\"   Total size: {results[..."
            },
            {
              "line_number": 43,
              "length": 83,
              "content": "            logger.info(\"\u2705 Team B: No large files ..."
            },
            {
              "line_number": 58,
              "length": 156,
              "content": "        db_manager.execute_query(\"CREATE TABLE IF ..."
            },
            {
              "line_number": 59,
              "length": 94,
              "content": "        db_manager.execute_query(\"INSERT INTO team..."
            },
            {
              "line_number": 60,
              "length": 87,
              "content": "        results = db_manager.execute_query(\"SELECT..."
            },
            {
              "line_number": 81,
              "length": 92,
              "content": "        org_manager.define_role(\"team_lead\", [\"man..."
            },
            {
              "line_number": 82,
              "length": 88,
              "content": "        org_manager.define_role(\"developer\", [\"wri..."
            },
            {
              "line_number": 83,
              "length": 97,
              "content": "        org_manager.define_role(\"analyst\", [\"analy..."
            },
            {
              "line_number": 93,
              "length": 88,
              "content": "        logger.info(f\"   Created {len(roles)} orga..."
            },
            {
              "line_number": 125,
              "length": 100,
              "content": "    logger.info(f\"\ud83c\udfaf Teams B, C, D Integration Summ..."
            },
            {
              "line_number": 135,
              "length": 83,
              "content": "        logger.warning(\"\u26a0\ufe0f Some teams encountered ..."
            }
          ],
          "issues": [
            "Found 12 lines exceeding 80 characters",
            "  Line 26: 91 chars",
            "  Line 40: 83 chars",
            "  Line 43: 83 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 12
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 15.09433962264151,
          "comment_lines": 16,
          "code_lines": 90,
          "issues": [],
          "recommendations": [],
          "metric": 15.09433962264151
        },
        "module_size": {
          "compliant": true,
          "module_size": 139,
          "issues": [],
          "recommendations": [],
          "metric": 139
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 4,
          "functions_with_docstrings": 4,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 91.22807017543859,
      "issues": [
        "Found 12 lines exceeding 80 characters",
        "  Line 26: 91 chars",
        "  Line 40: 83 chars",
        "  Line 43: 83 chars"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation"
      ],
      "priority": "low"
    },
    {
      "path": "team_packages/team_a_critical_fixes/__init__.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/team_packages/team_a_critical_fixes/__init__.py",
      "total_lines": 1,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 100.0,
          "comment_lines": 1,
          "code_lines": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "module_size": {
          "compliant": true,
          "module_size": 1,
          "issues": [],
          "recommendations": [],
          "metric": 1
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100,
          "functions": 0,
          "functions_with_docstrings": 0,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 100.0,
      "issues": [],
      "recommendations": [],
      "priority": "low"
    },
    {
      "path": "team_packages/team_a_critical_fixes/code_standards_cleanup.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/team_packages/team_a_critical_fixes/code_standards_cleanup.py",
      "total_lines": 200,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 78,
              "length": 91,
              "content": "                    unused in line for unused in [..."
            },
            {
              "line_number": 82,
              "length": 82,
              "content": "                        ('sys' in line and 'sys' n..."
            },
            {
              "line_number": 83,
              "length": 83,
              "content": "                        ('Path' in line and 'Path'..."
            },
            {
              "line_number": 184,
              "length": 88,
              "content": "        print(f\"\\n\ud83c\udfaf Code Standards Cleanup Summary..."
            }
          ],
          "issues": [
            "Found 4 lines exceeding 80 characters",
            "  Line 78: 91 chars",
            "  Line 82: 82 chars",
            "  Line 83: 83 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 4
        },
        "comment_density": {
          "compliant": false,
          "comment_density": 14.11042944785276,
          "comment_lines": 23,
          "code_lines": 140,
          "issues": [
            "Comment density 14.1% below minimum 15.0%",
            "  Comment lines: 23, Code lines: 140"
          ],
          "recommendations": [
            "Add more comments to explain complex logic and functions"
          ],
          "metric": 14.11042944785276
        },
        "module_size": {
          "compliant": true,
          "module_size": 200,
          "issues": [],
          "recommendations": [],
          "metric": 200
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 85.71428571428571,
          "functions": 6,
          "functions_with_docstrings": 5,
          "classes": 1,
          "classes_with_docstrings": 1,
          "issues": [],
          "recommendations": [],
          "metric": 85.71428571428571
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": false,
          "complexity_issues": [
            "Function 'fix_blank_lines' has high complexity (11 decision points)"
          ],
          "issues": [
            "Function 'fix_blank_lines' has high complexity (11 decision points)"
          ],
          "recommendations": [
            "Break complex functions into smaller, focused functions",
            "Extract complex logic into separate methods or classes"
          ],
          "metric": 1
        }
      },
      "overall_compliant": true,
      "compliance_score": 82.29289993900908,
      "issues": [
        "Found 4 lines exceeding 80 characters",
        "  Line 78: 91 chars",
        "  Line 82: 82 chars",
        "  Line 83: 83 chars",
        "Comment density 14.1% below minimum 15.0%",
        "  Comment lines: 23, Code lines: 140",
        "Function 'fix_blank_lines' has high complexity (11 decision points)"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Add more comments to explain complex logic and functions",
        "Break complex functions into smaller, focused functions",
        "Extract complex logic into separate methods or classes"
      ],
      "priority": "low"
    },
    {
      "path": "team_packages/team_a_critical_fixes/critical_fixes_implementation.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/team_packages/team_a_critical_fixes/critical_fixes_implementation.py",
      "total_lines": 556,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 6,
              "length": 88,
              "content": "This module implements the critical fixes identifi..."
            },
            {
              "line_number": 23,
              "length": 91,
              "content": "logging.basicConfig(level=logging.INFO, format='%(..."
            },
            {
              "line_number": 33,
              "length": 81,
              "content": "        logger.info(f\"Initialized Team A fixes for..."
            },
            {
              "line_number": 94,
              "length": 96,
              "content": "def render_with_fallback(html_content: str, task_d..."
            },
            {
              "line_number": 120,
              "length": 92,
              "content": "            st.code(html_content[:500] + \"...\" if ..."
            },
            {
              "line_number": 125,
              "length": 87,
              "content": "        enhanced_renderer_path = self.repo_root / ..."
            },
            {
              "line_number": 225,
              "length": 85,
              "content": "                logger.info(f\"Creating {db_type} c..."
            },
            {
              "line_number": 227,
              "length": 97,
              "content": "                return {\"type\": db_type, \"thread\":..."
            },
            {
              "line_number": 230,
              "length": 114,
              "content": "                    logger.warning(f\"Connection at..."
            },
            {
              "line_number": 240,
              "length": 95,
              "content": "            return connection is not None and time..."
            },
            {
              "line_number": 247,
              "length": 93,
              "content": "        keys_to_remove = [k for k in self._connect..."
            },
            {
              "line_number": 262,
              "length": 98,
              "content": "        improved_factory_path = self.repo_root / \"..."
            },
            {
              "line_number": 479,
              "length": 82,
              "content": "        config_manager_path = self.repo_root / \"co..."
            },
            {
              "line_number": 542,
              "length": 100,
              "content": "        logger.info(f\"\ud83c\udfaf Team A Critical Fixes Summ..."
            }
          ],
          "issues": [
            "Found 14 lines exceeding 80 characters",
            "  Line 6: 88 chars",
            "  Line 23: 91 chars",
            "  Line 33: 81 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 14
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 18.403547671840354,
          "comment_lines": 83,
          "code_lines": 368,
          "issues": [],
          "recommendations": [],
          "metric": 18.403547671840354
        },
        "module_size": {
          "compliant": false,
          "module_size": 556,
          "issues": [
            "Module size 556 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 556
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 85.71428571428571,
          "functions": 6,
          "functions_with_docstrings": 5,
          "classes": 1,
          "classes_with_docstrings": 1,
          "issues": [],
          "recommendations": [],
          "metric": 85.71428571428571
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 73.68421052631578,
      "issues": [
        "Found 14 lines exceeding 80 characters",
        "  Line 6: 88 chars",
        "  Line 23: 91 chars",
        "  Line 33: 81 chars",
        "Module size 556 lines exceeds maximum 300 lines"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files"
      ],
      "priority": "low"
    },
    {
      "path": "team_packages/team_a_critical_fixes/verify_fixes.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/team_packages/team_a_critical_fixes/verify_fixes.py",
      "total_lines": 273,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 6,
              "length": 82,
              "content": "This script verifies that all Team A critical fixe..."
            },
            {
              "line_number": 16,
              "length": 91,
              "content": "logging.basicConfig(level=logging.INFO, format='%(..."
            },
            {
              "line_number": 37,
              "length": 102,
              "content": "            assert hasattr(ehr, 'render_task_card_..."
            },
            {
              "line_number": 38,
              "length": 96,
              "content": "            assert hasattr(ehr, 'render_with_fallb..."
            },
            {
              "line_number": 50,
              "length": 106,
              "content": "            # This would normally render to Stream..."
            },
            {
              "line_number": 68,
              "length": 113,
              "content": "            assert hasattr(factory, 'StreamlitSafe..."
            },
            {
              "line_number": 69,
              "length": 92,
              "content": "            assert hasattr(factory, 'database_fact..."
            },
            {
              "line_number": 75,
              "length": 89,
              "content": "            assert hasattr(db_factory, 'get_connec..."
            },
            {
              "line_number": 76,
              "length": 99,
              "content": "            assert hasattr(db_factory, 'cleanup_co..."
            },
            {
              "line_number": 96,
              "length": 91,
              "content": "            assert hasattr(ic, 'check_dependencies..."
            },
            {
              "line_number": 100,
              "length": 83,
              "content": "            assert streamlit_module is not None, \"..."
            },
            {
              "line_number": 104,
              "length": 82,
              "content": "            assert isinstance(deps, dict), \"check_..."
            },
            {
              "line_number": 105,
              "length": 83,
              "content": "            assert 'streamlit' in deps, \"streamlit..."
            },
            {
              "line_number": 120,
              "length": 83,
              "content": "                assert init_path.exists(), f\"Missi..."
            },
            {
              "line_number": 139,
              "length": 92,
              "content": "            assert hasattr(cm, 'ConfigurationManag..."
            },
            {
              "line_number": 140,
              "length": 83,
              "content": "            assert hasattr(cm, 'config_manager'), ..."
            },
            {
              "line_number": 147,
              "length": 95,
              "content": "            assert hasattr(config, 'get_database_c..."
            },
            {
              "line_number": 148,
              "length": 89,
              "content": "            assert hasattr(config, 'is_debug_enabl..."
            },
            {
              "line_number": 149,
              "length": 83,
              "content": "            assert hasattr(config, 'get_log_level'..."
            },
            {
              "line_number": 153,
              "length": 88,
              "content": "            assert isinstance(db_config, dict), \"g..."
            },
            {
              "line_number": 183,
              "length": 112,
              "content": "            assert hasattr(pages.adversary_task_vi..."
            },
            {
              "line_number": 184,
              "length": 94,
              "content": "            assert hasattr(utils.html_renderer, 'r..."
            },
            {
              "line_number": 254,
              "length": 82,
              "content": "        passed_tests = sum(1 for success in self.t..."
            },
            {
              "line_number": 257,
              "length": 111,
              "content": "        logger.info(f\"\ud83c\udfaf Team A Critical Fixes Veri..."
            }
          ],
          "issues": [
            "Found 24 lines exceeding 80 characters",
            "  Line 6: 82 chars",
            "  Line 16: 91 chars",
            "  Line 37: 102 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 24
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 17.51152073732719,
          "comment_lines": 38,
          "code_lines": 179,
          "issues": [],
          "recommendations": [],
          "metric": 17.51152073732719
        },
        "module_size": {
          "compliant": true,
          "module_size": 273,
          "issues": [],
          "recommendations": [],
          "metric": 273
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 88.88888888888889,
          "functions": 8,
          "functions_with_docstrings": 7,
          "classes": 1,
          "classes_with_docstrings": 1,
          "issues": [],
          "recommendations": [],
          "metric": 88.88888888888889
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 91.22807017543859,
      "issues": [
        "Found 24 lines exceeding 80 characters",
        "  Line 6: 82 chars",
        "  Line 16: 91 chars",
        "  Line 37: 102 chars"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation"
      ],
      "priority": "low"
    },
    {
      "path": "team_packages/team_b_large_files/__init__.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/team_packages/team_b_large_files/__init__.py",
      "total_lines": 1,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 100.0,
          "comment_lines": 1,
          "code_lines": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "module_size": {
          "compliant": true,
          "module_size": 1,
          "issues": [],
          "recommendations": [],
          "metric": 1
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100,
          "functions": 0,
          "functions_with_docstrings": 0,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 100.0,
      "issues": [],
      "recommendations": [],
      "priority": "low"
    },
    {
      "path": "team_packages/team_b_large_files/large_files_fix.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/team_packages/team_b_large_files/large_files_fix.py",
      "total_lines": 59,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 6,
              "length": 81,
              "content": "Handles large file splitting and modularization, p..."
            },
            {
              "line_number": 31,
              "length": 89,
              "content": "            \"streamlit_config.py\": \"# Streamlit co..."
            }
          ],
          "issues": [
            "Found 2 lines exceeding 80 characters",
            "  Line 6: 81 chars",
            "  Line 31: 89 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 2
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 16.27906976744186,
          "comment_lines": 7,
          "code_lines": 36,
          "issues": [],
          "recommendations": [],
          "metric": 16.27906976744186
        },
        "module_size": {
          "compliant": true,
          "module_size": 59,
          "issues": [],
          "recommendations": [],
          "metric": 59
        },
        "docstrings": {
          "compliant": false,
          "docstring_coverage": 50.0,
          "functions": 3,
          "functions_with_docstrings": 2,
          "classes": 1,
          "classes_with_docstrings": 0,
          "issues": [
            "Docstring coverage 50.0% below minimum 80.0%",
            "  Functions: 2/3 with docstrings",
            "  Classes: 0/1 with docstrings"
          ],
          "recommendations": [
            "Add docstrings to all functions and classes",
            "Use clear, descriptive docstrings following Google or NumPy style"
          ],
          "metric": 50.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 84.64912280701755,
      "issues": [
        "Found 2 lines exceeding 80 characters",
        "  Line 6: 81 chars",
        "  Line 31: 89 chars",
        "Docstring coverage 50.0% below minimum 80.0%",
        "  Functions: 2/3 with docstrings",
        "  Classes: 0/1 with docstrings"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Add docstrings to all functions and classes",
        "Use clear, descriptive docstrings following Google or NumPy style"
      ],
      "priority": "low"
    },
    {
      "path": "team_packages/team_b_large_files/large_files_manager.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/team_packages/team_b_large_files/large_files_manager.py",
      "total_lines": 397,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 6,
              "length": 81,
              "content": "This module handles large file detection, manageme..."
            },
            {
              "line_number": 28,
              "length": 91,
              "content": "logging.basicConfig(level=logging.INFO, format='%(..."
            },
            {
              "line_number": 38,
              "length": 84,
              "content": "        self.size_threshold = size_threshold_mb * ..."
            },
            {
              "line_number": 51,
              "length": 91,
              "content": "        logger.info(f\"Size threshold: {size_thresh..."
            },
            {
              "line_number": 74,
              "length": 98,
              "content": "                        'modified': datetime.fromt..."
            },
            {
              "line_number": 116,
              "length": 83,
              "content": "                by_directory[dir_path] = {'count':..."
            },
            {
              "line_number": 125,
              "length": 81,
              "content": "                                 key=lambda x: x[1..."
            },
            {
              "line_number": 127,
              "length": 81,
              "content": "                                 key=lambda x: x[1..."
            },
            {
              "line_number": 135,
              "length": 98,
              "content": "            'largest_files': sorted(large_files, k..."
            },
            {
              "line_number": 188,
              "length": 88,
              "content": "                    optimization_results['total_sa..."
            },
            {
              "line_number": 194,
              "length": 98,
              "content": "    def generate_report(self, large_files: List[Di..."
            },
            {
              "line_number": 218,
              "length": 115,
              "content": "        json_report_path = self.reports_dir / f\"la..."
            },
            {
              "line_number": 223,
              "length": 111,
              "content": "        md_report_path = self.reports_dir / f\"larg..."
            },
            {
              "line_number": 235,
              "length": 102,
              "content": "            dirs[:] = [d for d in dirs if not any(..."
            },
            {
              "line_number": 240,
              "length": 92,
              "content": "                if not any(pattern in str(file_pat..."
            },
            {
              "line_number": 272,
              "length": 84,
              "content": "        if ext in ['.png', '.jpg', '.jpeg', '.gif'..."
            },
            {
              "line_number": 293,
              "length": 117,
              "content": "        logger.info(f\"Compressed {file_path.name}:..."
            },
            {
              "line_number": 325,
              "length": 88,
              "content": "- **Total Size:** {analysis['total_size_mb']}MB ({..."
            },
            {
              "line_number": 336,
              "length": 135,
              "content": "            markdown += f\"| {file_info['path']} | ..."
            },
            {
              "line_number": 340,
              "length": 105,
              "content": "            markdown += f\"- **{ext}**: {data['coun..."
            },
            {
              "line_number": 344,
              "length": 110,
              "content": "            markdown += f\"- **{dir_path}**: {data[..."
            },
            {
              "line_number": 349,
              "length": 123,
              "content": "                markdown += f\"- **{action['action'..."
            },
            {
              "line_number": 381,
              "length": 101,
              "content": "            logger.info(f\"   - Space saved: {optim..."
            }
          ],
          "issues": [
            "Found 23 lines exceeding 80 characters",
            "  Line 6: 81 chars",
            "  Line 28: 91 chars",
            "  Line 38: 84 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 23
        },
        "comment_density": {
          "compliant": false,
          "comment_density": 14.376996805111823,
          "comment_lines": 45,
          "code_lines": 268,
          "issues": [
            "Comment density 14.4% below minimum 15.0%",
            "  Comment lines: 45, Code lines: 268"
          ],
          "recommendations": [
            "Add more comments to explain complex logic and functions"
          ],
          "metric": 14.376996805111823
        },
        "module_size": {
          "compliant": false,
          "module_size": 397,
          "issues": [
            "Module size 397 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 397
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 92.3076923076923,
          "functions": 12,
          "functions_with_docstrings": 11,
          "classes": 1,
          "classes_with_docstrings": 1,
          "issues": [],
          "recommendations": [],
          "metric": 92.3076923076923
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 72.95555181884424,
      "issues": [
        "Found 23 lines exceeding 80 characters",
        "  Line 6: 81 chars",
        "  Line 28: 91 chars",
        "  Line 38: 84 chars",
        "Comment density 14.4% below minimum 15.0%",
        "  Comment lines: 45, Code lines: 268",
        "Module size 397 lines exceeds maximum 300 lines"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Add more comments to explain complex logic and functions",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files"
      ],
      "priority": "low"
    },
    {
      "path": "team_packages/team_c_database/__init__.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/team_packages/team_c_database/__init__.py",
      "total_lines": 1,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 100.0,
          "comment_lines": 1,
          "code_lines": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "module_size": {
          "compliant": true,
          "module_size": 1,
          "issues": [],
          "recommendations": [],
          "metric": 1
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100,
          "functions": 0,
          "functions_with_docstrings": 0,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 100.0,
      "issues": [],
      "recommendations": [],
      "priority": "low"
    },
    {
      "path": "team_packages/team_c_database/database_manager.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/team_packages/team_c_database/database_manager.py",
      "total_lines": 147,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 24,
              "length": 91,
              "content": "logging.basicConfig(level=logging.INFO, format='%(..."
            },
            {
              "line_number": 71,
              "length": 86,
              "content": "                logger.error(f\"Error creating conn..."
            },
            {
              "line_number": 101,
              "length": 88,
              "content": "                    logger.info(f\"Query executed s..."
            },
            {
              "line_number": 131,
              "length": 85,
              "content": "                logger.error(f\"Error closing conne..."
            },
            {
              "line_number": 133,
              "length": 89,
              "content": "        logger.info(f\"Closed {len(connections_to_c..."
            },
            {
              "line_number": 140,
              "length": 124,
              "content": "        db_manager.execute_query(\"CREATE TABLE IF ..."
            },
            {
              "line_number": 141,
              "length": 94,
              "content": "        db_manager.execute_query(\"INSERT INTO test..."
            }
          ],
          "issues": [
            "Found 7 lines exceeding 80 characters",
            "  Line 24: 91 chars",
            "  Line 71: 86 chars",
            "  Line 101: 88 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 7
        },
        "comment_density": {
          "compliant": false,
          "comment_density": 12.195121951219512,
          "comment_lines": 15,
          "code_lines": 108,
          "issues": [
            "Comment density 12.2% below minimum 15.0%",
            "  Comment lines: 15, Code lines: 108"
          ],
          "recommendations": [
            "Add more comments to explain complex logic and functions"
          ],
          "metric": 12.195121951219512
        },
        "module_size": {
          "compliant": true,
          "module_size": 147,
          "issues": [],
          "recommendations": [],
          "metric": 147
        },
        "docstrings": {
          "compliant": false,
          "docstring_coverage": 66.66666666666666,
          "functions": 5,
          "functions_with_docstrings": 3,
          "classes": 1,
          "classes_with_docstrings": 1,
          "issues": [
            "Docstring coverage 66.7% below minimum 80.0%",
            "  Functions: 3/5 with docstrings",
            "  Classes: 1/1 with docstrings"
          ],
          "recommendations": [
            "Add docstrings to all functions and classes",
            "Use clear, descriptive docstrings following Google or NumPy style"
          ],
          "metric": 66.66666666666666
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 85.02353444587077,
      "issues": [
        "Found 7 lines exceeding 80 characters",
        "  Line 24: 91 chars",
        "  Line 71: 86 chars",
        "  Line 101: 88 chars",
        "Comment density 12.2% below minimum 15.0%",
        "  Comment lines: 15, Code lines: 108",
        "Docstring coverage 66.7% below minimum 80.0%",
        "  Functions: 3/5 with docstrings",
        "  Classes: 1/1 with docstrings"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Add more comments to explain complex logic and functions",
        "Add docstrings to all functions and classes",
        "Use clear, descriptive docstrings following Google or NumPy style"
      ],
      "priority": "low"
    },
    {
      "path": "team_packages/team_c_database/database_optimization.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/team_packages/team_c_database/database_optimization.py",
      "total_lines": 49,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 16.666666666666664,
          "comment_lines": 6,
          "code_lines": 30,
          "issues": [],
          "recommendations": [],
          "metric": 16.666666666666664
        },
        "module_size": {
          "compliant": true,
          "module_size": 49,
          "issues": [],
          "recommendations": [],
          "metric": 49
        },
        "docstrings": {
          "compliant": false,
          "docstring_coverage": 50.0,
          "functions": 3,
          "functions_with_docstrings": 2,
          "classes": 1,
          "classes_with_docstrings": 0,
          "issues": [
            "Docstring coverage 50.0% below minimum 80.0%",
            "  Functions: 2/3 with docstrings",
            "  Classes: 0/1 with docstrings"
          ],
          "recommendations": [
            "Add docstrings to all functions and classes",
            "Use clear, descriptive docstrings following Google or NumPy style"
          ],
          "metric": 50.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 93.42105263157895,
      "issues": [
        "Docstring coverage 50.0% below minimum 80.0%",
        "  Functions: 2/3 with docstrings",
        "  Classes: 0/1 with docstrings"
      ],
      "recommendations": [
        "Add docstrings to all functions and classes",
        "Use clear, descriptive docstrings following Google or NumPy style"
      ],
      "priority": "low"
    },
    {
      "path": "team_packages/team_d_organization/__init__.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/team_packages/team_d_organization/__init__.py",
      "total_lines": 1,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 100.0,
          "comment_lines": 1,
          "code_lines": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "module_size": {
          "compliant": true,
          "module_size": 1,
          "issues": [],
          "recommendations": [],
          "metric": 1
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100,
          "functions": 0,
          "functions_with_docstrings": 0,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 100.0,
      "issues": [],
      "recommendations": [],
      "priority": "low"
    },
    {
      "path": "team_packages/team_d_organization/code_standards.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/team_packages/team_d_organization/code_standards.py",
      "total_lines": 393,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 6,
              "length": 88,
              "content": "This module provides comprehensive code standards ..."
            },
            {
              "line_number": 7,
              "length": 87,
              "content": "It enforces the CTAS standards including line leng..."
            },
            {
              "line_number": 27,
              "length": 91,
              "content": "logging.basicConfig(level=logging.INFO, format='%(..."
            },
            {
              "line_number": 49,
              "length": 135,
              "content": "        logger.info(f\"Standards: {self.max_line_le..."
            },
            {
              "line_number": 91,
              "length": 92,
              "content": "            for standard in ['line_length', 'comme..."
            },
            {
              "line_number": 105,
              "length": 117,
              "content": "                total = results['standards'][stand..."
            },
            {
              "line_number": 107,
              "length": 95,
              "content": "                    compliance_rate = results['sta..."
            },
            {
              "line_number": 108,
              "length": 87,
              "content": "                    results['standards'][standard]..."
            },
            {
              "line_number": 116,
              "length": 91,
              "content": "        logger.info(f\"   Overall compliance: {resu..."
            },
            {
              "line_number": 117,
              "length": 97,
              "content": "        logger.info(f\"   Compliant files: {results..."
            },
            {
              "line_number": 197,
              "length": 89,
              "content": "                    'content': line[:50] + '...' i..."
            },
            {
              "line_number": 204,
              "length": 103,
              "content": "            issues.append(f\"Found {len(long_lines)..."
            },
            {
              "line_number": 206,
              "length": 96,
              "content": "                issues.append(f\"  Line {long_line[..."
            },
            {
              "line_number": 221,
              "length": 100,
              "content": "            if stripped.startswith('#') or strippe..."
            },
            {
              "line_number": 227,
              "length": 87,
              "content": "        comment_density = (comment_lines / total_l..."
            },
            {
              "line_number": 233,
              "length": 110,
              "content": "            issues.append(f\"Comment density {comme..."
            },
            {
              "line_number": 234,
              "length": 88,
              "content": "            issues.append(f\"  Comment lines: {comm..."
            },
            {
              "line_number": 251,
              "length": 106,
              "content": "            issues.append(f\"Module size {module_si..."
            },
            {
              "line_number": 265,
              "length": 94,
              "content": "            functions = [node for node in ast.walk..."
            },
            {
              "line_number": 266,
              "length": 89,
              "content": "            classes = [node for node in ast.walk(t..."
            },
            {
              "line_number": 268,
              "length": 89,
              "content": "            functions_with_docstrings = sum(1 for ..."
            },
            {
              "line_number": 269,
              "length": 85,
              "content": "            classes_with_docstrings = sum(1 for c ..."
            },
            {
              "line_number": 272,
              "length": 90,
              "content": "            elements_with_docstrings = functions_w..."
            },
            {
              "line_number": 274,
              "length": 113,
              "content": "            docstring_coverage = (elements_with_do..."
            },
            {
              "line_number": 281,
              "length": 96,
              "content": "                issues.append(f\"Docstring coverage..."
            },
            {
              "line_number": 282,
              "length": 107,
              "content": "                issues.append(f\"  Functions: {func..."
            },
            {
              "line_number": 283,
              "length": 101,
              "content": "                issues.append(f\"  Classes: {classe..."
            },
            {
              "line_number": 296,
              "length": 86,
              "content": "            logger.warning(f\"Could not parse {file..."
            },
            {
              "line_number": 309,
              "length": 84,
              "content": "            if any(pattern in str(file_path) for p..."
            },
            {
              "line_number": 322,
              "length": 101,
              "content": "            recommendations.append(\"Overall compli..."
            },
            {
              "line_number": 325,
              "length": 88,
              "content": "        line_length_non_compliant = results['stand..."
            },
            {
              "line_number": 327,
              "length": 104,
              "content": "            recommendations.append(f\"Fix {line_len..."
            },
            {
              "line_number": 330,
              "length": 96,
              "content": "        comment_density_non_compliant = results['s..."
            },
            {
              "line_number": 332,
              "length": 115,
              "content": "            recommendations.append(f\"Add comments ..."
            },
            {
              "line_number": 335,
              "length": 88,
              "content": "        module_size_non_compliant = results['stand..."
            },
            {
              "line_number": 337,
              "length": 97,
              "content": "            recommendations.append(f\"Split {module..."
            },
            {
              "line_number": 340,
              "length": 85,
              "content": "        docstring_non_compliant = results['standar..."
            },
            {
              "line_number": 342,
              "length": 104,
              "content": "            recommendations.append(f\"Add docstring..."
            },
            {
              "line_number": 346,
              "length": 98,
              "content": "                      if not f.get('standards', {}..."
            },
            {
              "line_number": 351,
              "length": 98,
              "content": "                size = file_info.get('standards', ..."
            },
            {
              "line_number": 368,
              "length": 86,
              "content": "            f\"- **Non-Compliant Files**: {results[..."
            },
            {
              "line_number": 369,
              "length": 86,
              "content": "            f\"- **Overall Compliance**: {results['..."
            },
            {
              "line_number": 382,
              "length": 122,
              "content": "            report_lines.append(f\"| {standard.repl..."
            }
          ],
          "issues": [
            "Found 43 lines exceeding 80 characters",
            "  Line 6: 88 chars",
            "  Line 7: 87 chars",
            "  Line 27: 91 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 43
        },
        "comment_density": {
          "compliant": false,
          "comment_density": 10.559006211180124,
          "comment_lines": 34,
          "code_lines": 288,
          "issues": [
            "Comment density 10.6% below minimum 15.0%",
            "  Comment lines: 34, Code lines: 288"
          ],
          "recommendations": [
            "Add more comments to explain complex logic and functions"
          ],
          "metric": 10.559006211180124
        },
        "module_size": {
          "compliant": false,
          "module_size": 393,
          "issues": [
            "Module size 393 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 393
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 90.9090909090909,
          "functions": 10,
          "functions_with_docstrings": 9,
          "classes": 1,
          "classes_with_docstrings": 1,
          "issues": [],
          "recommendations": [],
          "metric": 90.9090909090909
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 68.49006574407032,
      "issues": [
        "Found 43 lines exceeding 80 characters",
        "  Line 6: 88 chars",
        "  Line 7: 87 chars",
        "  Line 27: 91 chars",
        "Comment density 10.6% below minimum 15.0%",
        "  Comment lines: 34, Code lines: 288",
        "Module size 393 lines exceeds maximum 300 lines"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Add more comments to explain complex logic and functions",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files"
      ],
      "priority": "low"
    },
    {
      "path": "team_packages/team_d_organization/enhanced_code_standards.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/team_packages/team_d_organization/enhanced_code_standards.py",
      "total_lines": 769,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 6,
              "length": 87,
              "content": "A comprehensive, well-organized code standards enf..."
            },
            {
              "line_number": 7,
              "length": 90,
              "content": "Provides detailed analysis, actionable recommendat..."
            },
            {
              "line_number": 30,
              "length": 91,
              "content": "logging.basicConfig(level=logging.INFO, format='%(..."
            },
            {
              "line_number": 153,
              "length": 82,
              "content": "        logger.info(f\"\ud83d\udcca Standards: {len(self.stand..."
            },
            {
              "line_number": 170,
              "length": 97,
              "content": "        standards_summary = defaultdict(lambda: {'..."
            },
            {
              "line_number": 187,
              "length": 92,
              "content": "        overall_compliance = (compliant_files / to..."
            },
            {
              "line_number": 206,
              "length": 93,
              "content": "        recommendations = self._generate_recommend..."
            },
            {
              "line_number": 209,
              "length": 96,
              "content": "        progress_metrics = self._calculate_progres..."
            },
            {
              "line_number": 214,
              "length": 98,
              "content": "        logger.info(f\"\ud83d\udcca Overall compliance: {overa..."
            },
            {
              "line_number": 256,
              "length": 82,
              "content": "            compliance_score = self._calculate_com..."
            },
            {
              "line_number": 260,
              "length": 84,
              "content": "            priority = self._determine_priority(st..."
            },
            {
              "line_number": 288,
              "length": 112,
              "content": "    def _check_standard(self, standard_type: Stand..."
            },
            {
              "line_number": 316,
              "length": 91,
              "content": "                    'content': line[:50] + '...' i..."
            },
            {
              "line_number": 324,
              "length": 93,
              "content": "            issues.append(f\"Found {len(long_lines)..."
            },
            {
              "line_number": 325,
              "length": 100,
              "content": "            recommendations.append(f\"Break long li..."
            },
            {
              "line_number": 329,
              "length": 96,
              "content": "                issues.append(f\"  Line {long_line[..."
            },
            {
              "line_number": 341,
              "length": 83,
              "content": "        min_density = self.standards_config[Standa..."
            },
            {
              "line_number": 347,
              "length": 100,
              "content": "            if stripped.startswith('#') or strippe..."
            },
            {
              "line_number": 353,
              "length": 87,
              "content": "        comment_density = (comment_lines / total_l..."
            },
            {
              "line_number": 360,
              "length": 97,
              "content": "            issues.append(f\"Comment density {comme..."
            },
            {
              "line_number": 361,
              "length": 88,
              "content": "            issues.append(f\"  Comment lines: {comm..."
            },
            {
              "line_number": 362,
              "length": 94,
              "content": "            recommendations.append(\"Add more comme..."
            },
            {
              "line_number": 384,
              "length": 94,
              "content": "            issues.append(f\"Module size {module_si..."
            },
            {
              "line_number": 385,
              "length": 86,
              "content": "            recommendations.append(\"Split large mo..."
            },
            {
              "line_number": 386,
              "length": 86,
              "content": "            recommendations.append(\"Extract classe..."
            },
            {
              "line_number": 396,
              "length": 85,
              "content": "    def _check_docstrings(self, file_path: Path, l..."
            },
            {
              "line_number": 402,
              "length": 94,
              "content": "            functions = [node for node in ast.walk..."
            },
            {
              "line_number": 403,
              "length": 89,
              "content": "            classes = [node for node in ast.walk(t..."
            },
            {
              "line_number": 405,
              "length": 89,
              "content": "            functions_with_docstrings = sum(1 for ..."
            },
            {
              "line_number": 406,
              "length": 85,
              "content": "            classes_with_docstrings = sum(1 for c ..."
            },
            {
              "line_number": 409,
              "length": 90,
              "content": "            elements_with_docstrings = functions_w..."
            },
            {
              "line_number": 411,
              "length": 113,
              "content": "            docstring_coverage = (elements_with_do..."
            },
            {
              "line_number": 413,
              "length": 83,
              "content": "            min_coverage = self.standards_config[S..."
            },
            {
              "line_number": 419,
              "length": 108,
              "content": "                issues.append(f\"Docstring coverage..."
            },
            {
              "line_number": 420,
              "length": 107,
              "content": "                issues.append(f\"  Functions: {func..."
            },
            {
              "line_number": 421,
              "length": 101,
              "content": "                issues.append(f\"  Classes: {classe..."
            },
            {
              "line_number": 422,
              "length": 85,
              "content": "                recommendations.append(\"Add docstr..."
            },
            {
              "line_number": 423,
              "length": 107,
              "content": "                recommendations.append(\"Use clear,..."
            },
            {
              "line_number": 438,
              "length": 86,
              "content": "            logger.warning(f\"Could not parse {file..."
            },
            {
              "line_number": 447,
              "length": 93,
              "content": "    def _check_naming_conventions(self, file_path:..."
            },
            {
              "line_number": 459,
              "length": 90,
              "content": "                        violations.append(f\"Functi..."
            },
            {
              "line_number": 464,
              "length": 87,
              "content": "                        violations.append(f\"Class ..."
            },
            {
              "line_number": 469,
              "length": 98,
              "content": "                        if not re.match(r'^[a-z_][..."
            },
            {
              "line_number": 470,
              "length": 92,
              "content": "                            violations.append(f\"Va..."
            },
            {
              "line_number": 479,
              "length": 83,
              "content": "                    issues.append(f\"... and {len(v..."
            },
            {
              "line_number": 480,
              "length": 134,
              "content": "                recommendations.append(\"Follow Pyt..."
            },
            {
              "line_number": 499,
              "length": 85,
              "content": "    def _check_complexity(self, file_path: Path, l..."
            },
            {
              "line_number": 513,
              "length": 94,
              "content": "                        if isinstance(child, (ast...."
            },
            {
              "line_number": 517,
              "length": 131,
              "content": "                        complexity_issues.append(f..."
            },
            {
              "line_number": 526,
              "length": 97,
              "content": "                    issues.append(f\"... and {len(c..."
            },
            {
              "line_number": 527,
              "length": 97,
              "content": "                recommendations.append(\"Break comp..."
            },
            {
              "line_number": 528,
              "length": 96,
              "content": "                recommendations.append(\"Extract co..."
            },
            {
              "line_number": 547,
              "length": 97,
              "content": "    def _calculate_compliance_score(self, standard..."
            },
            {
              "line_number": 579,
              "length": 112,
              "content": "    def _determine_priority(self, standards_result..."
            },
            {
              "line_number": 601,
              "length": 126,
              "content": "    def _generate_recommendations(self, file_analy..."
            },
            {
              "line_number": 608,
              "length": 112,
              "content": "            recommendations.append(f\"\ud83d\udd34 {len(high_p..."
            },
            {
              "line_number": 614,
              "length": 131,
              "content": "                recommendations.append(f\"\u26a0\ufe0f {stand..."
            },
            {
              "line_number": 616,
              "length": 128,
              "content": "                recommendations.append(f\"\ud83d\udcdd {standa..."
            },
            {
              "line_number": 619,
              "length": 113,
              "content": "        large_files = [f for f in file_analyses if..."
            },
            {
              "line_number": 621,
              "length": 105,
              "content": "            recommendations.append(f\"\ud83d\udce6 {len(large_..."
            },
            {
              "line_number": 623,
              "length": 125,
              "content": "        files_without_docstrings = [f for f in fil..."
            },
            {
              "line_number": 625,
              "length": 106,
              "content": "            recommendations.append(f\"\ud83d\udcda {len(files_..."
            },
            {
              "line_number": 629,
              "length": 133,
              "content": "    def _calculate_progress_metrics(self, file_ana..."
            },
            {
              "line_number": 633,
              "length": 83,
              "content": "        medium_priority = len([f for f in file_ana..."
            },
            {
              "line_number": 636,
              "length": 117,
              "content": "        avg_compliance_score = sum(f.compliance_sc..."
            },
            {
              "line_number": 655,
              "length": 84,
              "content": "            if any(pattern in str(file_path) for p..."
            },
            {
              "line_number": 673,
              "length": 84,
              "content": "            f\"- **Overall Compliance**: {analysis...."
            },
            {
              "line_number": 676,
              "length": 84,
              "content": "            f\"- **Non-Compliant Files**: {analysis..."
            },
            {
              "line_number": 681,
              "length": 82,
              "content": "            \"| Standard | Compliant | Non-Complian..."
            },
            {
              "line_number": 682,
              "length": 81,
              "content": "            \"|----------|-----------|-------------..."
            },
            {
              "line_number": 689,
              "length": 132,
              "content": "                f\"| {standard.replace('_', ' ').ti..."
            },
            {
              "line_number": 705,
              "length": 103,
              "content": "            f\"- **High Priority Files**: {analysis..."
            },
            {
              "line_number": 706,
              "length": 107,
              "content": "            f\"- **Medium Priority Files**: {analys..."
            },
            {
              "line_number": 707,
              "length": 101,
              "content": "            f\"- **Low Priority Files**: {analysis...."
            },
            {
              "line_number": 708,
              "length": 108,
              "content": "            f\"- **Average Compliance Score**: {ana..."
            },
            {
              "line_number": 709,
              "length": 102,
              "content": "            f\"- **Improvement Potential**: {analys..."
            },
            {
              "line_number": 716,
              "length": 92,
              "content": "        high_priority_files = [f for f in analysis..."
            },
            {
              "line_number": 720,
              "length": 116,
              "content": "                report_lines.append(f\"- **{file_an..."
            },
            {
              "line_number": 727,
              "length": 84,
              "content": "    def save_analysis(self, analysis: RepositoryAn..."
            },
            {
              "line_number": 758,
              "length": 95,
              "content": "    print(f\"High Priority Files: {analysis.progres..."
            }
          ],
          "issues": [
            "Found 80 lines exceeding 80 characters",
            "  Line 6: 87 chars",
            "  Line 7: 90 chars",
            "  Line 30: 91 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 80
        },
        "comment_density": {
          "compliant": false,
          "comment_density": 8.923076923076923,
          "comment_lines": 58,
          "code_lines": 592,
          "issues": [
            "Comment density 8.9% below minimum 15.0%",
            "  Comment lines: 58, Code lines: 592"
          ],
          "recommendations": [
            "Add more comments to explain complex logic and functions"
          ],
          "metric": 8.923076923076923
        },
        "module_size": {
          "compliant": false,
          "module_size": 769,
          "issues": [
            "Module size 769 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 769
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 96.0,
          "functions": 19,
          "functions_with_docstrings": 18,
          "classes": 6,
          "classes_with_docstrings": 6,
          "issues": [],
          "recommendations": [],
          "metric": 96.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": false,
          "complexity_issues": [
            "Function '_check_naming_conventions' has high complexity (11 decision points)"
          ],
          "issues": [
            "Function '_check_naming_conventions' has high complexity (11 decision points)"
          ],
          "recommendations": [
            "Break complex functions into smaller, focused functions",
            "Extract complex logic into separate methods or classes"
          ],
          "metric": 1
        }
      },
      "overall_compliant": false,
      "compliance_score": 58.68196131354026,
      "issues": [
        "Found 80 lines exceeding 80 characters",
        "  Line 6: 87 chars",
        "  Line 7: 90 chars",
        "  Line 30: 91 chars",
        "Comment density 8.9% below minimum 15.0%",
        "  Comment lines: 58, Code lines: 592",
        "Module size 769 lines exceeds maximum 300 lines",
        "Function '_check_naming_conventions' has high complexity (11 decision points)"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Add more comments to explain complex logic and functions",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files",
        "Break complex functions into smaller, focused functions",
        "Extract complex logic into separate methods or classes"
      ],
      "priority": "medium"
    },
    {
      "path": "team_packages/team_d_organization/organization_manager.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/team_packages/team_d_organization/organization_manager.py",
      "total_lines": 110,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 21,
              "length": 91,
              "content": "logging.basicConfig(level=logging.INFO, format='%(..."
            },
            {
              "line_number": 78,
              "length": 87,
              "content": "            logger.warning(f\"Member '{member_name}..."
            },
            {
              "line_number": 93,
              "length": 83,
              "content": "            logger.warning(f\"Member '{member_name}..."
            }
          ],
          "issues": [
            "Found 3 lines exceeding 80 characters",
            "  Line 21: 91 chars",
            "  Line 78: 87 chars",
            "  Line 93: 83 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 3
        },
        "comment_density": {
          "compliant": false,
          "comment_density": 13.48314606741573,
          "comment_lines": 12,
          "code_lines": 77,
          "issues": [
            "Comment density 13.5% below minimum 15.0%",
            "  Comment lines: 12, Code lines: 77"
          ],
          "recommendations": [
            "Add more comments to explain complex logic and functions"
          ],
          "metric": 13.48314606741573
        },
        "module_size": {
          "compliant": true,
          "module_size": 110,
          "issues": [],
          "recommendations": [],
          "metric": 110
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 87.5,
          "functions": 7,
          "functions_with_docstrings": 6,
          "classes": 1,
          "classes_with_docstrings": 1,
          "issues": [],
          "recommendations": [],
          "metric": 87.5
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 89.45397200867336,
      "issues": [
        "Found 3 lines exceeding 80 characters",
        "  Line 21: 91 chars",
        "  Line 78: 87 chars",
        "  Line 93: 83 chars",
        "Comment density 13.5% below minimum 15.0%",
        "  Comment lines: 12, Code lines: 77"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Add more comments to explain complex logic and functions"
      ],
      "priority": "low"
    },
    {
      "path": "test_team_a_fixes.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/test_team_a_fixes.py",
      "total_lines": 65,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": false,
          "comment_density": 11.538461538461538,
          "comment_lines": 6,
          "code_lines": 46,
          "issues": [
            "Comment density 11.5% below minimum 15.0%",
            "  Comment lines: 6, Code lines: 46"
          ],
          "recommendations": [
            "Add more comments to explain complex logic and functions"
          ],
          "metric": 11.538461538461538
        },
        "module_size": {
          "compliant": true,
          "module_size": 65,
          "issues": [],
          "recommendations": [],
          "metric": 65
        },
        "docstrings": {
          "compliant": false,
          "docstring_coverage": 50.0,
          "functions": 2,
          "functions_with_docstrings": 1,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [
            "Docstring coverage 50.0% below minimum 80.0%",
            "  Functions: 1/2 with docstrings",
            "  Classes: 0/0 with docstrings"
          ],
          "recommendations": [
            "Add docstrings to all functions and classes",
            "Use clear, descriptive docstrings following Google or NumPy style"
          ],
          "metric": 50.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 89.37246963562752,
      "issues": [
        "Comment density 11.5% below minimum 15.0%",
        "  Comment lines: 6, Code lines: 46",
        "Docstring coverage 50.0% below minimum 80.0%",
        "  Functions: 1/2 with docstrings",
        "  Classes: 0/0 with docstrings"
      ],
      "recommendations": [
        "Add more comments to explain complex logic and functions",
        "Add docstrings to all functions and classes",
        "Use clear, descriptive docstrings following Google or NumPy style"
      ],
      "priority": "low"
    },
    {
      "path": "utils/__init__.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/utils/__init__.py",
      "total_lines": 7,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 40.0,
          "comment_lines": 2,
          "code_lines": 3,
          "issues": [],
          "recommendations": [],
          "metric": 40.0
        },
        "module_size": {
          "compliant": true,
          "module_size": 7,
          "issues": [],
          "recommendations": [],
          "metric": 7
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100,
          "functions": 0,
          "functions_with_docstrings": 0,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 100.0,
      "issues": [],
      "recommendations": [],
      "priority": "low"
    },
    {
      "path": "utils/ctas_headers.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/utils/ctas_headers.py",
      "total_lines": 165,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 88,
              "length": 81,
              "content": "            \"// \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500..."
            },
            {
              "line_number": 122,
              "length": 84,
              "content": "                \"// \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500..."
            },
            {
              "line_number": 136,
              "length": 94,
              "content": "                new_content = f'\"\"\"\\n{header}\\n\\n{..."
            }
          ],
          "issues": [
            "Found 3 lines exceeding 80 characters",
            "  Line 88: 81 chars",
            "  Line 122: 84 chars",
            "  Line 136: 94 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 3
        },
        "comment_density": {
          "compliant": false,
          "comment_density": 13.10344827586207,
          "comment_lines": 19,
          "code_lines": 126,
          "issues": [
            "Comment density 13.1% below minimum 15.0%",
            "  Comment lines: 19, Code lines: 126"
          ],
          "recommendations": [
            "Add more comments to explain complex logic and functions"
          ],
          "metric": 13.10344827586207
        },
        "module_size": {
          "compliant": true,
          "module_size": 165,
          "issues": [],
          "recommendations": [],
          "metric": 165
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 2,
          "functions_with_docstrings": 2,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 89.00988102440007,
      "issues": [
        "Found 3 lines exceeding 80 characters",
        "  Line 88: 81 chars",
        "  Line 122: 84 chars",
        "  Line 136: 94 chars",
        "Comment density 13.1% below minimum 15.0%",
        "  Comment lines: 19, Code lines: 126"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Add more comments to explain complex logic and functions"
      ],
      "priority": "low"
    },
    {
      "path": "utils/ctas_repo_analyzer.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/utils/ctas_repo_analyzer.py",
      "total_lines": 951,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 180,
              "length": 84,
              "content": "        self.workspace_dir = self.output_dir / 'wo..."
            },
            {
              "line_number": 181,
              "length": 84,
              "content": "        self.context_dir = self.output_dir / 'cont..."
            },
            {
              "line_number": 195,
              "length": 111,
              "content": "        self.code_extensions = {'.py', '.rs', '.ps..."
            },
            {
              "line_number": 226,
              "length": 101,
              "content": "            'Documents': {'.pdf', '.doc', '.docx',..."
            },
            {
              "line_number": 227,
              "length": 135,
              "content": "            'Media': {'.jpg', '.jpeg', '.png', '.g..."
            },
            {
              "line_number": 274,
              "length": 90,
              "content": "                        'hd4_pillars': row['HD4_Pi..."
            },
            {
              "line_number": 318,
              "length": 86,
              "content": "                print_progress(f\"Error: Input path..."
            },
            {
              "line_number": 337,
              "length": 97,
              "content": "                                      if not any(e..."
            },
            {
              "line_number": 338,
              "length": 107,
              "content": "                                      and (Path(f)..."
            },
            {
              "line_number": 378,
              "length": 84,
              "content": "                    if any(excluded in src.parts f..."
            },
            {
              "line_number": 388,
              "length": 83,
              "content": "                    if src.suffix not in self.code..."
            },
            {
              "line_number": 409,
              "length": 110,
              "content": "                print_progress(f\"- Total files sca..."
            },
            {
              "line_number": 438,
              "length": 81,
              "content": "                        print_progress(f\"Copied {c..."
            },
            {
              "line_number": 455,
              "length": 90,
              "content": "            print_progress(f\"Extraction completed ..."
            },
            {
              "line_number": 496,
              "length": 104,
              "content": "        artifacts: Dict[str, List[str]] = {categor..."
            },
            {
              "line_number": 538,
              "length": 93,
              "content": "                        artifacts[category].append..."
            },
            {
              "line_number": 620,
              "length": 101,
              "content": "                            if re.search(r'\\b' + r..."
            },
            {
              "line_number": 626,
              "length": 86,
              "content": "                                    'file': str(pa..."
            },
            {
              "line_number": 629,
              "length": 82,
              "content": "                                    'context': sel..."
            },
            {
              "line_number": 644,
              "length": 86,
              "content": "    def _get_context(self, content: str, keyword: ..."
            },
            {
              "line_number": 681,
              "length": 83,
              "content": "    def _map_to_ctas_nodes(self, features: List[Fe..."
            },
            {
              "line_number": 733,
              "length": 83,
              "content": "    def _save_context(self, structure: StructureIn..."
            },
            {
              "line_number": 766,
              "length": 91,
              "content": "                'timestamp': datetime.now().isofor..."
            },
            {
              "line_number": 785,
              "length": 132,
              "content": "- Top Extensions: {', '.join(f\"{k}: {v}\" for k, v ..."
            },
            {
              "line_number": 788,
              "length": 140,
              "content": "{\"\".join(f\"### {category}\\n\" + \"\".join(f\"- {file}\\..."
            },
            {
              "line_number": 791,
              "length": 88,
              "content": "{\"\".join(f\"- {f['keyword']} ({f['category']}) in {..."
            },
            {
              "line_number": 849,
              "length": 101,
              "content": "            print_progress(f\"Found {structure['fil..."
            },
            {
              "line_number": 920,
              "length": 93,
              "content": "        parser = argparse.ArgumentParser(descripti..."
            },
            {
              "line_number": 921,
              "length": 103,
              "content": "        parser.add_argument('--input', required=Tr..."
            }
          ],
          "issues": [
            "Found 29 lines exceeding 80 characters",
            "  Line 180: 84 chars",
            "  Line 181: 84 chars",
            "  Line 195: 111 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 29
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 47.928994082840234,
          "comment_lines": 405,
          "code_lines": 440,
          "issues": [],
          "recommendations": [],
          "metric": 47.928994082840234
        },
        "module_size": {
          "compliant": false,
          "module_size": 951,
          "issues": [
            "Module size 951 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 951
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 12,
          "functions_with_docstrings": 12,
          "classes": 4,
          "classes_with_docstrings": 4,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": false,
          "complexity_issues": [
            "Function '_extract_codebase' has high complexity (15 decision points)"
          ],
          "issues": [
            "Function '_extract_codebase' has high complexity (15 decision points)"
          ],
          "recommendations": [
            "Break complex functions into smaller, focused functions",
            "Extract complex logic into separate methods or classes"
          ],
          "metric": 1
        }
      },
      "overall_compliant": false,
      "compliance_score": 65.78947368421052,
      "issues": [
        "Found 29 lines exceeding 80 characters",
        "  Line 180: 84 chars",
        "  Line 181: 84 chars",
        "  Line 195: 111 chars",
        "Module size 951 lines exceeds maximum 300 lines",
        "Function '_extract_codebase' has high complexity (15 decision points)"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files",
        "Break complex functions into smaller, focused functions",
        "Extract complex logic into separate methods or classes"
      ],
      "priority": "low"
    },
    {
      "path": "utils/enhanced_html_renderer.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/utils/enhanced_html_renderer.py",
      "total_lines": 75,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 48,
              "length": 96,
              "content": "def render_with_fallback(html_content: str, task_d..."
            },
            {
              "line_number": 74,
              "length": 92,
              "content": "            st.code(html_content[:500] + \"...\" if ..."
            }
          ],
          "issues": [
            "Found 2 lines exceeding 80 characters",
            "  Line 48: 96 chars",
            "  Line 74: 92 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 2
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 19.672131147540984,
          "comment_lines": 12,
          "code_lines": 49,
          "issues": [],
          "recommendations": [],
          "metric": 19.672131147540984
        },
        "module_size": {
          "compliant": true,
          "module_size": 75,
          "issues": [],
          "recommendations": [],
          "metric": 75
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 2,
          "functions_with_docstrings": 2,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 91.22807017543859,
      "issues": [
        "Found 2 lines exceeding 80 characters",
        "  Line 48: 96 chars",
        "  Line 74: 92 chars"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation"
      ],
      "priority": "low"
    },
    {
      "path": "utils/html_renderer.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/utils/html_renderer.py",
      "total_lines": 132,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 84,
              "length": 92,
              "content": "            logger.info(f\"Rendered HTML content us..."
            },
            {
              "line_number": 96,
              "length": 96,
              "content": "            target.code(html_content[:500] + \"...\"..."
            }
          ],
          "issues": [
            "Found 2 lines exceeding 80 characters",
            "  Line 84: 92 chars",
            "  Line 96: 96 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 2
        },
        "comment_density": {
          "compliant": false,
          "comment_density": 14.529914529914532,
          "comment_lines": 17,
          "code_lines": 100,
          "issues": [
            "Comment density 14.5% below minimum 15.0%",
            "  Comment lines: 17, Code lines: 100"
          ],
          "recommendations": [
            "Add more comments to explain complex logic and functions"
          ],
          "metric": 14.529914529914532
        },
        "module_size": {
          "compliant": true,
          "module_size": 132,
          "issues": [],
          "recommendations": [],
          "metric": 132
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 2,
          "functions_with_docstrings": 2,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 90.67826260808717,
      "issues": [
        "Found 2 lines exceeding 80 characters",
        "  Line 84: 92 chars",
        "  Line 96: 96 chars",
        "Comment density 14.5% below minimum 15.0%",
        "  Comment lines: 17, Code lines: 100"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Add more comments to explain complex logic and functions"
      ],
      "priority": "low"
    },
    {
      "path": "utils/import_compatibility.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/utils/import_compatibility.py",
      "total_lines": 56,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": false,
          "comment_density": 13.043478260869565,
          "comment_lines": 6,
          "code_lines": 40,
          "issues": [
            "Comment density 13.0% below minimum 15.0%",
            "  Comment lines: 6, Code lines: 40"
          ],
          "recommendations": [
            "Add more comments to explain complex logic and functions"
          ],
          "metric": 13.043478260869565
        },
        "module_size": {
          "compliant": true,
          "module_size": 56,
          "issues": [],
          "recommendations": [],
          "metric": 56
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 2,
          "functions_with_docstrings": 2,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 97.7116704805492,
      "issues": [
        "Comment density 13.0% below minimum 15.0%",
        "  Comment lines: 6, Code lines: 40"
      ],
      "recommendations": [
        "Add more comments to explain complex logic and functions"
      ],
      "priority": "low"
    },
    {
      "path": "utils/inject_styles.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/utils/inject_styles.py",
      "total_lines": 66,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 20.0,
          "comment_lines": 11,
          "code_lines": 44,
          "issues": [],
          "recommendations": [],
          "metric": 20.0
        },
        "module_size": {
          "compliant": true,
          "module_size": 66,
          "issues": [],
          "recommendations": [],
          "metric": 66
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 3,
          "functions_with_docstrings": 3,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 100.0,
      "issues": [],
      "recommendations": [],
      "priority": "low"
    },
    {
      "path": "utils/kali_integrator.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/utils/kali_integrator.py",
      "total_lines": 1073,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 343,
              "length": 87,
              "content": "            description=\"Perform network reconnais..."
            },
            {
              "line_number": 581,
              "length": 81,
              "content": "        # This is a placeholder - in a real system..."
            },
            {
              "line_number": 745,
              "length": 84,
              "content": "                        f\"Chain {name} failed at s..."
            },
            {
              "line_number": 939,
              "length": 88,
              "content": "        # This is a placeholder - in a real system..."
            },
            {
              "line_number": 947,
              "length": 90,
              "content": "Starting Nmap 7.92 ( https://nmap.org ) at {dateti..."
            },
            {
              "line_number": 975,
              "length": 124,
              "content": "[+] 192.168.1.1:445       - Host is likely VULNERA..."
            },
            {
              "line_number": 982,
              "length": 146,
              "content": "[+] 192.168.1.1:445 - Meterpreter session 1 opened..."
            },
            {
              "line_number": 1003,
              "length": 87,
              "content": "sqlmap identified the following injection point(s)..."
            },
            {
              "line_number": 1016,
              "length": 105,
              "content": "    Payload: id=1 UNION ALL SELECT NULL,NULL,CONCA..."
            },
            {
              "line_number": 1055,
              "length": 94,
              "content": "{datetime.now().strftime('%Y/%m/%d %H:%M:%S')} Sta..."
            },
            {
              "line_number": 1073,
              "length": 86,
              "content": "            return f\"Simulated output for {tool_na..."
            }
          ],
          "issues": [
            "Found 11 lines exceeding 80 characters",
            "  Line 343: 87 chars",
            "  Line 581: 81 chars",
            "  Line 745: 84 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 11
        },
        "comment_density": {
          "compliant": false,
          "comment_density": 13.812154696132598,
          "comment_lines": 125,
          "code_lines": 780,
          "issues": [
            "Comment density 13.8% below minimum 15.0%",
            "  Comment lines: 125, Code lines: 780"
          ],
          "recommendations": [
            "Add more comments to explain complex logic and functions"
          ],
          "metric": 13.812154696132598
        },
        "module_size": {
          "compliant": false,
          "module_size": 1073,
          "issues": [
            "Module size 1073 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 1073
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 23,
          "functions_with_docstrings": 23,
          "classes": 4,
          "classes_with_docstrings": 4,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": false,
          "complexity_issues": [
            "Function '_build_command' has high complexity (21 decision points)"
          ],
          "issues": [
            "Function '_build_command' has high complexity (21 decision points)"
          ],
          "recommendations": [
            "Break complex functions into smaller, focused functions",
            "Extract complex logic into separate methods or classes"
          ],
          "metric": 1
        }
      },
      "overall_compliant": false,
      "compliance_score": 64.40018093114924,
      "issues": [
        "Found 11 lines exceeding 80 characters",
        "  Line 343: 87 chars",
        "  Line 581: 81 chars",
        "  Line 745: 84 chars",
        "Comment density 13.8% below minimum 15.0%",
        "  Comment lines: 125, Code lines: 780",
        "Module size 1073 lines exceeds maximum 300 lines",
        "Function '_build_command' has high complexity (21 decision points)"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Add more comments to explain complex logic and functions",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files",
        "Break complex functions into smaller, focused functions",
        "Extract complex logic into separate methods or classes"
      ],
      "priority": "low"
    },
    {
      "path": "utils/kml_handler.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/utils/kml_handler.py",
      "total_lines": 276,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 16.0,
          "comment_lines": 36,
          "code_lines": 189,
          "issues": [],
          "recommendations": [],
          "metric": 16.0
        },
        "module_size": {
          "compliant": true,
          "module_size": 276,
          "issues": [],
          "recommendations": [],
          "metric": 276
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 83.33333333333334,
          "functions": 6,
          "functions_with_docstrings": 5,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 83.33333333333334
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 100.0,
      "issues": [],
      "recommendations": [],
      "priority": "low"
    },
    {
      "path": "utils/opsec_manager.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/utils/opsec_manager.py",
      "total_lines": 657,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 5,
              "length": 84,
              "content": "including browser fingerprint protection, network ..."
            },
            {
              "line_number": 186,
              "length": 85,
              "content": "            description=\"Standard operational prof..."
            },
            {
              "line_number": 196,
              "length": 83,
              "content": "            description=\"High-security profile des..."
            },
            {
              "line_number": 206,
              "length": 98,
              "content": "            description=\"Specialized profile for m..."
            },
            {
              "line_number": 479,
              "length": 81,
              "content": "            f\"Browser protection: {self.active_pro..."
            },
            {
              "line_number": 482,
              "length": 81,
              "content": "            f\"Network protection: {self.active_pro..."
            },
            {
              "line_number": 485,
              "length": 83,
              "content": "            f\"Identity protection: {self.active_pr..."
            },
            {
              "line_number": 525,
              "length": 81,
              "content": "                \"browser_fingerprint_test\": not se..."
            },
            {
              "line_number": 536,
              "length": 86,
              "content": "        # This is a placeholder - in a real system..."
            },
            {
              "line_number": 542,
              "length": 81,
              "content": "            # This gets the IP address the system ..."
            },
            {
              "line_number": 553,
              "length": 89,
              "content": "        # This is a placeholder - in a real system..."
            },
            {
              "line_number": 558,
              "length": 87,
              "content": "        # This is a placeholder - in a real system..."
            },
            {
              "line_number": 563,
              "length": 89,
              "content": "        # This is a placeholder - in a real system..."
            },
            {
              "line_number": 568,
              "length": 88,
              "content": "        # This is a placeholder - in a real system..."
            },
            {
              "line_number": 569,
              "length": 132,
              "content": "        return \"Mozilla/5.0 (Windows NT 10.0; Win6..."
            },
            {
              "line_number": 573,
              "length": 85,
              "content": "        # This is a placeholder - in a real system..."
            },
            {
              "line_number": 578,
              "length": 94,
              "content": "        # This is a placeholder - in a real system..."
            },
            {
              "line_number": 583,
              "length": 93,
              "content": "        # This is a placeholder - in a real system..."
            },
            {
              "line_number": 588,
              "length": 82,
              "content": "        # This is a placeholder - in a real system..."
            },
            {
              "line_number": 593,
              "length": 102,
              "content": "        # This is a placeholder - in a real system..."
            },
            {
              "line_number": 598,
              "length": 93,
              "content": "        # This is a placeholder - in a real system..."
            },
            {
              "line_number": 603,
              "length": 82,
              "content": "        # This is a placeholder - in a real system..."
            },
            {
              "line_number": 613,
              "length": 91,
              "content": "        # This is a placeholder - in a real system..."
            },
            {
              "line_number": 615,
              "length": 130,
              "content": "            \"Mozilla/5.0 (Windows NT 10.0; Win64; ..."
            },
            {
              "line_number": 616,
              "length": 134,
              "content": "            \"Mozilla/5.0 (Macintosh; Intel Mac OS ..."
            },
            {
              "line_number": 617,
              "length": 93,
              "content": "            \"Mozilla/5.0 (Windows NT 10.0; Win64; ..."
            },
            {
              "line_number": 618,
              "length": 120,
              "content": "            \"Mozilla/5.0 (X11; Linux x86_64) Apple..."
            },
            {
              "line_number": 654,
              "length": 83,
              "content": "                \"Maintain separate environments fo..."
            }
          ],
          "issues": [
            "Found 28 lines exceeding 80 characters",
            "  Line 5: 84 chars",
            "  Line 186: 85 chars",
            "  Line 196: 83 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 28
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 17.391304347826086,
          "comment_lines": 96,
          "code_lines": 456,
          "issues": [],
          "recommendations": [],
          "metric": 17.391304347826086
        },
        "module_size": {
          "compliant": false,
          "module_size": 657,
          "issues": [
            "Module size 657 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 657
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 31,
          "functions_with_docstrings": 31,
          "classes": 3,
          "classes_with_docstrings": 3,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": false,
          "complexity_issues": [
            "Function 'update_profile' has high complexity (12 decision points)"
          ],
          "issues": [
            "Function 'update_profile' has high complexity (12 decision points)"
          ],
          "recommendations": [
            "Break complex functions into smaller, focused functions",
            "Extract complex logic into separate methods or classes"
          ],
          "metric": 1
        }
      },
      "overall_compliant": false,
      "compliance_score": 65.78947368421052,
      "issues": [
        "Found 28 lines exceeding 80 characters",
        "  Line 5: 84 chars",
        "  Line 186: 85 chars",
        "  Line 196: 83 chars",
        "Module size 657 lines exceeds maximum 300 lines",
        "Function 'update_profile' has high complexity (12 decision points)"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files",
        "Break complex functions into smaller, focused functions",
        "Extract complex logic into separate methods or classes"
      ],
      "priority": "low"
    },
    {
      "path": "utils/security_tools_utils.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/utils/security_tools_utils.py",
      "total_lines": 588,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 45,
              "length": 117,
              "content": "        return f\"Command '{self.command}' {status}..."
            },
            {
              "line_number": 448,
              "length": 89,
              "content": "            <div class=\"command\"><strong>Command:<..."
            },
            {
              "line_number": 449,
              "length": 151,
              "content": "            <div class=\"status\"><strong>Status:</s..."
            },
            {
              "line_number": 450,
              "length": 101,
              "content": "            <div class=\"return-code\"><strong>Retur..."
            },
            {
              "line_number": 451,
              "length": 115,
              "content": "            <div class=\"execution-time\"><strong>Ex..."
            },
            {
              "line_number": 515,
              "length": 137,
              "content": "                    f'\"{command_result.command}\",{..."
            }
          ],
          "issues": [
            "Found 6 lines exceeding 80 characters",
            "  Line 45: 117 chars",
            "  Line 448: 89 chars",
            "  Line 449: 151 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 6
        },
        "comment_density": {
          "compliant": false,
          "comment_density": 14.699792960662524,
          "comment_lines": 71,
          "code_lines": 412,
          "issues": [
            "Comment density 14.7% below minimum 15.0%",
            "  Comment lines: 71, Code lines: 412"
          ],
          "recommendations": [
            "Add more comments to explain complex logic and functions"
          ],
          "metric": 14.699792960662524
        },
        "module_size": {
          "compliant": false,
          "module_size": 588,
          "issues": [
            "Module size 588 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 588
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 11,
          "functions_with_docstrings": 11,
          "classes": 1,
          "classes_with_docstrings": 1,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 73.33309118206144,
      "issues": [
        "Found 6 lines exceeding 80 characters",
        "  Line 45: 117 chars",
        "  Line 448: 89 chars",
        "  Line 449: 151 chars",
        "Comment density 14.7% below minimum 15.0%",
        "  Comment lines: 71, Code lines: 412",
        "Module size 588 lines exceeds maximum 300 lines"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Add more comments to explain complex logic and functions",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files"
      ],
      "priority": "low"
    },
    {
      "path": "utils/url_health_monitor.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/utils/url_health_monitor.py",
      "total_lines": 415,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 104,
              "length": 151,
              "content": "                    \"User-Agent\": \"Mozilla/5.0 (Wi..."
            }
          ],
          "issues": [
            "Found 1 lines exceeding 80 characters",
            "  Line 104: 151 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 1
        },
        "comment_density": {
          "compliant": false,
          "comment_density": 9.855072463768117,
          "comment_lines": 34,
          "code_lines": 311,
          "issues": [
            "Comment density 9.9% below minimum 15.0%",
            "  Comment lines: 34, Code lines: 311"
          ],
          "recommendations": [
            "Add more comments to explain complex logic and functions"
          ],
          "metric": 9.855072463768117
        },
        "module_size": {
          "compliant": false,
          "module_size": 415,
          "issues": [
            "Module size 415 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 415
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 86.66666666666667,
          "functions": 13,
          "functions_with_docstrings": 11,
          "classes": 2,
          "classes_with_docstrings": 2,
          "issues": [],
          "recommendations": [],
          "metric": 86.66666666666667
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 67.66675141961183,
      "issues": [
        "Found 1 lines exceeding 80 characters",
        "  Line 104: 151 chars",
        "Comment density 9.9% below minimum 15.0%",
        "  Comment lines: 34, Code lines: 311",
        "Module size 415 lines exceeds maximum 300 lines"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Add more comments to explain complex logic and functions",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files"
      ],
      "priority": "low"
    },
    {
      "path": "visualization/__init__.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/visualization/__init__.py",
      "total_lines": 1,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 100.0,
          "comment_lines": 1,
          "code_lines": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "module_size": {
          "compliant": true,
          "module_size": 1,
          "issues": [],
          "recommendations": [],
          "metric": 1
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100,
          "functions": 0,
          "functions_with_docstrings": 0,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 100.0,
      "issues": [],
      "recommendations": [],
      "priority": "low"
    },
    {
      "path": "visualization/advanced_charts.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/visualization/advanced_charts.py",
      "total_lines": 281,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 21,
              "length": 86,
              "content": "    sys.path.insert(0, os.path.abspath(os.path.joi..."
            },
            {
              "line_number": 25,
              "length": 105,
              "content": "def create_activity_comparison_chart(df, cities=No..."
            },
            {
              "line_number": 46,
              "length": 108,
              "content": "    grouped = df.groupby(['City', pd.Grouper(key=d..."
            },
            {
              "line_number": 81,
              "length": 92,
              "content": "def create_statistical_summary_chart(df, city_colu..."
            },
            {
              "line_number": 83,
              "length": 85,
              "content": "    Create a statistical summary visualization wit..."
            },
            {
              "line_number": 160,
              "length": 98,
              "content": "def create_trend_analysis_chart(df, city=None, dat..."
            },
            {
              "line_number": 162,
              "length": 81,
              "content": "    Create an advanced trend analysis chart with t..."
            },
            {
              "line_number": 190,
              "length": 98,
              "content": "        date_ordinals = np.array([(d - pd.Timestam..."
            },
            {
              "line_number": 264,
              "length": 88,
              "content": "    title = f\"Trend Analysis for {city}\" if city e..."
            }
          ],
          "issues": [
            "Found 9 lines exceeding 80 characters",
            "  Line 21: 86 chars",
            "  Line 25: 105 chars",
            "  Line 46: 108 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 9
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 15.899581589958158,
          "comment_lines": 38,
          "code_lines": 201,
          "issues": [],
          "recommendations": [],
          "metric": 15.899581589958158
        },
        "module_size": {
          "compliant": true,
          "module_size": 281,
          "issues": [],
          "recommendations": [],
          "metric": 281
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 3,
          "functions_with_docstrings": 3,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 91.22807017543859,
      "issues": [
        "Found 9 lines exceeding 80 characters",
        "  Line 21: 86 chars",
        "  Line 25: 105 chars",
        "  Line 46: 108 chars"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation"
      ],
      "priority": "low"
    },
    {
      "path": "visualization/analytics/__init__.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/visualization/analytics/__init__.py",
      "total_lines": 6,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 33.33333333333333,
          "comment_lines": 2,
          "code_lines": 4,
          "issues": [],
          "recommendations": [],
          "metric": 33.33333333333333
        },
        "module_size": {
          "compliant": true,
          "module_size": 6,
          "issues": [],
          "recommendations": [],
          "metric": 6
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100,
          "functions": 0,
          "functions_with_docstrings": 0,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 100.0,
      "issues": [],
      "recommendations": [],
      "priority": "low"
    },
    {
      "path": "visualization/analytics/ai_gis_integration.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/visualization/analytics/ai_gis_integration.py",
      "total_lines": 974,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 46,
              "length": 91,
              "content": "Use the provided elevation data, slope information..."
            },
            {
              "line_number": 131,
              "length": 83,
              "content": "            logger.info(f\"Available AI models: {',..."
            },
            {
              "line_number": 133,
              "length": 90,
              "content": "            logger.warning(\"No AI models available..."
            },
            {
              "line_number": 153,
              "length": 81,
              "content": "            logger.warning(\"Google AI API key not ..."
            },
            {
              "line_number": 161,
              "length": 84,
              "content": "            logger.warning(\"Wolfram Alpha App ID n..."
            },
            {
              "line_number": 209,
              "length": 90,
              "content": "        # If coordinates not provided, try to extr..."
            },
            {
              "line_number": 213,
              "length": 101,
              "content": "                coordinates = f\"{bounds[1]:.4f}, {..."
            },
            {
              "line_number": 271,
              "length": 81,
              "content": "                    if hasattr(row.geometry, 'x') ..."
            },
            {
              "line_number": 272,
              "length": 98,
              "content": "                        data_text += f\"Coordinates..."
            },
            {
              "line_number": 285,
              "length": 117,
              "content": "            time_cols = [col for col in data.colum..."
            },
            {
              "line_number": 340,
              "length": 118,
              "content": "            terrain_text += f\"Area bounds: ({bound..."
            },
            {
              "line_number": 382,
              "length": 84,
              "content": "                        historical_data: Union[pd...."
            },
            {
              "line_number": 401,
              "length": 81,
              "content": "            data_text = f\"Historical data with {le..."
            },
            {
              "line_number": 404,
              "length": 128,
              "content": "            time_cols = [col for col in historical..."
            },
            {
              "line_number": 452,
              "length": 92,
              "content": "                     query: str = \"Analyze this ge..."
            },
            {
              "line_number": 481,
              "length": 82,
              "content": "                base64_image = base64.b64encode(im..."
            },
            {
              "line_number": 494,
              "length": 88,
              "content": "                    model=\"gpt-4o\",  # Using o bec..."
            },
            {
              "line_number": 503,
              "length": 87,
              "content": "                                        \"url\": f\"d..."
            },
            {
              "line_number": 520,
              "length": 93,
              "content": "                    [query, {\"inlineData\": {\"data\"..."
            },
            {
              "line_number": 524,
              "length": 82,
              "content": "                logger.error(f\"Error with Google G..."
            },
            {
              "line_number": 528,
              "length": 125,
              "content": "            result = \"No suitable multimodal model..."
            },
            {
              "line_number": 540,
              "length": 94,
              "content": "                                     data: Optiona..."
            },
            {
              "line_number": 554,
              "length": 98,
              "content": "                \"error\": \"Wolfram Alpha client not..."
            },
            {
              "line_number": 638,
              "length": 87,
              "content": "                                G.add_edge(i, j, w..."
            },
            {
              "line_number": 640,
              "length": 101,
              "content": "                            logger.error(f\"Error c..."
            },
            {
              "line_number": 650,
              "length": 109,
              "content": "                                boundary_length = ..."
            },
            {
              "line_number": 651,
              "length": 101,
              "content": "                                G.add_edge(i, j, w..."
            },
            {
              "line_number": 653,
              "length": 102,
              "content": "                            logger.error(f\"Error c..."
            },
            {
              "line_number": 662,
              "length": 86,
              "content": "                                area_ratio = row_j..."
            },
            {
              "line_number": 663,
              "length": 92,
              "content": "                                G.add_edge(i, j, w..."
            },
            {
              "line_number": 665,
              "length": 86,
              "content": "                                area_ratio = row_i..."
            },
            {
              "line_number": 666,
              "length": 92,
              "content": "                                G.add_edge(j, i, w..."
            },
            {
              "line_number": 668,
              "length": 101,
              "content": "                            logger.error(f\"Error c..."
            },
            {
              "line_number": 716,
              "length": 94,
              "content": "                results[\"highest_betweenness_nodes..."
            },
            {
              "line_number": 770,
              "length": 95,
              "content": "                    if isinstance(value, (str, int..."
            },
            {
              "line_number": 795,
              "length": 95,
              "content": "                    if isinstance(value, (str, int..."
            },
            {
              "line_number": 801,
              "length": 85,
              "content": "            os.makedirs(os.path.dirname(os.path.ab..."
            },
            {
              "line_number": 851,
              "length": 91,
              "content": "                    desc_cols = [col for col in de..."
            },
            {
              "line_number": 854,
              "length": 97,
              "content": "                            lambda row: '<br>'.joi..."
            },
            {
              "line_number": 881,
              "length": 88,
              "content": "                    with zipfile.ZipFile(output_fi..."
            },
            {
              "line_number": 911,
              "length": 97,
              "content": "            \"terrain_analysis\": [\"openai-gpt4\", \"a..."
            },
            {
              "line_number": 912,
              "length": 98,
              "content": "            \"pattern_detection\": [\"openai-gpt4\", \"..."
            },
            {
              "line_number": 913,
              "length": 95,
              "content": "            \"route_analysis\": [\"openai-gpt4\", \"ant..."
            },
            {
              "line_number": 914,
              "length": 100,
              "content": "            \"activity_prediction\": [\"openai-gpt4\",..."
            },
            {
              "line_number": 916,
              "length": 86,
              "content": "            \"mathematical_analysis\": [\"wolfram-alp..."
            },
            {
              "line_number": 920,
              "length": 114,
              "content": "        preferences = task_preferences.get(task, [..."
            },
            {
              "line_number": 947,
              "length": 202,
              "content": "                        {\"role\": \"system\", \"conten..."
            },
            {
              "line_number": 970,
              "length": 274,
              "content": "            return f\"Analysis of your request:\\n\\n..."
            },
            {
              "line_number": 974,
              "length": 138,
              "content": "            return \"No suitable AI model available..."
            }
          ],
          "issues": [
            "Found 49 lines exceeding 80 characters",
            "  Line 46: 91 chars",
            "  Line 131: 83 chars",
            "  Line 133: 90 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 49
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 15.834348355663824,
          "comment_lines": 130,
          "code_lines": 691,
          "issues": [],
          "recommendations": [],
          "metric": 15.834348355663824
        },
        "module_size": {
          "compliant": false,
          "module_size": 974,
          "issues": [
            "Module size 974 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 974
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 15,
          "functions_with_docstrings": 15,
          "classes": 1,
          "classes_with_docstrings": 1,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": false,
          "complexity_issues": [
            "Function 'gis_to_graph' has high complexity (22 decision points)"
          ],
          "issues": [
            "Function 'gis_to_graph' has high complexity (22 decision points)"
          ],
          "recommendations": [
            "Break complex functions into smaller, focused functions",
            "Extract complex logic into separate methods or classes"
          ],
          "metric": 1
        }
      },
      "overall_compliant": false,
      "compliance_score": 65.78947368421052,
      "issues": [
        "Found 49 lines exceeding 80 characters",
        "  Line 46: 91 chars",
        "  Line 131: 83 chars",
        "  Line 133: 90 chars",
        "Module size 974 lines exceeds maximum 300 lines",
        "Function 'gis_to_graph' has high complexity (22 decision points)"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files",
        "Break complex functions into smaller, focused functions",
        "Extract complex logic into separate methods or classes"
      ],
      "priority": "low"
    },
    {
      "path": "visualization/gis/__init__.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/visualization/gis/__init__.py",
      "total_lines": 1,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 100.0,
          "comment_lines": 1,
          "code_lines": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "module_size": {
          "compliant": true,
          "module_size": 1,
          "issues": [],
          "recommendations": [],
          "metric": 1
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100,
          "functions": 0,
          "functions_with_docstrings": 0,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 100.0,
      "issues": [],
      "recommendations": [],
      "priority": "low"
    },
    {
      "path": "visualization/gis/drone_mapper.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/visualization/gis/drone_mapper.py",
      "total_lines": 12,
      "standards": {
        "line_length": {
          "compliant": true,
          "long_lines": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "comment_density": {
          "compliant": false,
          "comment_density": 0.0,
          "comment_lines": 0,
          "code_lines": 11,
          "issues": [
            "Comment density 0.0% below minimum 15.0%",
            "  Comment lines: 0, Code lines: 11"
          ],
          "recommendations": [
            "Add more comments to explain complex logic and functions"
          ],
          "metric": 0.0
        },
        "module_size": {
          "compliant": true,
          "module_size": 12,
          "issues": [],
          "recommendations": [],
          "metric": 12
        },
        "docstrings": {
          "compliant": false,
          "docstring_coverage": 0.0,
          "functions": 1,
          "functions_with_docstrings": 0,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [
            "Docstring coverage 0.0% below minimum 80.0%",
            "  Functions: 0/1 with docstrings",
            "  Classes: 0/0 with docstrings"
          ],
          "recommendations": [
            "Add docstrings to all functions and classes",
            "Use clear, descriptive docstrings following Google or NumPy style"
          ],
          "metric": 0.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 64.91228070175438,
      "issues": [
        "Comment density 0.0% below minimum 15.0%",
        "  Comment lines: 0, Code lines: 11",
        "Docstring coverage 0.0% below minimum 80.0%",
        "  Functions: 0/1 with docstrings",
        "  Classes: 0/0 with docstrings"
      ],
      "recommendations": [
        "Add more comments to explain complex logic and functions",
        "Add docstrings to all functions and classes",
        "Use clear, descriptive docstrings following Google or NumPy style"
      ],
      "priority": "low"
    },
    {
      "path": "visualization/gis/geo_processor.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/visualization/gis/geo_processor.py",
      "total_lines": 770,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 4,
              "length": 93,
              "content": "This module provides core geospatial data processi..."
            },
            {
              "line_number": 48,
              "length": 88,
              "content": "        logger.info(f\"Geospatial processor initial..."
            },
            {
              "line_number": 92,
              "length": 84,
              "content": "            logger.info(f\"Loaded GeoJSON from {fil..."
            },
            {
              "line_number": 124,
              "length": 81,
              "content": "                              target_crs: str = 'E..."
            },
            {
              "line_number": 176,
              "length": 84,
              "content": "        # This is a approximation - ideally we wou..."
            },
            {
              "line_number": 181,
              "length": 92,
              "content": "        distance_m = gdf_projected.iloc[0].geometr..."
            },
            {
              "line_number": 247,
              "length": 85,
              "content": "            resolution: H3 resolution (0-15, with ..."
            },
            {
              "line_number": 275,
              "length": 82,
              "content": "            # Create a buffer around the bounds to..."
            },
            {
              "line_number": 277,
              "length": 82,
              "content": "            buffer_size = 2 ** (15 - resolution) *..."
            },
            {
              "line_number": 299,
              "length": 106,
              "content": "            logger.info(f\"Created hexagonal grid w..."
            },
            {
              "line_number": 304,
              "length": 83,
              "content": "            logger.error(\"H3 library not installed..."
            },
            {
              "line_number": 319,
              "length": 83,
              "content": "            predicate: Spatial predicate ('interse..."
            },
            {
              "line_number": 334,
              "length": 84,
              "content": "        logger.info(f\"Performed spatial join with ..."
            },
            {
              "line_number": 365,
              "length": 97,
              "content": "                          return_geometries: bool ..."
            },
            {
              "line_number": 377,
              "length": 87,
              "content": "            logger.warning(\"Spatial index not buil..."
            },
            {
              "line_number": 384,
              "length": 81,
              "content": "        matching_indices = list(self.spatial_index..."
            },
            {
              "line_number": 417,
              "length": 91,
              "content": "                    logger.warning(\"No Google Maps..."
            },
            {
              "line_number": 418,
              "length": 83,
              "content": "                    geocoder = Nominatim(user_agen..."
            },
            {
              "line_number": 422,
              "length": 90,
              "content": "                logger.warning(f\"Unknown geocoding..."
            },
            {
              "line_number": 438,
              "length": 89,
              "content": "            logger.error(\"Geopy library not instal..."
            },
            {
              "line_number": 448,
              "length": 86,
              "content": "                          observer_height: float =..."
            },
            {
              "line_number": 474,
              "length": 81,
              "content": "                           crs: str = 'EPSG:4326')..."
            },
            {
              "line_number": 518,
              "length": 83,
              "content": "            max_distance = max_time * speed * 1000..."
            },
            {
              "line_number": 521,
              "length": 97,
              "content": "            graph = ox.graph_from_point((lat, lng)..."
            },
            {
              "line_number": 528,
              "length": 84,
              "content": "            speeds = {'motorway': 100, 'trunk': 80..."
            },
            {
              "line_number": 529,
              "length": 90,
              "content": "                     'tertiary': 40, 'residential'..."
            },
            {
              "line_number": 556,
              "length": 111,
              "content": "                reachable_nodes = nx.ego_graph(gra..."
            },
            {
              "line_number": 559,
              "length": 107,
              "content": "                node_points = [Point(data['x'], da..."
            },
            {
              "line_number": 562,
              "length": 93,
              "content": "                    logger.warning(f\"Not enough no..."
            },
            {
              "line_number": 578,
              "length": 84,
              "content": "            logger.info(f\"Calculated isochrones fo..."
            },
            {
              "line_number": 583,
              "length": 103,
              "content": "            logger.error(\"Required libraries not i..."
            },
            {
              "line_number": 645,
              "length": 81,
              "content": "                contour = ax.contour(x_grid, y_gri..."
            },
            {
              "line_number": 671,
              "length": 111,
              "content": "                logger.error(\"Required libraries n..."
            },
            {
              "line_number": 700,
              "length": 82,
              "content": "                    cluster_points = point_gdf[poi..."
            },
            {
              "line_number": 717,
              "length": 83,
              "content": "                logger.info(f\"Detected {len(hotspo..."
            },
            {
              "line_number": 722,
              "length": 99,
              "content": "                logger.error(\"Scikit-learn not ins..."
            },
            {
              "line_number": 743,
              "length": 82,
              "content": "                    cluster_points = point_gdf[poi..."
            },
            {
              "line_number": 760,
              "length": 83,
              "content": "                logger.info(f\"Detected {len(hotspo..."
            },
            {
              "line_number": 765,
              "length": 99,
              "content": "                logger.error(\"Scikit-learn not ins..."
            }
          ],
          "issues": [
            "Found 39 lines exceeding 80 characters",
            "  Line 4: 93 chars",
            "  Line 48: 88 chars",
            "  Line 92: 84 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 39
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 19.834710743801654,
          "comment_lines": 120,
          "code_lines": 485,
          "issues": [],
          "recommendations": [],
          "metric": 19.834710743801654
        },
        "module_size": {
          "compliant": false,
          "module_size": 770,
          "issues": [
            "Module size 770 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 770
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 15,
          "functions_with_docstrings": 15,
          "classes": 1,
          "classes_with_docstrings": 1,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": false,
          "complexity_issues": [
            "Function 'detect_hotspots' has high complexity (15 decision points)"
          ],
          "issues": [
            "Function 'detect_hotspots' has high complexity (15 decision points)"
          ],
          "recommendations": [
            "Break complex functions into smaller, focused functions",
            "Extract complex logic into separate methods or classes"
          ],
          "metric": 1
        }
      },
      "overall_compliant": false,
      "compliance_score": 65.78947368421052,
      "issues": [
        "Found 39 lines exceeding 80 characters",
        "  Line 4: 93 chars",
        "  Line 48: 88 chars",
        "  Line 92: 84 chars",
        "Module size 770 lines exceeds maximum 300 lines",
        "Function 'detect_hotspots' has high complexity (15 decision points)"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files",
        "Break complex functions into smaller, focused functions",
        "Extract complex logic into separate methods or classes"
      ],
      "priority": "low"
    },
    {
      "path": "visualization/gis/geojson_utils.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/visualization/gis/geojson_utils.py",
      "total_lines": 706,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 15,
              "length": 85,
              "content": "from shapely.geometry import shape, mapping, Point..."
            },
            {
              "line_number": 48,
              "length": 93,
              "content": "        logger.info(f\"GeoJSON handler initialized ..."
            },
            {
              "line_number": 70,
              "length": 81,
              "content": "    def save_geojson(self, geojson_data: Dict[str,..."
            },
            {
              "line_number": 83,
              "length": 83,
              "content": "            os.makedirs(os.path.dirname(os.path.ab..."
            },
            {
              "line_number": 94,
              "length": 88,
              "content": "    def geojson_to_geodataframe(self, geojson_data..."
            },
            {
              "line_number": 105,
              "length": 96,
              "content": "            gdf = gpd.GeoDataFrame.from_features(g..."
            },
            {
              "line_number": 106,
              "length": 86,
              "content": "            logger.info(f\"Converted GeoJSON to Geo..."
            },
            {
              "line_number": 130,
              "length": 86,
              "content": "            logger.info(f\"Converted GeoDataFrame t..."
            },
            {
              "line_number": 139,
              "length": 88,
              "content": "                     spatial_filter: Optional[Dict..."
            },
            {
              "line_number": 145,
              "length": 83,
              "content": "            property_filters: Dictionary of proper..."
            },
            {
              "line_number": 169,
              "length": 102,
              "content": "                            if prop_name not in pr..."
            },
            {
              "line_number": 176,
              "length": 112,
              "content": "                            if prop_name not in pr..."
            },
            {
              "line_number": 180,
              "length": 96,
              "content": "                        elif prop_name not in prop..."
            },
            {
              "line_number": 205,
              "length": 102,
              "content": "            logger.info(f\"Filtered GeoJSON from {l..."
            },
            {
              "line_number": 211,
              "length": 82,
              "content": "    def merge_geojson(self, geojson_list: List[Dic..."
            },
            {
              "line_number": 235,
              "length": 110,
              "content": "            logger.info(f\"Merged {len(geojson_list..."
            },
            {
              "line_number": 267,
              "length": 84,
              "content": "            logger.info(f\"Simplified GeoJSON geome..."
            },
            {
              "line_number": 324,
              "length": 89,
              "content": "            distance: Buffer distance in degrees (..."
            },
            {
              "line_number": 337,
              "length": 82,
              "content": "            # For more accurate buffers, reproject..."
            },
            {
              "line_number": 338,
              "length": 93,
              "content": "            # This is a simple approximation using..."
            },
            {
              "line_number": 347,
              "length": 94,
              "content": "                buffered = gpd.GeoDataFrame(geomet..."
            },
            {
              "line_number": 357,
              "length": 91,
              "content": "            logger.info(f\"Created buffer with dist..."
            },
            {
              "line_number": 441,
              "length": 81,
              "content": "                    center_hex = h3.geo_to_h3(cent..."
            },
            {
              "line_number": 447,
              "length": 93,
              "content": "                    diagonal = ((bounds[2] - bound..."
            },
            {
              "line_number": 448,
              "length": 109,
              "content": "                    rings = int(diagonal / (hex_si..."
            },
            {
              "line_number": 479,
              "length": 85,
              "content": "                    logger.info(f\"Created hexagona..."
            },
            {
              "line_number": 483,
              "length": 91,
              "content": "                    logger.warning(\"H3 library not..."
            },
            {
              "line_number": 486,
              "length": 84,
              "content": "                logger.warning(f\"Unknown cell type..."
            },
            {
              "line_number": 500,
              "length": 81,
              "content": "            clip_to_bounds: Whether to clip Vorono..."
            },
            {
              "line_number": 532,
              "length": 89,
              "content": "                bounds = (minx - padding, miny - p..."
            },
            {
              "line_number": 555,
              "length": 85,
              "content": "                if len(polygon_vertices) > 2:  # N..."
            },
            {
              "line_number": 560,
              "length": 84,
              "content": "                        voronoi_polygon = voronoi_..."
            },
            {
              "line_number": 580,
              "length": 86,
              "content": "            logger.info(f\"Created Voronoi diagram ..."
            },
            {
              "line_number": 620,
              "length": 90,
              "content": "            grid_geojson = self.create_grid((minx,..."
            }
          ],
          "issues": [
            "Found 34 lines exceeding 80 characters",
            "  Line 15: 85 chars",
            "  Line 48: 93 chars",
            "  Line 70: 81 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 34
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 20.0,
          "comment_lines": 115,
          "code_lines": 460,
          "issues": [],
          "recommendations": [],
          "metric": 20.0
        },
        "module_size": {
          "compliant": false,
          "module_size": 706,
          "issues": [
            "Module size 706 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 706
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 13,
          "functions_with_docstrings": 13,
          "classes": 1,
          "classes_with_docstrings": 1,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": false,
          "complexity_issues": [
            "Function 'filter_geojson' has high complexity (13 decision points)",
            "Function 'create_heatmap_grid' has high complexity (18 decision points)"
          ],
          "issues": [
            "Function 'filter_geojson' has high complexity (13 decision points)",
            "Function 'create_heatmap_grid' has high complexity (18 decision points)"
          ],
          "recommendations": [
            "Break complex functions into smaller, focused functions",
            "Extract complex logic into separate methods or classes"
          ],
          "metric": 2
        }
      },
      "overall_compliant": false,
      "compliance_score": 65.78947368421052,
      "issues": [
        "Found 34 lines exceeding 80 characters",
        "  Line 15: 85 chars",
        "  Line 48: 93 chars",
        "  Line 70: 81 chars",
        "Module size 706 lines exceeds maximum 300 lines",
        "Function 'filter_geojson' has high complexity (13 decision points)",
        "Function 'create_heatmap_grid' has high complexity (18 decision points)"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files",
        "Break complex functions into smaller, focused functions",
        "Extract complex logic into separate methods or classes"
      ],
      "priority": "low"
    },
    {
      "path": "visualization/gis/mapbox_integration.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/visualization/gis/mapbox_integration.py",
      "total_lines": 968,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 43,
              "length": 86,
              "content": "            access_token: Mapbox access token (opt..."
            },
            {
              "line_number": 46,
              "length": 81,
              "content": "        self.access_token = access_token or os.env..."
            },
            {
              "line_number": 50,
              "length": 97,
              "content": "            logger.warning(\"No Mapbox access token..."
            },
            {
              "line_number": 96,
              "length": 85,
              "content": "                    'style': self.map_styles.get(m..."
            },
            {
              "line_number": 99,
              "length": 110,
              "content": "                    'center': {'lon': 0, 'lat': 0}..."
            },
            {
              "line_number": 109,
              "length": 86,
              "content": "            logger.warning(f\"Missing required colu..."
            },
            {
              "line_number": 143,
              "length": 85,
              "content": "                mapbox_style=self.map_styles.get(m..."
            },
            {
              "line_number": 156,
              "length": 85,
              "content": "                mapbox_style=self.map_styles.get(m..."
            },
            {
              "line_number": 174,
              "length": 87,
              "content": "                                 infrastructure_gd..."
            },
            {
              "line_number": 185,
              "length": 81,
              "content": "            infrastructure_gdf: GeoDataFrame with ..."
            },
            {
              "line_number": 199,
              "length": 85,
              "content": "                    'style': self.map_styles.get(m..."
            },
            {
              "line_number": 202,
              "length": 110,
              "content": "                    'center': {'lon': 0, 'lat': 0}..."
            },
            {
              "line_number": 212,
              "length": 95,
              "content": "            logger.warning(f\"Missing required colu..."
            },
            {
              "line_number": 253,
              "length": 81,
              "content": "                        name=feature['properties']..."
            },
            {
              "line_number": 272,
              "length": 85,
              "content": "                    area_name = feature['propertie..."
            },
            {
              "line_number": 276,
              "length": 87,
              "content": "                    color = self.threat_colors.get..."
            },
            {
              "line_number": 284,
              "length": 106,
              "content": "                        fillcolor=color.replace(')..."
            },
            {
              "line_number": 301,
              "length": 81,
              "content": "            if all(col in heatmap_data.columns for..."
            },
            {
              "line_number": 329,
              "length": 82,
              "content": "                    text = f\"<b>{row.get('location..."
            },
            {
              "line_number": 341,
              "length": 81,
              "content": "                        size=type_data[severity_co..."
            },
            {
              "line_number": 402,
              "length": 82,
              "content": "                            args=[{\"mapbox.style\":..."
            },
            {
              "line_number": 412,
              "length": 81,
              "content": "                            args=[{\"mapbox.style\":..."
            },
            {
              "line_number": 449,
              "length": 84,
              "content": "            missing_cols = [col for col in require..."
            },
            {
              "line_number": 451,
              "length": 90,
              "content": "                logger.warning(f\"Missing required ..."
            },
            {
              "line_number": 532,
              "length": 84,
              "content": "                    get_elevation='elevation' if '..."
            },
            {
              "line_number": 588,
              "length": 84,
              "content": "            missing_cols = [col for col in require..."
            },
            {
              "line_number": 590,
              "length": 94,
              "content": "                logger.warning(f\"Missing required ..."
            },
            {
              "line_number": 689,
              "length": 90,
              "content": "            logger.warning(f\"Missing required colu..."
            },
            {
              "line_number": 733,
              "length": 88,
              "content": "                    type_data = period_data[period..."
            },
            {
              "line_number": 738,
              "length": 86,
              "content": "                        text = f\"<b>{row.get('loca..."
            },
            {
              "line_number": 741,
              "length": 82,
              "content": "                            if col not in ['lat', ..."
            },
            {
              "line_number": 753,
              "length": 93,
              "content": "                                color=self.threat_..."
            },
            {
              "line_number": 773,
              "length": 82,
              "content": "                    text = f\"<b>{row.get('location..."
            },
            {
              "line_number": 814,
              "length": 89,
              "content": "                            color=self.threat_colo..."
            },
            {
              "line_number": 905,
              "length": 82,
              "content": "                            args=[{\"mapbox.style\":..."
            },
            {
              "line_number": 915,
              "length": 81,
              "content": "                            args=[{\"mapbox.style\":..."
            }
          ],
          "issues": [
            "Found 36 lines exceeding 80 characters",
            "  Line 43: 86 chars",
            "  Line 46: 81 chars",
            "  Line 50: 97 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 36
        },
        "comment_density": {
          "compliant": false,
          "comment_density": 11.811926605504587,
          "comment_lines": 103,
          "code_lines": 769,
          "issues": [
            "Comment density 11.8% below minimum 15.0%",
            "  Comment lines: 103, Code lines: 769"
          ],
          "recommendations": [
            "Add more comments to explain complex logic and functions"
          ],
          "metric": 11.811926605504587
        },
        "module_size": {
          "compliant": false,
          "module_size": 968,
          "issues": [
            "Module size 968 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 968
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 6,
          "functions_with_docstrings": 6,
          "classes": 1,
          "classes_with_docstrings": 1,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": false,
          "complexity_issues": [
            "Function 'create_advanced_threat_map' has high complexity (25 decision points)",
            "Function 'create_time_lapse_map' has high complexity (16 decision points)"
          ],
          "issues": [
            "Function 'create_advanced_threat_map' has high complexity (25 decision points)",
            "Function 'create_time_lapse_map' has high complexity (16 decision points)"
          ],
          "recommendations": [
            "Break complex functions into smaller, focused functions",
            "Extract complex logic into separate methods or classes"
          ],
          "metric": 2
        }
      },
      "overall_compliant": false,
      "compliance_score": 62.06073287193519,
      "issues": [
        "Found 36 lines exceeding 80 characters",
        "  Line 43: 86 chars",
        "  Line 46: 81 chars",
        "  Line 50: 97 chars",
        "Comment density 11.8% below minimum 15.0%",
        "  Comment lines: 103, Code lines: 769",
        "Module size 968 lines exceeds maximum 300 lines",
        "Function 'create_advanced_threat_map' has high complexity (25 decision points)",
        "Function 'create_time_lapse_map' has high complexity (16 decision points)"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Add more comments to explain complex logic and functions",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files",
        "Break complex functions into smaller, focused functions",
        "Extract complex logic into separate methods or classes"
      ],
      "priority": "low"
    },
    {
      "path": "visualization/gis/postgis_integration.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/visualization/gis/postgis_integration.py",
      "total_lines": 655,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 15,
              "length": 102,
              "content": "from sqlalchemy import create_engine, text, Column..."
            },
            {
              "line_number": 46,
              "length": 84,
              "content": "    updated_at = Column(DateTime, default=datetime..."
            },
            {
              "line_number": 73,
              "length": 81,
              "content": "            connection_string: Connection string f..."
            },
            {
              "line_number": 110,
              "length": 87,
              "content": "                    logger.error(\"No connection st..."
            },
            {
              "line_number": 124,
              "length": 94,
              "content": "                    logger.info(f\"Connected to Pos..."
            },
            {
              "line_number": 130,
              "length": 89,
              "content": "                    logger.error(\"Supabase URL and..."
            },
            {
              "line_number": 134,
              "length": 90,
              "content": "                self.supabase_client = create_clie..."
            },
            {
              "line_number": 138,
              "length": 84,
              "content": "                response = self.supabase_client.rp..."
            },
            {
              "line_number": 141,
              "length": 97,
              "content": "                    logger.info(f\"Connected to Sup..."
            },
            {
              "line_number": 143,
              "length": 94,
              "content": "                    logger.info(\"Connected to Supa..."
            },
            {
              "line_number": 204,
              "length": 99,
              "content": "                gdf_copy['geom'] = gdf_copy[geom_c..."
            },
            {
              "line_number": 210,
              "length": 90,
              "content": "                gdf_copy.to_sql(table_name, self.e..."
            },
            {
              "line_number": 214,
              "length": 126,
              "content": "                    conn.execute(text(f\"CREATE IND..."
            },
            {
              "line_number": 221,
              "length": 86,
              "content": "                # For Supabase, we need to convert..."
            },
            {
              "line_number": 250,
              "length": 103,
              "content": "                    # If first batch and if_exists..."
            },
            {
              "line_number": 254,
              "length": 82,
              "content": "                logger.info(f\"Stored GeoDataFrame ..."
            },
            {
              "line_number": 287,
              "length": 114,
              "content": "                        query = query.replace(f\"SE..."
            },
            {
              "line_number": 288,
              "length": 110,
              "content": "                        query = query.replace(f\"SE..."
            },
            {
              "line_number": 296,
              "length": 103,
              "content": "                        return gpd.GeoDataFrame(co..."
            },
            {
              "line_number": 300,
              "length": 92,
              "content": "                    df[geom_col] = df[geom_col].ap..."
            },
            {
              "line_number": 303,
              "length": 82,
              "content": "                    gdf = gpd.GeoDataFrame(df, geo..."
            },
            {
              "line_number": 318,
              "length": 99,
              "content": "                    return gpd.GeoDataFrame(column..."
            },
            {
              "line_number": 324,
              "length": 94,
              "content": "                    logger.warning(f\"Geometry colu..."
            },
            {
              "line_number": 351,
              "length": 84,
              "content": "                    select_columns: Optional[List[..."
            },
            {
              "line_number": 358,
              "length": 82,
              "content": "            join_type: Spatial relationship ('ST_I..."
            },
            {
              "line_number": 372,
              "length": 98,
              "content": "            columns = \", \".join([f\"a.{col}\" if '.'..."
            },
            {
              "line_number": 406,
              "length": 93,
              "content": "        SELECT id, name, ST_Buffer({geom_col}::geo..."
            },
            {
              "line_number": 447,
              "length": 92,
              "content": "            ST_Distance(a.{geom_col}::geography, b..."
            },
            {
              "line_number": 482,
              "length": 86,
              "content": "                                max_distance: Opti..."
            },
            {
              "line_number": 498,
              "length": 143,
              "content": "        distance_clause = f\"AND ST_Distance(p.{poi..."
            },
            {
              "line_number": 507,
              "length": 99,
              "content": "            ST_Distance(p.{point_geom}::geography,..."
            },
            {
              "line_number": 647,
              "length": 85,
              "content": "                logger.info(f\"Exported table {tabl..."
            }
          ],
          "issues": [
            "Found 32 lines exceeding 80 characters",
            "  Line 15: 102 chars",
            "  Line 46: 84 chars",
            "  Line 73: 81 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 32
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 16.266173752310536,
          "comment_lines": 88,
          "code_lines": 453,
          "issues": [],
          "recommendations": [],
          "metric": 16.266173752310536
        },
        "module_size": {
          "compliant": false,
          "module_size": 655,
          "issues": [
            "Module size 655 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 655
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 12,
          "functions_with_docstrings": 12,
          "classes": 2,
          "classes_with_docstrings": 2,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": false,
          "violations": [
            "Variable 'Base' should use snake_case"
          ],
          "issues": [
            "Variable 'Base' should use snake_case"
          ],
          "recommendations": [
            "Follow Python naming conventions: snake_case for functions/variables, PascalCase for classes"
          ],
          "metric": 1
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 66.66666666666667,
      "issues": [
        "Found 32 lines exceeding 80 characters",
        "  Line 15: 102 chars",
        "  Line 46: 84 chars",
        "  Line 73: 81 chars",
        "Module size 655 lines exceeds maximum 300 lines",
        "Variable 'Base' should use snake_case"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files",
        "Follow Python naming conventions: snake_case for functions/variables, PascalCase for classes"
      ],
      "priority": "low"
    },
    {
      "path": "visualization/gis/whitebox_tools.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/visualization/gis/whitebox_tools.py",
      "total_lines": 768,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 44,
              "length": 82,
              "content": "            whitebox_dir: Directory containing Whi..."
            },
            {
              "line_number": 54,
              "length": 98,
              "content": "                logger.warning(f\"Provided Whitebox..."
            },
            {
              "line_number": 61,
              "length": 86,
              "content": "        logger.info(f\"Created temporary directory ..."
            },
            {
              "line_number": 73,
              "length": 87,
              "content": "    def list_tools(self, keywords: Optional[List[s..."
            },
            {
              "line_number": 103,
              "length": 121,
              "content": "                               derivatives: List[s..."
            },
            {
              "line_number": 129,
              "length": 121,
              "content": "            output_file = os.path.join(output_dir,..."
            },
            {
              "line_number": 163,
              "length": 127,
              "content": "                    flow_acc_file = os.path.join(o..."
            },
            {
              "line_number": 179,
              "length": 81,
              "content": "                    center_file = os.path.join(sel..."
            },
            {
              "line_number": 235,
              "length": 84,
              "content": "                logger.info(f\"Saved observer point..."
            },
            {
              "line_number": 237,
              "length": 89,
              "content": "                logger.error(f\"Error saving observ..."
            },
            {
              "line_number": 256,
              "length": 83,
              "content": "            logger.info(f\"Calculated viewshed from..."
            },
            {
              "line_number": 289,
              "length": 114,
              "content": "            filled_dem = os.path.join(output_dir, ..."
            },
            {
              "line_number": 297,
              "length": 114,
              "content": "            flow_dir = os.path.join(output_dir, f\"..."
            },
            {
              "line_number": 305,
              "length": 114,
              "content": "            flow_acc = os.path.join(output_dir, f\"..."
            },
            {
              "line_number": 313,
              "length": 112,
              "content": "            streams = os.path.join(output_dir, f\"{..."
            },
            {
              "line_number": 317,
              "length": 91,
              "content": "                threshold=1000  # This threshold w..."
            },
            {
              "line_number": 322,
              "length": 116,
              "content": "            junctions = os.path.join(output_dir, f..."
            },
            {
              "line_number": 330,
              "length": 118,
              "content": "            watersheds = os.path.join(output_dir, ..."
            },
            {
              "line_number": 339,
              "length": 125,
              "content": "            watersheds_vector = os.path.join(outpu..."
            },
            {
              "line_number": 352,
              "length": 89,
              "content": "            return results  # Return partial resul..."
            },
            {
              "line_number": 380,
              "length": 106,
              "content": "            dem = os.path.join(output_dir, f\"{os.p..."
            },
            {
              "line_number": 390,
              "length": 106,
              "content": "            dsm = os.path.join(output_dir, f\"{os.p..."
            },
            {
              "line_number": 400,
              "length": 106,
              "content": "            chm = os.path.join(output_dir, f\"{os.p..."
            },
            {
              "line_number": 409,
              "length": 118,
              "content": "            buildings = os.path.join(output_dir, f..."
            },
            {
              "line_number": 413,
              "length": 83,
              "content": "                exclude_cls=\"1,2,3,5,6,7,9\",  # Ke..."
            },
            {
              "line_number": 419,
              "length": 125,
              "content": "            buildings_vector = os.path.join(output..."
            },
            {
              "line_number": 432,
              "length": 89,
              "content": "            return results  # Return partial resul..."
            },
            {
              "line_number": 481,
              "length": 82,
              "content": "                                     source_points..."
            },
            {
              "line_number": 509,
              "length": 82,
              "content": "                logger.info(f\"Saved source points ..."
            },
            {
              "line_number": 511,
              "length": 87,
              "content": "                logger.error(f\"Error saving source..."
            },
            {
              "line_number": 570,
              "length": 83,
              "content": "            logger.error(f\"Input cost surface file..."
            },
            {
              "line_number": 580,
              "length": 89,
              "content": "                'geometry': [gpd.points_from_xy([s..."
            },
            {
              "line_number": 586,
              "length": 99,
              "content": "                'geometry': [gpd.points_from_xy([d..."
            },
            {
              "line_number": 645,
              "length": 82,
              "content": "                logger.info(f\"Saved source points ..."
            },
            {
              "line_number": 647,
              "length": 87,
              "content": "                logger.error(f\"Error saving source..."
            },
            {
              "line_number": 714,
              "length": 112,
              "content": "            valleys = os.path.join(output_dir, f\"{..."
            },
            {
              "line_number": 726,
              "length": 110,
              "content": "            ridges = os.path.join(output_dir, f\"{o..."
            },
            {
              "line_number": 738,
              "length": 108,
              "content": "            peaks = os.path.join(output_dir, f\"{os..."
            },
            {
              "line_number": 746,
              "length": 115,
              "content": "            peaks_vector = os.path.join(output_dir..."
            },
            {
              "line_number": 754,
              "length": 108,
              "content": "            flats = os.path.join(output_dir, f\"{os..."
            },
            {
              "line_number": 768,
              "length": 89,
              "content": "            return results  # Return partial resul..."
            }
          ],
          "issues": [
            "Found 41 lines exceeding 80 characters",
            "  Line 44: 82 chars",
            "  Line 54: 98 chars",
            "  Line 61: 86 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 41
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 15.109034267912772,
          "comment_lines": 97,
          "code_lines": 545,
          "issues": [],
          "recommendations": [],
          "metric": 15.109034267912772
        },
        "module_size": {
          "compliant": false,
          "module_size": 768,
          "issues": [
            "Module size 768 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 768
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 12,
          "functions_with_docstrings": 12,
          "classes": 1,
          "classes_with_docstrings": 1,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 73.68421052631578,
      "issues": [
        "Found 41 lines exceeding 80 characters",
        "  Line 44: 82 chars",
        "  Line 54: 98 chars",
        "  Line 61: 86 chars",
        "Module size 768 lines exceeds maximum 300 lines"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files"
      ],
      "priority": "low"
    },
    {
      "path": "visualization/heatmap.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/visualization/heatmap.py",
      "total_lines": 257,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 20,
              "length": 86,
              "content": "    sys.path.insert(0, os.path.abspath(os.path.joi..."
            },
            {
              "line_number": 30,
              "length": 82,
              "content": "        df: DataFrame containing location data wit..."
            },
            {
              "line_number": 46,
              "length": 89,
              "content": "    if not all(col in df.columns for col in ['Lati..."
            },
            {
              "line_number": 47,
              "length": 108,
              "content": "        raise ValueError(f\"DataFrame must contain ..."
            },
            {
              "line_number": 52,
              "length": 92,
              "content": "        df['intensity_normalized'] = (df[intensity..."
            },
            {
              "line_number": 53,
              "length": 93,
              "content": "                                    (df[intensity_..."
            },
            {
              "line_number": 111,
              "length": 88,
              "content": "def create_time_based_heatmap(df, date_column='Dat..."
            },
            {
              "line_number": 112,
              "length": 81,
              "content": "                             animation_frame=None,..."
            },
            {
              "line_number": 114,
              "length": 88,
              "content": "    Create a time-based heatmap visualization that..."
            },
            {
              "line_number": 120,
              "length": 91,
              "content": "        animation_frame: Column to use for animati..."
            },
            {
              "line_number": 136,
              "length": 82,
              "content": "    # If animation_frame is None but we have a dat..."
            },
            {
              "line_number": 174,
              "length": 84,
              "content": "        fig.layout.updatemenus[0].buttons[0].args[..."
            },
            {
              "line_number": 183,
              "length": 81,
              "content": "def create_clustered_heatmap(df, n_clusters=5, int..."
            },
            {
              "line_number": 206,
              "length": 94,
              "content": "        return create_heatmap(df, intensity_column..."
            },
            {
              "line_number": 241,
              "length": 82,
              "content": "                color=f'rgba({i*50 % 255}, {(i*80)..."
            }
          ],
          "issues": [
            "Found 15 lines exceeding 80 characters",
            "  Line 20: 86 chars",
            "  Line 30: 82 chars",
            "  Line 46: 89 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 15
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 15.384615384615385,
          "comment_lines": 34,
          "code_lines": 187,
          "issues": [],
          "recommendations": [],
          "metric": 15.384615384615385
        },
        "module_size": {
          "compliant": true,
          "module_size": 257,
          "issues": [],
          "recommendations": [],
          "metric": 257
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 3,
          "functions_with_docstrings": 3,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": true,
      "compliance_score": 91.22807017543859,
      "issues": [
        "Found 15 lines exceeding 80 characters",
        "  Line 20: 86 chars",
        "  Line 30: 82 chars",
        "  Line 46: 89 chars"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation"
      ],
      "priority": "low"
    },
    {
      "path": "visualization/osint_visualizer.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/visualization/osint_visualizer.py",
      "total_lines": 460,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 22,
              "length": 86,
              "content": "    sys.path.insert(0, os.path.abspath(os.path.joi..."
            },
            {
              "line_number": 26,
              "length": 87,
              "content": "def create_emotion_radar_chart(emotion_data: Dict[..."
            },
            {
              "line_number": 28,
              "length": 85,
              "content": "    Create a radar chart showing the distribution ..."
            },
            {
              "line_number": 44,
              "length": 85,
              "content": "    line_color = 'rgb(31, 119, 180)' if not theme[..."
            },
            {
              "line_number": 45,
              "length": 97,
              "content": "    fill_color = 'rgba(31, 119, 180, 0.5)' if not ..."
            },
            {
              "line_number": 192,
              "length": 88,
              "content": "                                title: str = \"Emot..."
            },
            {
              "line_number": 198,
              "length": 84,
              "content": "            e.g., {'anger': {'dates': ['2023-01-01..."
            },
            {
              "line_number": 254,
              "length": 82,
              "content": "def create_sentiment_heatmap(df: pd.DataFrame, loc..."
            },
            {
              "line_number": 272,
              "length": 106,
              "content": "    if df.empty or not all(col in df.columns for c..."
            },
            {
              "line_number": 324,
              "length": 107,
              "content": "def create_key_phrases_wordcloud(key_phrases: List..."
            },
            {
              "line_number": 373,
              "length": 122,
              "content": "    sizes = [10 + (count - min_count) * 40 / (max_..."
            },
            {
              "line_number": 396,
              "length": 139,
              "content": "            color=[f'rgb({random.randint(base_r, b..."
            },
            {
              "line_number": 417,
              "length": 92,
              "content": "                         content_df: Optional[pd.D..."
            },
            {
              "line_number": 431,
              "length": 83,
              "content": "    if 'dominant_emotions' in insights_data and in..."
            },
            {
              "line_number": 432,
              "length": 97,
              "content": "        figures['emotion_radar'] = create_emotion_..."
            },
            {
              "line_number": 435,
              "length": 100,
              "content": "    if content_df is not None and 'key_entities' i..."
            },
            {
              "line_number": 442,
              "length": 81,
              "content": "    if 'emotional_trends' in insights_data and ins..."
            },
            {
              "line_number": 443,
              "length": 102,
              "content": "        figures['emotional_trends'] = create_emoti..."
            },
            {
              "line_number": 446,
              "length": 100,
              "content": "    if content_df is not None and 'Location' in co..."
            }
          ],
          "issues": [
            "Found 19 lines exceeding 80 characters",
            "  Line 22: 86 chars",
            "  Line 26: 87 chars",
            "  Line 28: 85 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 19
        },
        "comment_density": {
          "compliant": true,
          "comment_density": 15.748031496062993,
          "comment_lines": 60,
          "code_lines": 321,
          "issues": [],
          "recommendations": [],
          "metric": 15.748031496062993
        },
        "module_size": {
          "compliant": false,
          "module_size": 460,
          "issues": [
            "Module size 460 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 460
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 100.0,
          "functions": 6,
          "functions_with_docstrings": 6,
          "classes": 0,
          "classes_with_docstrings": 0,
          "issues": [],
          "recommendations": [],
          "metric": 100.0
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 73.68421052631578,
      "issues": [
        "Found 19 lines exceeding 80 characters",
        "  Line 22: 86 chars",
        "  Line 26: 87 chars",
        "  Line 28: 85 chars",
        "Module size 460 lines exceeds maximum 300 lines"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files"
      ],
      "priority": "low"
    },
    {
      "path": "visualization/threat_flow_visualization.py",
      "absolute_path": "/Users/cp5337/Developer/nyx-trace-6-6-ACTIVE-MAIN/visualization/threat_flow_visualization.py",
      "total_lines": 612,
      "standards": {
        "line_length": {
          "compliant": false,
          "long_lines": [
            {
              "line_number": 103,
              "length": 107,
              "content": "            lat_offset = np.random.uniform(0.5, 3...."
            },
            {
              "line_number": 104,
              "length": 107,
              "content": "            lon_offset = np.random.uniform(0.5, 3...."
            },
            {
              "line_number": 111,
              "length": 83,
              "content": "            weight_scaled = min(max(1, row['weight..."
            },
            {
              "line_number": 127,
              "length": 117,
              "content": "                    text=f\"{row['source']} \u2192 {row[..."
            },
            {
              "line_number": 141,
              "length": 99,
              "content": "                lat = (1-t)**2 * row['source_lat']..."
            },
            {
              "line_number": 142,
              "length": 99,
              "content": "                lon = (1-t)**2 * row['source_lon']..."
            },
            {
              "line_number": 164,
              "length": 85,
              "content": "        sources = flow_data[['source', 'source_lat..."
            },
            {
              "line_number": 187,
              "length": 85,
              "content": "        targets = flow_data[['target', 'target_lat..."
            },
            {
              "line_number": 247,
              "length": 106,
              "content": "                            args=[None, {\"frame\": ..."
            },
            {
              "line_number": 267,
              "length": 97,
              "content": "                                {\"frame\": {\"durati..."
            },
            {
              "line_number": 455,
              "length": 93,
              "content": "                    colors=['#FF6B6B', '#4ECDC4', ..."
            },
            {
              "line_number": 496,
              "length": 87,
              "content": "                start_date = st.date_input(\"Start ..."
            },
            {
              "line_number": 499,
              "length": 81,
              "content": "                end_date = st.date_input(\"End Date..."
            },
            {
              "line_number": 502,
              "length": 102,
              "content": "            mask = (flow_data['date'].dt.date >= s..."
            },
            {
              "line_number": 557,
              "length": 84,
              "content": "            display_df = filtered_data.sort_values..."
            },
            {
              "line_number": 558,
              "length": 92,
              "content": "            display_df = display_df[['source', 'ta..."
            },
            {
              "line_number": 561,
              "length": 109,
              "content": "            display_df.columns = ['Threat Actor', ..."
            },
            {
              "line_number": 589,
              "length": 81,
              "content": "            top_target = filtered_data.groupby('ta..."
            },
            {
              "line_number": 592,
              "length": 112,
              "content": "            - The most active threat actor is **{t..."
            },
            {
              "line_number": 594,
              "length": 135,
              "content": "            - There are **{num_flows}** distinct t..."
            },
            {
              "line_number": 603,
              "length": 109,
              "content": "            1. Implement additional monitoring for..."
            },
            {
              "line_number": 607,
              "length": 83,
              "content": "            5. Share intelligence with partner org..."
            },
            {
              "line_number": 612,
              "length": 112,
              "content": "            st.info(\"No threat intelligence data a..."
            }
          ],
          "issues": [
            "Found 23 lines exceeding 80 characters",
            "  Line 103: 107 chars",
            "  Line 104: 107 chars",
            "  Line 111: 83 chars"
          ],
          "recommendations": [
            "Break long lines into multiple lines or use line continuation"
          ],
          "metric": 23
        },
        "comment_density": {
          "compliant": false,
          "comment_density": 12.382739212007504,
          "comment_lines": 66,
          "code_lines": 467,
          "issues": [
            "Comment density 12.4% below minimum 15.0%",
            "  Comment lines: 66, Code lines: 467"
          ],
          "recommendations": [
            "Add more comments to explain complex logic and functions"
          ],
          "metric": 12.382739212007504
        },
        "module_size": {
          "compliant": false,
          "module_size": 612,
          "issues": [
            "Module size 612 lines exceeds maximum 300 lines"
          ],
          "recommendations": [
            "Split large module into smaller, focused modules",
            "Extract classes or functions into separate files"
          ],
          "metric": 612
        },
        "docstrings": {
          "compliant": true,
          "docstring_coverage": 85.71428571428571,
          "functions": 6,
          "functions_with_docstrings": 5,
          "classes": 1,
          "classes_with_docstrings": 1,
          "issues": [],
          "recommendations": [],
          "metric": 85.71428571428571
        },
        "naming_conventions": {
          "compliant": true,
          "violations": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        },
        "complexity": {
          "compliant": true,
          "complexity_issues": [],
          "issues": [],
          "recommendations": [],
          "metric": 0
        }
      },
      "overall_compliant": false,
      "compliance_score": 70.62308679766959,
      "issues": [
        "Found 23 lines exceeding 80 characters",
        "  Line 103: 107 chars",
        "  Line 104: 107 chars",
        "  Line 111: 83 chars",
        "Comment density 12.4% below minimum 15.0%",
        "  Comment lines: 66, Code lines: 467",
        "Module size 612 lines exceeds maximum 300 lines"
      ],
      "recommendations": [
        "Break long lines into multiple lines or use line continuation",
        "Add more comments to explain complex logic and functions",
        "Split large module into smaller, focused modules",
        "Extract classes or functions into separate files"
      ],
      "priority": "low"
    }
  ],
  "recommendations": [
    "\u26a0\ufe0f Line Length compliance critical: 36.4%",
    "\ud83d\udcdd Comment Density needs improvement: 75.7%",
    "\ud83d\udcdd Module Size needs improvement: 50.9%",
    "\ud83d\udce6 105 files exceed size limits - consider splitting",
    "\ud83d\udcda 19 files need docstring improvements"
  ],
  "progress_metrics": {
    "priority_distribution": {
      "high": 0,
      "medium": 4,
      "low": 210
    },
    "average_compliance_score": 82.17660669948461,
    "files_needing_attention": 4,
    "improvement_potential": 17.82339330051539
  },
  "compliance_level": "fair"
}